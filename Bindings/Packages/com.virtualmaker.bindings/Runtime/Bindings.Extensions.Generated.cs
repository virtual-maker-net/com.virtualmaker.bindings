using System;
using UnityEngine;

namespace VirtualMaker.Bindings.Extensions
{
    public static partial class BindingsExtensions
    {
        #if UNITY_ANIMATION
        public static void BindConstraintActive(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.constraintActive = v);
        public static void BindConstraintActive(this UnityEngine.Animations.AimConstraint obj, IProperty<System.Boolean> property)
            => BindConstraintActive(obj, Bindings2._scope, property);
        public static void BindConstraintActive(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.constraintActive = func());
        public static void BindConstraintActive(this UnityEngine.Animations.AimConstraint obj, Func<System.Boolean> func)
            => BindConstraintActive(obj, Bindings2._scope, func);
        public static void BindConstraintActiveInterval(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.constraintActive = func());
        public static void BindConstraintActiveInterval(this UnityEngine.Animations.AimConstraint obj, float seconds, Func<System.Boolean> func)
            => BindConstraintActiveInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWeight(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.weight = v);
        public static void BindWeight(this UnityEngine.Animations.AimConstraint obj, IProperty<System.Single> property)
            => BindWeight(obj, Bindings2._scope, property);
        public static void BindWeight(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.weight = func());
        public static void BindWeight(this UnityEngine.Animations.AimConstraint obj, Func<System.Single> func)
            => BindWeight(obj, Bindings2._scope, func);
        public static void BindWeightInterval(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.weight = func());
        public static void BindWeightInterval(this UnityEngine.Animations.AimConstraint obj, float seconds, Func<System.Single> func)
            => BindWeightInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAimVector(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.aimVector = v);
        public static void BindAimVector(this UnityEngine.Animations.AimConstraint obj, IProperty<UnityEngine.Vector3> property)
            => BindAimVector(obj, Bindings2._scope, property);
        public static void BindAimVector(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.aimVector = func());
        public static void BindAimVector(this UnityEngine.Animations.AimConstraint obj, Func<UnityEngine.Vector3> func)
            => BindAimVector(obj, Bindings2._scope, func);
        public static void BindAimVectorInterval(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.aimVector = func());
        public static void BindAimVectorInterval(this UnityEngine.Animations.AimConstraint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindAimVectorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAimVectorLerp(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.aimVector = Vector3.Lerp(obj.aimVector, property.Value, speed * Time.smoothDeltaTime));
        public static void BindAimVectorLerp(this UnityEngine.Animations.AimConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindAimVectorLerp(obj, Bindings2._scope, speed, property);
        public static void BindAimVectorLerp(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.aimVector = Vector3.Lerp(obj.aimVector, func(), speed * Time.smoothDeltaTime));
        public static void BindAimVectorLerp(this UnityEngine.Animations.AimConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindAimVectorLerp(obj, Bindings2._scope, speed, func);
        public static void BindAimVectorTowards(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.aimVector = Vector3.MoveTowards(obj.aimVector, property.Value, speed * Time.smoothDeltaTime));
        public static void BindAimVectorTowards(this UnityEngine.Animations.AimConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindAimVectorTowards(obj, Bindings2._scope, speed, property);
        public static void BindAimVectorTowards(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.aimVector = Vector3.MoveTowards(obj.aimVector, func(), speed * Time.smoothDeltaTime));
        public static void BindAimVectorTowards(this UnityEngine.Animations.AimConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindAimVectorTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateAimVector(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.aimVector = Vector3.Lerp(start, end, t));
        public static void AnimateAimVector(this UnityEngine.Animations.AimConstraint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAimVector(obj, Bindings2._scope, start, end, curve);
        public static void AnimateAimVector(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAimVector(obj, Bindings2._scope, obj.aimVector, end, curve);
        public static void AnimateAimVector(this UnityEngine.Animations.AimConstraint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAimVector(obj, Bindings2._scope, end, curve);
        public static void BindUpVector(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.upVector = v);
        public static void BindUpVector(this UnityEngine.Animations.AimConstraint obj, IProperty<UnityEngine.Vector3> property)
            => BindUpVector(obj, Bindings2._scope, property);
        public static void BindUpVector(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.upVector = func());
        public static void BindUpVector(this UnityEngine.Animations.AimConstraint obj, Func<UnityEngine.Vector3> func)
            => BindUpVector(obj, Bindings2._scope, func);
        public static void BindUpVectorInterval(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.upVector = func());
        public static void BindUpVectorInterval(this UnityEngine.Animations.AimConstraint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindUpVectorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUpVectorLerp(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.upVector = Vector3.Lerp(obj.upVector, property.Value, speed * Time.smoothDeltaTime));
        public static void BindUpVectorLerp(this UnityEngine.Animations.AimConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindUpVectorLerp(obj, Bindings2._scope, speed, property);
        public static void BindUpVectorLerp(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.upVector = Vector3.Lerp(obj.upVector, func(), speed * Time.smoothDeltaTime));
        public static void BindUpVectorLerp(this UnityEngine.Animations.AimConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindUpVectorLerp(obj, Bindings2._scope, speed, func);
        public static void BindUpVectorTowards(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.upVector = Vector3.MoveTowards(obj.upVector, property.Value, speed * Time.smoothDeltaTime));
        public static void BindUpVectorTowards(this UnityEngine.Animations.AimConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindUpVectorTowards(obj, Bindings2._scope, speed, property);
        public static void BindUpVectorTowards(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.upVector = Vector3.MoveTowards(obj.upVector, func(), speed * Time.smoothDeltaTime));
        public static void BindUpVectorTowards(this UnityEngine.Animations.AimConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindUpVectorTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateUpVector(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.upVector = Vector3.Lerp(start, end, t));
        public static void AnimateUpVector(this UnityEngine.Animations.AimConstraint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateUpVector(obj, Bindings2._scope, start, end, curve);
        public static void AnimateUpVector(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateUpVector(obj, Bindings2._scope, obj.upVector, end, curve);
        public static void AnimateUpVector(this UnityEngine.Animations.AimConstraint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateUpVector(obj, Bindings2._scope, end, curve);
        public static void BindWorldUpType(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Animations.AimConstraint.WorldUpType> property)
            => bindings.Bind(property, v => obj.worldUpType = v);
        public static void BindWorldUpType(this UnityEngine.Animations.AimConstraint obj, IProperty<UnityEngine.Animations.AimConstraint.WorldUpType> property)
            => BindWorldUpType(obj, Bindings2._scope, property);
        public static void BindWorldUpType(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, Func<UnityEngine.Animations.AimConstraint.WorldUpType> func)
            => bindings.BindUpdate(() => obj.worldUpType = func());
        public static void BindWorldUpType(this UnityEngine.Animations.AimConstraint obj, Func<UnityEngine.Animations.AimConstraint.WorldUpType> func)
            => BindWorldUpType(obj, Bindings2._scope, func);
        public static void BindWorldUpTypeInterval(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Animations.AimConstraint.WorldUpType> func)
            => bindings.BindInterval(seconds, () => obj.worldUpType = func());
        public static void BindWorldUpTypeInterval(this UnityEngine.Animations.AimConstraint obj, float seconds, Func<UnityEngine.Animations.AimConstraint.WorldUpType> func)
            => BindWorldUpTypeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWorldUpVector(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.worldUpVector = v);
        public static void BindWorldUpVector(this UnityEngine.Animations.AimConstraint obj, IProperty<UnityEngine.Vector3> property)
            => BindWorldUpVector(obj, Bindings2._scope, property);
        public static void BindWorldUpVector(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.worldUpVector = func());
        public static void BindWorldUpVector(this UnityEngine.Animations.AimConstraint obj, Func<UnityEngine.Vector3> func)
            => BindWorldUpVector(obj, Bindings2._scope, func);
        public static void BindWorldUpVectorInterval(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.worldUpVector = func());
        public static void BindWorldUpVectorInterval(this UnityEngine.Animations.AimConstraint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindWorldUpVectorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWorldUpVectorLerp(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.worldUpVector = Vector3.Lerp(obj.worldUpVector, property.Value, speed * Time.smoothDeltaTime));
        public static void BindWorldUpVectorLerp(this UnityEngine.Animations.AimConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindWorldUpVectorLerp(obj, Bindings2._scope, speed, property);
        public static void BindWorldUpVectorLerp(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.worldUpVector = Vector3.Lerp(obj.worldUpVector, func(), speed * Time.smoothDeltaTime));
        public static void BindWorldUpVectorLerp(this UnityEngine.Animations.AimConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindWorldUpVectorLerp(obj, Bindings2._scope, speed, func);
        public static void BindWorldUpVectorTowards(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.worldUpVector = Vector3.MoveTowards(obj.worldUpVector, property.Value, speed * Time.smoothDeltaTime));
        public static void BindWorldUpVectorTowards(this UnityEngine.Animations.AimConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindWorldUpVectorTowards(obj, Bindings2._scope, speed, property);
        public static void BindWorldUpVectorTowards(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.worldUpVector = Vector3.MoveTowards(obj.worldUpVector, func(), speed * Time.smoothDeltaTime));
        public static void BindWorldUpVectorTowards(this UnityEngine.Animations.AimConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindWorldUpVectorTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateWorldUpVector(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.worldUpVector = Vector3.Lerp(start, end, t));
        public static void AnimateWorldUpVector(this UnityEngine.Animations.AimConstraint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateWorldUpVector(obj, Bindings2._scope, start, end, curve);
        public static void AnimateWorldUpVector(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateWorldUpVector(obj, Bindings2._scope, obj.worldUpVector, end, curve);
        public static void AnimateWorldUpVector(this UnityEngine.Animations.AimConstraint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateWorldUpVector(obj, Bindings2._scope, end, curve);
        public static void BindWorldUpObject(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Transform> property)
            => bindings.Bind(property, v => obj.worldUpObject = v);
        public static void BindWorldUpObject(this UnityEngine.Animations.AimConstraint obj, IProperty<UnityEngine.Transform> property)
            => BindWorldUpObject(obj, Bindings2._scope, property);
        public static void BindWorldUpObject(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, Func<UnityEngine.Transform> func)
            => bindings.BindUpdate(() => obj.worldUpObject = func());
        public static void BindWorldUpObject(this UnityEngine.Animations.AimConstraint obj, Func<UnityEngine.Transform> func)
            => BindWorldUpObject(obj, Bindings2._scope, func);
        public static void BindWorldUpObjectInterval(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Transform> func)
            => bindings.BindInterval(seconds, () => obj.worldUpObject = func());
        public static void BindWorldUpObjectInterval(this UnityEngine.Animations.AimConstraint obj, float seconds, Func<UnityEngine.Transform> func)
            => BindWorldUpObjectInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLocked(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.locked = v);
        public static void BindLocked(this UnityEngine.Animations.AimConstraint obj, IProperty<System.Boolean> property)
            => BindLocked(obj, Bindings2._scope, property);
        public static void BindLocked(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.locked = func());
        public static void BindLocked(this UnityEngine.Animations.AimConstraint obj, Func<System.Boolean> func)
            => BindLocked(obj, Bindings2._scope, func);
        public static void BindLockedInterval(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.locked = func());
        public static void BindLockedInterval(this UnityEngine.Animations.AimConstraint obj, float seconds, Func<System.Boolean> func)
            => BindLockedInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRotationAtRest(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.rotationAtRest = v);
        public static void BindRotationAtRest(this UnityEngine.Animations.AimConstraint obj, IProperty<UnityEngine.Vector3> property)
            => BindRotationAtRest(obj, Bindings2._scope, property);
        public static void BindRotationAtRest(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationAtRest = func());
        public static void BindRotationAtRest(this UnityEngine.Animations.AimConstraint obj, Func<UnityEngine.Vector3> func)
            => BindRotationAtRest(obj, Bindings2._scope, func);
        public static void BindRotationAtRestInterval(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.rotationAtRest = func());
        public static void BindRotationAtRestInterval(this UnityEngine.Animations.AimConstraint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindRotationAtRestInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRotationAtRestLerp(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.rotationAtRest = Vector3.Lerp(obj.rotationAtRest, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRotationAtRestLerp(this UnityEngine.Animations.AimConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRotationAtRestLerp(obj, Bindings2._scope, speed, property);
        public static void BindRotationAtRestLerp(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationAtRest = Vector3.Lerp(obj.rotationAtRest, func(), speed * Time.smoothDeltaTime));
        public static void BindRotationAtRestLerp(this UnityEngine.Animations.AimConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRotationAtRestLerp(obj, Bindings2._scope, speed, func);
        public static void BindRotationAtRestTowards(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.rotationAtRest = Vector3.MoveTowards(obj.rotationAtRest, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRotationAtRestTowards(this UnityEngine.Animations.AimConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRotationAtRestTowards(obj, Bindings2._scope, speed, property);
        public static void BindRotationAtRestTowards(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationAtRest = Vector3.MoveTowards(obj.rotationAtRest, func(), speed * Time.smoothDeltaTime));
        public static void BindRotationAtRestTowards(this UnityEngine.Animations.AimConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRotationAtRestTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateRotationAtRest(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.rotationAtRest = Vector3.Lerp(start, end, t));
        public static void AnimateRotationAtRest(this UnityEngine.Animations.AimConstraint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationAtRest(obj, Bindings2._scope, start, end, curve);
        public static void AnimateRotationAtRest(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationAtRest(obj, Bindings2._scope, obj.rotationAtRest, end, curve);
        public static void AnimateRotationAtRest(this UnityEngine.Animations.AimConstraint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationAtRest(obj, Bindings2._scope, end, curve);
        public static void BindRotationOffset(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.rotationOffset = v);
        public static void BindRotationOffset(this UnityEngine.Animations.AimConstraint obj, IProperty<UnityEngine.Vector3> property)
            => BindRotationOffset(obj, Bindings2._scope, property);
        public static void BindRotationOffset(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationOffset = func());
        public static void BindRotationOffset(this UnityEngine.Animations.AimConstraint obj, Func<UnityEngine.Vector3> func)
            => BindRotationOffset(obj, Bindings2._scope, func);
        public static void BindRotationOffsetInterval(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.rotationOffset = func());
        public static void BindRotationOffsetInterval(this UnityEngine.Animations.AimConstraint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindRotationOffsetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRotationOffsetLerp(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.rotationOffset = Vector3.Lerp(obj.rotationOffset, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRotationOffsetLerp(this UnityEngine.Animations.AimConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRotationOffsetLerp(obj, Bindings2._scope, speed, property);
        public static void BindRotationOffsetLerp(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationOffset = Vector3.Lerp(obj.rotationOffset, func(), speed * Time.smoothDeltaTime));
        public static void BindRotationOffsetLerp(this UnityEngine.Animations.AimConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRotationOffsetLerp(obj, Bindings2._scope, speed, func);
        public static void BindRotationOffsetTowards(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.rotationOffset = Vector3.MoveTowards(obj.rotationOffset, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRotationOffsetTowards(this UnityEngine.Animations.AimConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRotationOffsetTowards(obj, Bindings2._scope, speed, property);
        public static void BindRotationOffsetTowards(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationOffset = Vector3.MoveTowards(obj.rotationOffset, func(), speed * Time.smoothDeltaTime));
        public static void BindRotationOffsetTowards(this UnityEngine.Animations.AimConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRotationOffsetTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateRotationOffset(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.rotationOffset = Vector3.Lerp(start, end, t));
        public static void AnimateRotationOffset(this UnityEngine.Animations.AimConstraint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationOffset(obj, Bindings2._scope, start, end, curve);
        public static void AnimateRotationOffset(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationOffset(obj, Bindings2._scope, obj.rotationOffset, end, curve);
        public static void AnimateRotationOffset(this UnityEngine.Animations.AimConstraint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationOffset(obj, Bindings2._scope, end, curve);
        public static void BindRotationAxis(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Animations.Axis> property)
            => bindings.Bind(property, v => obj.rotationAxis = v);
        public static void BindRotationAxis(this UnityEngine.Animations.AimConstraint obj, IProperty<UnityEngine.Animations.Axis> property)
            => BindRotationAxis(obj, Bindings2._scope, property);
        public static void BindRotationAxis(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, Func<UnityEngine.Animations.Axis> func)
            => bindings.BindUpdate(() => obj.rotationAxis = func());
        public static void BindRotationAxis(this UnityEngine.Animations.AimConstraint obj, Func<UnityEngine.Animations.Axis> func)
            => BindRotationAxis(obj, Bindings2._scope, func);
        public static void BindRotationAxisInterval(this UnityEngine.Animations.AimConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Animations.Axis> func)
            => bindings.BindInterval(seconds, () => obj.rotationAxis = func());
        public static void BindRotationAxisInterval(this UnityEngine.Animations.AimConstraint obj, float seconds, Func<UnityEngine.Animations.Axis> func)
            => BindRotationAxisInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_ANIMATION
        public static void BindClip(this Animation obj, Bindings2 bindings, IProperty<UnityEngine.AnimationClip> property)
            => bindings.Bind(property, v => obj.clip = v);
        public static void BindClip(this Animation obj, IProperty<UnityEngine.AnimationClip> property)
            => BindClip(obj, Bindings2._scope, property);
        public static void BindClip(this Animation obj, Bindings2 bindings, Func<UnityEngine.AnimationClip> func)
            => bindings.BindUpdate(() => obj.clip = func());
        public static void BindClip(this Animation obj, Func<UnityEngine.AnimationClip> func)
            => BindClip(obj, Bindings2._scope, func);
        public static void BindClipInterval(this Animation obj, Bindings2 bindings, float seconds, Func<UnityEngine.AnimationClip> func)
            => bindings.BindInterval(seconds, () => obj.clip = func());
        public static void BindClipInterval(this Animation obj, float seconds, Func<UnityEngine.AnimationClip> func)
            => BindClipInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPlayAutomatically(this Animation obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.playAutomatically = v);
        public static void BindPlayAutomatically(this Animation obj, IProperty<System.Boolean> property)
            => BindPlayAutomatically(obj, Bindings2._scope, property);
        public static void BindPlayAutomatically(this Animation obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.playAutomatically = func());
        public static void BindPlayAutomatically(this Animation obj, Func<System.Boolean> func)
            => BindPlayAutomatically(obj, Bindings2._scope, func);
        public static void BindPlayAutomaticallyInterval(this Animation obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.playAutomatically = func());
        public static void BindPlayAutomaticallyInterval(this Animation obj, float seconds, Func<System.Boolean> func)
            => BindPlayAutomaticallyInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAnimatePhysics(this Animation obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.animatePhysics = v);
        public static void BindAnimatePhysics(this Animation obj, IProperty<System.Boolean> property)
            => BindAnimatePhysics(obj, Bindings2._scope, property);
        public static void BindAnimatePhysics(this Animation obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.animatePhysics = func());
        public static void BindAnimatePhysics(this Animation obj, Func<System.Boolean> func)
            => BindAnimatePhysics(obj, Bindings2._scope, func);
        public static void BindAnimatePhysicsInterval(this Animation obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.animatePhysics = func());
        public static void BindAnimatePhysicsInterval(this Animation obj, float seconds, Func<System.Boolean> func)
            => BindAnimatePhysicsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCullingType(this Animation obj, Bindings2 bindings, IProperty<UnityEngine.AnimationCullingType> property)
            => bindings.Bind(property, v => obj.cullingType = v);
        public static void BindCullingType(this Animation obj, IProperty<UnityEngine.AnimationCullingType> property)
            => BindCullingType(obj, Bindings2._scope, property);
        public static void BindCullingType(this Animation obj, Bindings2 bindings, Func<UnityEngine.AnimationCullingType> func)
            => bindings.BindUpdate(() => obj.cullingType = func());
        public static void BindCullingType(this Animation obj, Func<UnityEngine.AnimationCullingType> func)
            => BindCullingType(obj, Bindings2._scope, func);
        public static void BindCullingTypeInterval(this Animation obj, Bindings2 bindings, float seconds, Func<UnityEngine.AnimationCullingType> func)
            => bindings.BindInterval(seconds, () => obj.cullingType = func());
        public static void BindCullingTypeInterval(this Animation obj, float seconds, Func<UnityEngine.AnimationCullingType> func)
            => BindCullingTypeInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_ANIMATION
        public static void BindRuntimeAnimatorController(this Animator obj, Bindings2 bindings, IProperty<UnityEngine.RuntimeAnimatorController> property)
            => bindings.Bind(property, v => obj.runtimeAnimatorController = v);
        public static void BindRuntimeAnimatorController(this Animator obj, IProperty<UnityEngine.RuntimeAnimatorController> property)
            => BindRuntimeAnimatorController(obj, Bindings2._scope, property);
        public static void BindRuntimeAnimatorController(this Animator obj, Bindings2 bindings, Func<UnityEngine.RuntimeAnimatorController> func)
            => bindings.BindUpdate(() => obj.runtimeAnimatorController = func());
        public static void BindRuntimeAnimatorController(this Animator obj, Func<UnityEngine.RuntimeAnimatorController> func)
            => BindRuntimeAnimatorController(obj, Bindings2._scope, func);
        public static void BindRuntimeAnimatorControllerInterval(this Animator obj, Bindings2 bindings, float seconds, Func<UnityEngine.RuntimeAnimatorController> func)
            => bindings.BindInterval(seconds, () => obj.runtimeAnimatorController = func());
        public static void BindRuntimeAnimatorControllerInterval(this Animator obj, float seconds, Func<UnityEngine.RuntimeAnimatorController> func)
            => BindRuntimeAnimatorControllerInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAvatar(this Animator obj, Bindings2 bindings, IProperty<UnityEngine.Avatar> property)
            => bindings.Bind(property, v => obj.avatar = v);
        public static void BindAvatar(this Animator obj, IProperty<UnityEngine.Avatar> property)
            => BindAvatar(obj, Bindings2._scope, property);
        public static void BindAvatar(this Animator obj, Bindings2 bindings, Func<UnityEngine.Avatar> func)
            => bindings.BindUpdate(() => obj.avatar = func());
        public static void BindAvatar(this Animator obj, Func<UnityEngine.Avatar> func)
            => BindAvatar(obj, Bindings2._scope, func);
        public static void BindAvatarInterval(this Animator obj, Bindings2 bindings, float seconds, Func<UnityEngine.Avatar> func)
            => bindings.BindInterval(seconds, () => obj.avatar = func());
        public static void BindAvatarInterval(this Animator obj, float seconds, Func<UnityEngine.Avatar> func)
            => BindAvatarInterval(obj, Bindings2._scope, seconds, func);
        public static void BindApplyRootMotion(this Animator obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.applyRootMotion = v);
        public static void BindApplyRootMotion(this Animator obj, IProperty<System.Boolean> property)
            => BindApplyRootMotion(obj, Bindings2._scope, property);
        public static void BindApplyRootMotion(this Animator obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.applyRootMotion = func());
        public static void BindApplyRootMotion(this Animator obj, Func<System.Boolean> func)
            => BindApplyRootMotion(obj, Bindings2._scope, func);
        public static void BindApplyRootMotionInterval(this Animator obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.applyRootMotion = func());
        public static void BindApplyRootMotionInterval(this Animator obj, float seconds, Func<System.Boolean> func)
            => BindApplyRootMotionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUpdateMode(this Animator obj, Bindings2 bindings, IProperty<UnityEngine.AnimatorUpdateMode> property)
            => bindings.Bind(property, v => obj.updateMode = v);
        public static void BindUpdateMode(this Animator obj, IProperty<UnityEngine.AnimatorUpdateMode> property)
            => BindUpdateMode(obj, Bindings2._scope, property);
        public static void BindUpdateMode(this Animator obj, Bindings2 bindings, Func<UnityEngine.AnimatorUpdateMode> func)
            => bindings.BindUpdate(() => obj.updateMode = func());
        public static void BindUpdateMode(this Animator obj, Func<UnityEngine.AnimatorUpdateMode> func)
            => BindUpdateMode(obj, Bindings2._scope, func);
        public static void BindUpdateModeInterval(this Animator obj, Bindings2 bindings, float seconds, Func<UnityEngine.AnimatorUpdateMode> func)
            => bindings.BindInterval(seconds, () => obj.updateMode = func());
        public static void BindUpdateModeInterval(this Animator obj, float seconds, Func<UnityEngine.AnimatorUpdateMode> func)
            => BindUpdateModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCullingMode(this Animator obj, Bindings2 bindings, IProperty<UnityEngine.AnimatorCullingMode> property)
            => bindings.Bind(property, v => obj.cullingMode = v);
        public static void BindCullingMode(this Animator obj, IProperty<UnityEngine.AnimatorCullingMode> property)
            => BindCullingMode(obj, Bindings2._scope, property);
        public static void BindCullingMode(this Animator obj, Bindings2 bindings, Func<UnityEngine.AnimatorCullingMode> func)
            => bindings.BindUpdate(() => obj.cullingMode = func());
        public static void BindCullingMode(this Animator obj, Func<UnityEngine.AnimatorCullingMode> func)
            => BindCullingMode(obj, Bindings2._scope, func);
        public static void BindCullingModeInterval(this Animator obj, Bindings2 bindings, float seconds, Func<UnityEngine.AnimatorCullingMode> func)
            => bindings.BindInterval(seconds, () => obj.cullingMode = func());
        public static void BindCullingModeInterval(this Animator obj, float seconds, Func<UnityEngine.AnimatorCullingMode> func)
            => BindCullingModeInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindUseColliderMask(this AreaEffector2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useColliderMask = v);
        public static void BindUseColliderMask(this AreaEffector2D obj, IProperty<System.Boolean> property)
            => BindUseColliderMask(obj, Bindings2._scope, property);
        public static void BindUseColliderMask(this AreaEffector2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useColliderMask = func());
        public static void BindUseColliderMask(this AreaEffector2D obj, Func<System.Boolean> func)
            => BindUseColliderMask(obj, Bindings2._scope, func);
        public static void BindUseColliderMaskInterval(this AreaEffector2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useColliderMask = func());
        public static void BindUseColliderMaskInterval(this AreaEffector2D obj, float seconds, Func<System.Boolean> func)
            => BindUseColliderMaskInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColliderMask(this AreaEffector2D obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.colliderMask = v);
        public static void BindColliderMask(this AreaEffector2D obj, IProperty<System.Int32> property)
            => BindColliderMask(obj, Bindings2._scope, property);
        public static void BindColliderMask(this AreaEffector2D obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.colliderMask = func());
        public static void BindColliderMask(this AreaEffector2D obj, Func<System.Int32> func)
            => BindColliderMask(obj, Bindings2._scope, func);
        public static void BindColliderMaskInterval(this AreaEffector2D obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.colliderMask = func());
        public static void BindColliderMaskInterval(this AreaEffector2D obj, float seconds, Func<System.Int32> func)
            => BindColliderMaskInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseGlobalAngle(this AreaEffector2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useGlobalAngle = v);
        public static void BindUseGlobalAngle(this AreaEffector2D obj, IProperty<System.Boolean> property)
            => BindUseGlobalAngle(obj, Bindings2._scope, property);
        public static void BindUseGlobalAngle(this AreaEffector2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useGlobalAngle = func());
        public static void BindUseGlobalAngle(this AreaEffector2D obj, Func<System.Boolean> func)
            => BindUseGlobalAngle(obj, Bindings2._scope, func);
        public static void BindUseGlobalAngleInterval(this AreaEffector2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useGlobalAngle = func());
        public static void BindUseGlobalAngleInterval(this AreaEffector2D obj, float seconds, Func<System.Boolean> func)
            => BindUseGlobalAngleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindForceAngle(this AreaEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.forceAngle = v);
        public static void BindForceAngle(this AreaEffector2D obj, IProperty<System.Single> property)
            => BindForceAngle(obj, Bindings2._scope, property);
        public static void BindForceAngle(this AreaEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.forceAngle = func());
        public static void BindForceAngle(this AreaEffector2D obj, Func<System.Single> func)
            => BindForceAngle(obj, Bindings2._scope, func);
        public static void BindForceAngleInterval(this AreaEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.forceAngle = func());
        public static void BindForceAngleInterval(this AreaEffector2D obj, float seconds, Func<System.Single> func)
            => BindForceAngleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindForceMagnitude(this AreaEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.forceMagnitude = v);
        public static void BindForceMagnitude(this AreaEffector2D obj, IProperty<System.Single> property)
            => BindForceMagnitude(obj, Bindings2._scope, property);
        public static void BindForceMagnitude(this AreaEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.forceMagnitude = func());
        public static void BindForceMagnitude(this AreaEffector2D obj, Func<System.Single> func)
            => BindForceMagnitude(obj, Bindings2._scope, func);
        public static void BindForceMagnitudeInterval(this AreaEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.forceMagnitude = func());
        public static void BindForceMagnitudeInterval(this AreaEffector2D obj, float seconds, Func<System.Single> func)
            => BindForceMagnitudeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindForceVariation(this AreaEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.forceVariation = v);
        public static void BindForceVariation(this AreaEffector2D obj, IProperty<System.Single> property)
            => BindForceVariation(obj, Bindings2._scope, property);
        public static void BindForceVariation(this AreaEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.forceVariation = func());
        public static void BindForceVariation(this AreaEffector2D obj, Func<System.Single> func)
            => BindForceVariation(obj, Bindings2._scope, func);
        public static void BindForceVariationInterval(this AreaEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.forceVariation = func());
        public static void BindForceVariationInterval(this AreaEffector2D obj, float seconds, Func<System.Single> func)
            => BindForceVariationInterval(obj, Bindings2._scope, seconds, func);
        public static void BindForceTarget(this AreaEffector2D obj, Bindings2 bindings, IProperty<UnityEngine.EffectorSelection2D> property)
            => bindings.Bind(property, v => obj.forceTarget = v);
        public static void BindForceTarget(this AreaEffector2D obj, IProperty<UnityEngine.EffectorSelection2D> property)
            => BindForceTarget(obj, Bindings2._scope, property);
        public static void BindForceTarget(this AreaEffector2D obj, Bindings2 bindings, Func<UnityEngine.EffectorSelection2D> func)
            => bindings.BindUpdate(() => obj.forceTarget = func());
        public static void BindForceTarget(this AreaEffector2D obj, Func<UnityEngine.EffectorSelection2D> func)
            => BindForceTarget(obj, Bindings2._scope, func);
        public static void BindForceTargetInterval(this AreaEffector2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.EffectorSelection2D> func)
            => bindings.BindInterval(seconds, () => obj.forceTarget = func());
        public static void BindForceTargetInterval(this AreaEffector2D obj, float seconds, Func<UnityEngine.EffectorSelection2D> func)
            => BindForceTargetInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_6000_1_OR_NEWER
        public static void BindDrag(this AreaEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.drag = v);
        public static void BindDrag(this AreaEffector2D obj, IProperty<System.Single> property)
            => BindDrag(obj, Bindings2._scope, property);
        public static void BindDrag(this AreaEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.drag = func());
        public static void BindDrag(this AreaEffector2D obj, Func<System.Single> func)
            => BindDrag(obj, Bindings2._scope, func);
        public static void BindDragInterval(this AreaEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.drag = func());
        public static void BindDragInterval(this AreaEffector2D obj, float seconds, Func<System.Single> func)
            => BindDragInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if !UNITY_6000_1_OR_NEWER
        public static void BindAngularDrag(this AreaEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.angularDrag = v);
        public static void BindAngularDrag(this AreaEffector2D obj, IProperty<System.Single> property)
            => BindAngularDrag(obj, Bindings2._scope, property);
        public static void BindAngularDrag(this AreaEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.angularDrag = func());
        public static void BindAngularDrag(this AreaEffector2D obj, Func<System.Single> func)
            => BindAngularDrag(obj, Bindings2._scope, func);
        public static void BindAngularDragInterval(this AreaEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.angularDrag = func());
        public static void BindAngularDragInterval(this AreaEffector2D obj, float seconds, Func<System.Single> func)
            => BindAngularDragInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #endif


        #if UNITY_2020_3_OR_NEWER&&UNITY_PHYSICS
        public static void BindMass(this ArticulationBody obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.mass = v);
        public static void BindMass(this ArticulationBody obj, IProperty<System.Single> property)
            => BindMass(obj, Bindings2._scope, property);
        public static void BindMass(this ArticulationBody obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.mass = func());
        public static void BindMass(this ArticulationBody obj, Func<System.Single> func)
            => BindMass(obj, Bindings2._scope, func);
        public static void BindMassInterval(this ArticulationBody obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.mass = func());
        public static void BindMassInterval(this ArticulationBody obj, float seconds, Func<System.Single> func)
            => BindMassInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseGravity(this ArticulationBody obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useGravity = v);
        public static void BindUseGravity(this ArticulationBody obj, IProperty<System.Boolean> property)
            => BindUseGravity(obj, Bindings2._scope, property);
        public static void BindUseGravity(this ArticulationBody obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useGravity = func());
        public static void BindUseGravity(this ArticulationBody obj, Func<System.Boolean> func)
            => BindUseGravity(obj, Bindings2._scope, func);
        public static void BindUseGravityInterval(this ArticulationBody obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useGravity = func());
        public static void BindUseGravityInterval(this ArticulationBody obj, float seconds, Func<System.Boolean> func)
            => BindUseGravityInterval(obj, Bindings2._scope, seconds, func);
        public static void BindImmovable(this ArticulationBody obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.immovable = v);
        public static void BindImmovable(this ArticulationBody obj, IProperty<System.Boolean> property)
            => BindImmovable(obj, Bindings2._scope, property);
        public static void BindImmovable(this ArticulationBody obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.immovable = func());
        public static void BindImmovable(this ArticulationBody obj, Func<System.Boolean> func)
            => BindImmovable(obj, Bindings2._scope, func);
        public static void BindImmovableInterval(this ArticulationBody obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.immovable = func());
        public static void BindImmovableInterval(this ArticulationBody obj, float seconds, Func<System.Boolean> func)
            => BindImmovableInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLinearDamping(this ArticulationBody obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.linearDamping = v);
        public static void BindLinearDamping(this ArticulationBody obj, IProperty<System.Single> property)
            => BindLinearDamping(obj, Bindings2._scope, property);
        public static void BindLinearDamping(this ArticulationBody obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.linearDamping = func());
        public static void BindLinearDamping(this ArticulationBody obj, Func<System.Single> func)
            => BindLinearDamping(obj, Bindings2._scope, func);
        public static void BindLinearDampingInterval(this ArticulationBody obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.linearDamping = func());
        public static void BindLinearDampingInterval(this ArticulationBody obj, float seconds, Func<System.Single> func)
            => BindLinearDampingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAngularDamping(this ArticulationBody obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.angularDamping = v);
        public static void BindAngularDamping(this ArticulationBody obj, IProperty<System.Single> property)
            => BindAngularDamping(obj, Bindings2._scope, property);
        public static void BindAngularDamping(this ArticulationBody obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.angularDamping = func());
        public static void BindAngularDamping(this ArticulationBody obj, Func<System.Single> func)
            => BindAngularDamping(obj, Bindings2._scope, func);
        public static void BindAngularDampingInterval(this ArticulationBody obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.angularDamping = func());
        public static void BindAngularDampingInterval(this ArticulationBody obj, float seconds, Func<System.Single> func)
            => BindAngularDampingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCollisionDetectionMode(this ArticulationBody obj, Bindings2 bindings, IProperty<UnityEngine.CollisionDetectionMode> property)
            => bindings.Bind(property, v => obj.collisionDetectionMode = v);
        public static void BindCollisionDetectionMode(this ArticulationBody obj, IProperty<UnityEngine.CollisionDetectionMode> property)
            => BindCollisionDetectionMode(obj, Bindings2._scope, property);
        public static void BindCollisionDetectionMode(this ArticulationBody obj, Bindings2 bindings, Func<UnityEngine.CollisionDetectionMode> func)
            => bindings.BindUpdate(() => obj.collisionDetectionMode = func());
        public static void BindCollisionDetectionMode(this ArticulationBody obj, Func<UnityEngine.CollisionDetectionMode> func)
            => BindCollisionDetectionMode(obj, Bindings2._scope, func);
        public static void BindCollisionDetectionModeInterval(this ArticulationBody obj, Bindings2 bindings, float seconds, Func<UnityEngine.CollisionDetectionMode> func)
            => bindings.BindInterval(seconds, () => obj.collisionDetectionMode = func());
        public static void BindCollisionDetectionModeInterval(this ArticulationBody obj, float seconds, Func<UnityEngine.CollisionDetectionMode> func)
            => BindCollisionDetectionModeInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_AUDIO
        public static void BindDryMix(this AudioChorusFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.dryMix = v);
        public static void BindDryMix(this AudioChorusFilter obj, IProperty<System.Single> property)
            => BindDryMix(obj, Bindings2._scope, property);
        public static void BindDryMix(this AudioChorusFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.dryMix = func());
        public static void BindDryMix(this AudioChorusFilter obj, Func<System.Single> func)
            => BindDryMix(obj, Bindings2._scope, func);
        public static void BindDryMixInterval(this AudioChorusFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.dryMix = func());
        public static void BindDryMixInterval(this AudioChorusFilter obj, float seconds, Func<System.Single> func)
            => BindDryMixInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWetMix1(this AudioChorusFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.wetMix1 = v);
        public static void BindWetMix1(this AudioChorusFilter obj, IProperty<System.Single> property)
            => BindWetMix1(obj, Bindings2._scope, property);
        public static void BindWetMix1(this AudioChorusFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.wetMix1 = func());
        public static void BindWetMix1(this AudioChorusFilter obj, Func<System.Single> func)
            => BindWetMix1(obj, Bindings2._scope, func);
        public static void BindWetMix1Interval(this AudioChorusFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.wetMix1 = func());
        public static void BindWetMix1Interval(this AudioChorusFilter obj, float seconds, Func<System.Single> func)
            => BindWetMix1Interval(obj, Bindings2._scope, seconds, func);
        public static void BindWetMix2(this AudioChorusFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.wetMix2 = v);
        public static void BindWetMix2(this AudioChorusFilter obj, IProperty<System.Single> property)
            => BindWetMix2(obj, Bindings2._scope, property);
        public static void BindWetMix2(this AudioChorusFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.wetMix2 = func());
        public static void BindWetMix2(this AudioChorusFilter obj, Func<System.Single> func)
            => BindWetMix2(obj, Bindings2._scope, func);
        public static void BindWetMix2Interval(this AudioChorusFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.wetMix2 = func());
        public static void BindWetMix2Interval(this AudioChorusFilter obj, float seconds, Func<System.Single> func)
            => BindWetMix2Interval(obj, Bindings2._scope, seconds, func);
        public static void BindWetMix3(this AudioChorusFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.wetMix3 = v);
        public static void BindWetMix3(this AudioChorusFilter obj, IProperty<System.Single> property)
            => BindWetMix3(obj, Bindings2._scope, property);
        public static void BindWetMix3(this AudioChorusFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.wetMix3 = func());
        public static void BindWetMix3(this AudioChorusFilter obj, Func<System.Single> func)
            => BindWetMix3(obj, Bindings2._scope, func);
        public static void BindWetMix3Interval(this AudioChorusFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.wetMix3 = func());
        public static void BindWetMix3Interval(this AudioChorusFilter obj, float seconds, Func<System.Single> func)
            => BindWetMix3Interval(obj, Bindings2._scope, seconds, func);
        public static void BindDelay(this AudioChorusFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.delay = v);
        public static void BindDelay(this AudioChorusFilter obj, IProperty<System.Single> property)
            => BindDelay(obj, Bindings2._scope, property);
        public static void BindDelay(this AudioChorusFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.delay = func());
        public static void BindDelay(this AudioChorusFilter obj, Func<System.Single> func)
            => BindDelay(obj, Bindings2._scope, func);
        public static void BindDelayInterval(this AudioChorusFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.delay = func());
        public static void BindDelayInterval(this AudioChorusFilter obj, float seconds, Func<System.Single> func)
            => BindDelayInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRate(this AudioChorusFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.rate = v);
        public static void BindRate(this AudioChorusFilter obj, IProperty<System.Single> property)
            => BindRate(obj, Bindings2._scope, property);
        public static void BindRate(this AudioChorusFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.rate = func());
        public static void BindRate(this AudioChorusFilter obj, Func<System.Single> func)
            => BindRate(obj, Bindings2._scope, func);
        public static void BindRateInterval(this AudioChorusFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.rate = func());
        public static void BindRateInterval(this AudioChorusFilter obj, float seconds, Func<System.Single> func)
            => BindRateInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDepth(this AudioChorusFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.depth = v);
        public static void BindDepth(this AudioChorusFilter obj, IProperty<System.Single> property)
            => BindDepth(obj, Bindings2._scope, property);
        public static void BindDepth(this AudioChorusFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.depth = func());
        public static void BindDepth(this AudioChorusFilter obj, Func<System.Single> func)
            => BindDepth(obj, Bindings2._scope, func);
        public static void BindDepthInterval(this AudioChorusFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.depth = func());
        public static void BindDepthInterval(this AudioChorusFilter obj, float seconds, Func<System.Single> func)
            => BindDepthInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_AUDIO
        public static void BindDistortionLevel(this AudioDistortionFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.distortionLevel = v);
        public static void BindDistortionLevel(this AudioDistortionFilter obj, IProperty<System.Single> property)
            => BindDistortionLevel(obj, Bindings2._scope, property);
        public static void BindDistortionLevel(this AudioDistortionFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.distortionLevel = func());
        public static void BindDistortionLevel(this AudioDistortionFilter obj, Func<System.Single> func)
            => BindDistortionLevel(obj, Bindings2._scope, func);
        public static void BindDistortionLevelInterval(this AudioDistortionFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.distortionLevel = func());
        public static void BindDistortionLevelInterval(this AudioDistortionFilter obj, float seconds, Func<System.Single> func)
            => BindDistortionLevelInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_AUDIO
        public static void BindDelay(this AudioEchoFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.delay = v);
        public static void BindDelay(this AudioEchoFilter obj, IProperty<System.Single> property)
            => BindDelay(obj, Bindings2._scope, property);
        public static void BindDelay(this AudioEchoFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.delay = func());
        public static void BindDelay(this AudioEchoFilter obj, Func<System.Single> func)
            => BindDelay(obj, Bindings2._scope, func);
        public static void BindDelayInterval(this AudioEchoFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.delay = func());
        public static void BindDelayInterval(this AudioEchoFilter obj, float seconds, Func<System.Single> func)
            => BindDelayInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDecayRatio(this AudioEchoFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.decayRatio = v);
        public static void BindDecayRatio(this AudioEchoFilter obj, IProperty<System.Single> property)
            => BindDecayRatio(obj, Bindings2._scope, property);
        public static void BindDecayRatio(this AudioEchoFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.decayRatio = func());
        public static void BindDecayRatio(this AudioEchoFilter obj, Func<System.Single> func)
            => BindDecayRatio(obj, Bindings2._scope, func);
        public static void BindDecayRatioInterval(this AudioEchoFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.decayRatio = func());
        public static void BindDecayRatioInterval(this AudioEchoFilter obj, float seconds, Func<System.Single> func)
            => BindDecayRatioInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDryMix(this AudioEchoFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.dryMix = v);
        public static void BindDryMix(this AudioEchoFilter obj, IProperty<System.Single> property)
            => BindDryMix(obj, Bindings2._scope, property);
        public static void BindDryMix(this AudioEchoFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.dryMix = func());
        public static void BindDryMix(this AudioEchoFilter obj, Func<System.Single> func)
            => BindDryMix(obj, Bindings2._scope, func);
        public static void BindDryMixInterval(this AudioEchoFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.dryMix = func());
        public static void BindDryMixInterval(this AudioEchoFilter obj, float seconds, Func<System.Single> func)
            => BindDryMixInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWetMix(this AudioEchoFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.wetMix = v);
        public static void BindWetMix(this AudioEchoFilter obj, IProperty<System.Single> property)
            => BindWetMix(obj, Bindings2._scope, property);
        public static void BindWetMix(this AudioEchoFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.wetMix = func());
        public static void BindWetMix(this AudioEchoFilter obj, Func<System.Single> func)
            => BindWetMix(obj, Bindings2._scope, func);
        public static void BindWetMixInterval(this AudioEchoFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.wetMix = func());
        public static void BindWetMixInterval(this AudioEchoFilter obj, float seconds, Func<System.Single> func)
            => BindWetMixInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_AUDIO
        public static void BindCutoffFrequency(this AudioHighPassFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.cutoffFrequency = v);
        public static void BindCutoffFrequency(this AudioHighPassFilter obj, IProperty<System.Single> property)
            => BindCutoffFrequency(obj, Bindings2._scope, property);
        public static void BindCutoffFrequency(this AudioHighPassFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.cutoffFrequency = func());
        public static void BindCutoffFrequency(this AudioHighPassFilter obj, Func<System.Single> func)
            => BindCutoffFrequency(obj, Bindings2._scope, func);
        public static void BindCutoffFrequencyInterval(this AudioHighPassFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.cutoffFrequency = func());
        public static void BindCutoffFrequencyInterval(this AudioHighPassFilter obj, float seconds, Func<System.Single> func)
            => BindCutoffFrequencyInterval(obj, Bindings2._scope, seconds, func);
        public static void BindHighpassResonanceQ(this AudioHighPassFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.highpassResonanceQ = v);
        public static void BindHighpassResonanceQ(this AudioHighPassFilter obj, IProperty<System.Single> property)
            => BindHighpassResonanceQ(obj, Bindings2._scope, property);
        public static void BindHighpassResonanceQ(this AudioHighPassFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.highpassResonanceQ = func());
        public static void BindHighpassResonanceQ(this AudioHighPassFilter obj, Func<System.Single> func)
            => BindHighpassResonanceQ(obj, Bindings2._scope, func);
        public static void BindHighpassResonanceQInterval(this AudioHighPassFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.highpassResonanceQ = func());
        public static void BindHighpassResonanceQInterval(this AudioHighPassFilter obj, float seconds, Func<System.Single> func)
            => BindHighpassResonanceQInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_AUDIO
        public static void BindCutoffFrequency(this AudioLowPassFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.cutoffFrequency = v);
        public static void BindCutoffFrequency(this AudioLowPassFilter obj, IProperty<System.Single> property)
            => BindCutoffFrequency(obj, Bindings2._scope, property);
        public static void BindCutoffFrequency(this AudioLowPassFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.cutoffFrequency = func());
        public static void BindCutoffFrequency(this AudioLowPassFilter obj, Func<System.Single> func)
            => BindCutoffFrequency(obj, Bindings2._scope, func);
        public static void BindCutoffFrequencyInterval(this AudioLowPassFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.cutoffFrequency = func());
        public static void BindCutoffFrequencyInterval(this AudioLowPassFilter obj, float seconds, Func<System.Single> func)
            => BindCutoffFrequencyInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLowpassResonanceQ(this AudioLowPassFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.lowpassResonanceQ = v);
        public static void BindLowpassResonanceQ(this AudioLowPassFilter obj, IProperty<System.Single> property)
            => BindLowpassResonanceQ(obj, Bindings2._scope, property);
        public static void BindLowpassResonanceQ(this AudioLowPassFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.lowpassResonanceQ = func());
        public static void BindLowpassResonanceQ(this AudioLowPassFilter obj, Func<System.Single> func)
            => BindLowpassResonanceQ(obj, Bindings2._scope, func);
        public static void BindLowpassResonanceQInterval(this AudioLowPassFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.lowpassResonanceQ = func());
        public static void BindLowpassResonanceQInterval(this AudioLowPassFilter obj, float seconds, Func<System.Single> func)
            => BindLowpassResonanceQInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_AUDIO
        public static void BindReverbPreset(this AudioReverbFilter obj, Bindings2 bindings, IProperty<UnityEngine.AudioReverbPreset> property)
            => bindings.Bind(property, v => obj.reverbPreset = v);
        public static void BindReverbPreset(this AudioReverbFilter obj, IProperty<UnityEngine.AudioReverbPreset> property)
            => BindReverbPreset(obj, Bindings2._scope, property);
        public static void BindReverbPreset(this AudioReverbFilter obj, Bindings2 bindings, Func<UnityEngine.AudioReverbPreset> func)
            => bindings.BindUpdate(() => obj.reverbPreset = func());
        public static void BindReverbPreset(this AudioReverbFilter obj, Func<UnityEngine.AudioReverbPreset> func)
            => BindReverbPreset(obj, Bindings2._scope, func);
        public static void BindReverbPresetInterval(this AudioReverbFilter obj, Bindings2 bindings, float seconds, Func<UnityEngine.AudioReverbPreset> func)
            => bindings.BindInterval(seconds, () => obj.reverbPreset = func());
        public static void BindReverbPresetInterval(this AudioReverbFilter obj, float seconds, Func<UnityEngine.AudioReverbPreset> func)
            => BindReverbPresetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDryLevel(this AudioReverbFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.dryLevel = v);
        public static void BindDryLevel(this AudioReverbFilter obj, IProperty<System.Single> property)
            => BindDryLevel(obj, Bindings2._scope, property);
        public static void BindDryLevel(this AudioReverbFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.dryLevel = func());
        public static void BindDryLevel(this AudioReverbFilter obj, Func<System.Single> func)
            => BindDryLevel(obj, Bindings2._scope, func);
        public static void BindDryLevelInterval(this AudioReverbFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.dryLevel = func());
        public static void BindDryLevelInterval(this AudioReverbFilter obj, float seconds, Func<System.Single> func)
            => BindDryLevelInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRoom(this AudioReverbFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.room = v);
        public static void BindRoom(this AudioReverbFilter obj, IProperty<System.Single> property)
            => BindRoom(obj, Bindings2._scope, property);
        public static void BindRoom(this AudioReverbFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.room = func());
        public static void BindRoom(this AudioReverbFilter obj, Func<System.Single> func)
            => BindRoom(obj, Bindings2._scope, func);
        public static void BindRoomInterval(this AudioReverbFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.room = func());
        public static void BindRoomInterval(this AudioReverbFilter obj, float seconds, Func<System.Single> func)
            => BindRoomInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRoomHF(this AudioReverbFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.roomHF = v);
        public static void BindRoomHF(this AudioReverbFilter obj, IProperty<System.Single> property)
            => BindRoomHF(obj, Bindings2._scope, property);
        public static void BindRoomHF(this AudioReverbFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.roomHF = func());
        public static void BindRoomHF(this AudioReverbFilter obj, Func<System.Single> func)
            => BindRoomHF(obj, Bindings2._scope, func);
        public static void BindRoomHFInterval(this AudioReverbFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.roomHF = func());
        public static void BindRoomHFInterval(this AudioReverbFilter obj, float seconds, Func<System.Single> func)
            => BindRoomHFInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRoomLF(this AudioReverbFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.roomLF = v);
        public static void BindRoomLF(this AudioReverbFilter obj, IProperty<System.Single> property)
            => BindRoomLF(obj, Bindings2._scope, property);
        public static void BindRoomLF(this AudioReverbFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.roomLF = func());
        public static void BindRoomLF(this AudioReverbFilter obj, Func<System.Single> func)
            => BindRoomLF(obj, Bindings2._scope, func);
        public static void BindRoomLFInterval(this AudioReverbFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.roomLF = func());
        public static void BindRoomLFInterval(this AudioReverbFilter obj, float seconds, Func<System.Single> func)
            => BindRoomLFInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDecayTime(this AudioReverbFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.decayTime = v);
        public static void BindDecayTime(this AudioReverbFilter obj, IProperty<System.Single> property)
            => BindDecayTime(obj, Bindings2._scope, property);
        public static void BindDecayTime(this AudioReverbFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.decayTime = func());
        public static void BindDecayTime(this AudioReverbFilter obj, Func<System.Single> func)
            => BindDecayTime(obj, Bindings2._scope, func);
        public static void BindDecayTimeInterval(this AudioReverbFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.decayTime = func());
        public static void BindDecayTimeInterval(this AudioReverbFilter obj, float seconds, Func<System.Single> func)
            => BindDecayTimeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDecayHFRatio(this AudioReverbFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.decayHFRatio = v);
        public static void BindDecayHFRatio(this AudioReverbFilter obj, IProperty<System.Single> property)
            => BindDecayHFRatio(obj, Bindings2._scope, property);
        public static void BindDecayHFRatio(this AudioReverbFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.decayHFRatio = func());
        public static void BindDecayHFRatio(this AudioReverbFilter obj, Func<System.Single> func)
            => BindDecayHFRatio(obj, Bindings2._scope, func);
        public static void BindDecayHFRatioInterval(this AudioReverbFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.decayHFRatio = func());
        public static void BindDecayHFRatioInterval(this AudioReverbFilter obj, float seconds, Func<System.Single> func)
            => BindDecayHFRatioInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReflectionsLevel(this AudioReverbFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.reflectionsLevel = v);
        public static void BindReflectionsLevel(this AudioReverbFilter obj, IProperty<System.Single> property)
            => BindReflectionsLevel(obj, Bindings2._scope, property);
        public static void BindReflectionsLevel(this AudioReverbFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.reflectionsLevel = func());
        public static void BindReflectionsLevel(this AudioReverbFilter obj, Func<System.Single> func)
            => BindReflectionsLevel(obj, Bindings2._scope, func);
        public static void BindReflectionsLevelInterval(this AudioReverbFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.reflectionsLevel = func());
        public static void BindReflectionsLevelInterval(this AudioReverbFilter obj, float seconds, Func<System.Single> func)
            => BindReflectionsLevelInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReflectionsDelay(this AudioReverbFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.reflectionsDelay = v);
        public static void BindReflectionsDelay(this AudioReverbFilter obj, IProperty<System.Single> property)
            => BindReflectionsDelay(obj, Bindings2._scope, property);
        public static void BindReflectionsDelay(this AudioReverbFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.reflectionsDelay = func());
        public static void BindReflectionsDelay(this AudioReverbFilter obj, Func<System.Single> func)
            => BindReflectionsDelay(obj, Bindings2._scope, func);
        public static void BindReflectionsDelayInterval(this AudioReverbFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.reflectionsDelay = func());
        public static void BindReflectionsDelayInterval(this AudioReverbFilter obj, float seconds, Func<System.Single> func)
            => BindReflectionsDelayInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReverbLevel(this AudioReverbFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.reverbLevel = v);
        public static void BindReverbLevel(this AudioReverbFilter obj, IProperty<System.Single> property)
            => BindReverbLevel(obj, Bindings2._scope, property);
        public static void BindReverbLevel(this AudioReverbFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.reverbLevel = func());
        public static void BindReverbLevel(this AudioReverbFilter obj, Func<System.Single> func)
            => BindReverbLevel(obj, Bindings2._scope, func);
        public static void BindReverbLevelInterval(this AudioReverbFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.reverbLevel = func());
        public static void BindReverbLevelInterval(this AudioReverbFilter obj, float seconds, Func<System.Single> func)
            => BindReverbLevelInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReverbDelay(this AudioReverbFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.reverbDelay = v);
        public static void BindReverbDelay(this AudioReverbFilter obj, IProperty<System.Single> property)
            => BindReverbDelay(obj, Bindings2._scope, property);
        public static void BindReverbDelay(this AudioReverbFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.reverbDelay = func());
        public static void BindReverbDelay(this AudioReverbFilter obj, Func<System.Single> func)
            => BindReverbDelay(obj, Bindings2._scope, func);
        public static void BindReverbDelayInterval(this AudioReverbFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.reverbDelay = func());
        public static void BindReverbDelayInterval(this AudioReverbFilter obj, float seconds, Func<System.Single> func)
            => BindReverbDelayInterval(obj, Bindings2._scope, seconds, func);
        public static void BindHfReference(this AudioReverbFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.hfReference = v);
        public static void BindHfReference(this AudioReverbFilter obj, IProperty<System.Single> property)
            => BindHfReference(obj, Bindings2._scope, property);
        public static void BindHfReference(this AudioReverbFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.hfReference = func());
        public static void BindHfReference(this AudioReverbFilter obj, Func<System.Single> func)
            => BindHfReference(obj, Bindings2._scope, func);
        public static void BindHfReferenceInterval(this AudioReverbFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.hfReference = func());
        public static void BindHfReferenceInterval(this AudioReverbFilter obj, float seconds, Func<System.Single> func)
            => BindHfReferenceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLfReference(this AudioReverbFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.lfReference = v);
        public static void BindLfReference(this AudioReverbFilter obj, IProperty<System.Single> property)
            => BindLfReference(obj, Bindings2._scope, property);
        public static void BindLfReference(this AudioReverbFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.lfReference = func());
        public static void BindLfReference(this AudioReverbFilter obj, Func<System.Single> func)
            => BindLfReference(obj, Bindings2._scope, func);
        public static void BindLfReferenceInterval(this AudioReverbFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.lfReference = func());
        public static void BindLfReferenceInterval(this AudioReverbFilter obj, float seconds, Func<System.Single> func)
            => BindLfReferenceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDiffusion(this AudioReverbFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.diffusion = v);
        public static void BindDiffusion(this AudioReverbFilter obj, IProperty<System.Single> property)
            => BindDiffusion(obj, Bindings2._scope, property);
        public static void BindDiffusion(this AudioReverbFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.diffusion = func());
        public static void BindDiffusion(this AudioReverbFilter obj, Func<System.Single> func)
            => BindDiffusion(obj, Bindings2._scope, func);
        public static void BindDiffusionInterval(this AudioReverbFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.diffusion = func());
        public static void BindDiffusionInterval(this AudioReverbFilter obj, float seconds, Func<System.Single> func)
            => BindDiffusionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDensity(this AudioReverbFilter obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.density = v);
        public static void BindDensity(this AudioReverbFilter obj, IProperty<System.Single> property)
            => BindDensity(obj, Bindings2._scope, property);
        public static void BindDensity(this AudioReverbFilter obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.density = func());
        public static void BindDensity(this AudioReverbFilter obj, Func<System.Single> func)
            => BindDensity(obj, Bindings2._scope, func);
        public static void BindDensityInterval(this AudioReverbFilter obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.density = func());
        public static void BindDensityInterval(this AudioReverbFilter obj, float seconds, Func<System.Single> func)
            => BindDensityInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_AUDIO
        public static void BindMinDistance(this AudioReverbZone obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.minDistance = v);
        public static void BindMinDistance(this AudioReverbZone obj, IProperty<System.Single> property)
            => BindMinDistance(obj, Bindings2._scope, property);
        public static void BindMinDistance(this AudioReverbZone obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.minDistance = func());
        public static void BindMinDistance(this AudioReverbZone obj, Func<System.Single> func)
            => BindMinDistance(obj, Bindings2._scope, func);
        public static void BindMinDistanceInterval(this AudioReverbZone obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.minDistance = func());
        public static void BindMinDistanceInterval(this AudioReverbZone obj, float seconds, Func<System.Single> func)
            => BindMinDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMaxDistance(this AudioReverbZone obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.maxDistance = v);
        public static void BindMaxDistance(this AudioReverbZone obj, IProperty<System.Single> property)
            => BindMaxDistance(obj, Bindings2._scope, property);
        public static void BindMaxDistance(this AudioReverbZone obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.maxDistance = func());
        public static void BindMaxDistance(this AudioReverbZone obj, Func<System.Single> func)
            => BindMaxDistance(obj, Bindings2._scope, func);
        public static void BindMaxDistanceInterval(this AudioReverbZone obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.maxDistance = func());
        public static void BindMaxDistanceInterval(this AudioReverbZone obj, float seconds, Func<System.Single> func)
            => BindMaxDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReverbPreset(this AudioReverbZone obj, Bindings2 bindings, IProperty<UnityEngine.AudioReverbPreset> property)
            => bindings.Bind(property, v => obj.reverbPreset = v);
        public static void BindReverbPreset(this AudioReverbZone obj, IProperty<UnityEngine.AudioReverbPreset> property)
            => BindReverbPreset(obj, Bindings2._scope, property);
        public static void BindReverbPreset(this AudioReverbZone obj, Bindings2 bindings, Func<UnityEngine.AudioReverbPreset> func)
            => bindings.BindUpdate(() => obj.reverbPreset = func());
        public static void BindReverbPreset(this AudioReverbZone obj, Func<UnityEngine.AudioReverbPreset> func)
            => BindReverbPreset(obj, Bindings2._scope, func);
        public static void BindReverbPresetInterval(this AudioReverbZone obj, Bindings2 bindings, float seconds, Func<UnityEngine.AudioReverbPreset> func)
            => bindings.BindInterval(seconds, () => obj.reverbPreset = func());
        public static void BindReverbPresetInterval(this AudioReverbZone obj, float seconds, Func<UnityEngine.AudioReverbPreset> func)
            => BindReverbPresetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRoom(this AudioReverbZone obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.room = v);
        public static void BindRoom(this AudioReverbZone obj, IProperty<System.Int32> property)
            => BindRoom(obj, Bindings2._scope, property);
        public static void BindRoom(this AudioReverbZone obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.room = func());
        public static void BindRoom(this AudioReverbZone obj, Func<System.Int32> func)
            => BindRoom(obj, Bindings2._scope, func);
        public static void BindRoomInterval(this AudioReverbZone obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.room = func());
        public static void BindRoomInterval(this AudioReverbZone obj, float seconds, Func<System.Int32> func)
            => BindRoomInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRoomHF(this AudioReverbZone obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.roomHF = v);
        public static void BindRoomHF(this AudioReverbZone obj, IProperty<System.Int32> property)
            => BindRoomHF(obj, Bindings2._scope, property);
        public static void BindRoomHF(this AudioReverbZone obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.roomHF = func());
        public static void BindRoomHF(this AudioReverbZone obj, Func<System.Int32> func)
            => BindRoomHF(obj, Bindings2._scope, func);
        public static void BindRoomHFInterval(this AudioReverbZone obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.roomHF = func());
        public static void BindRoomHFInterval(this AudioReverbZone obj, float seconds, Func<System.Int32> func)
            => BindRoomHFInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRoomLF(this AudioReverbZone obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.roomLF = v);
        public static void BindRoomLF(this AudioReverbZone obj, IProperty<System.Int32> property)
            => BindRoomLF(obj, Bindings2._scope, property);
        public static void BindRoomLF(this AudioReverbZone obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.roomLF = func());
        public static void BindRoomLF(this AudioReverbZone obj, Func<System.Int32> func)
            => BindRoomLF(obj, Bindings2._scope, func);
        public static void BindRoomLFInterval(this AudioReverbZone obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.roomLF = func());
        public static void BindRoomLFInterval(this AudioReverbZone obj, float seconds, Func<System.Int32> func)
            => BindRoomLFInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDecayTime(this AudioReverbZone obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.decayTime = v);
        public static void BindDecayTime(this AudioReverbZone obj, IProperty<System.Single> property)
            => BindDecayTime(obj, Bindings2._scope, property);
        public static void BindDecayTime(this AudioReverbZone obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.decayTime = func());
        public static void BindDecayTime(this AudioReverbZone obj, Func<System.Single> func)
            => BindDecayTime(obj, Bindings2._scope, func);
        public static void BindDecayTimeInterval(this AudioReverbZone obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.decayTime = func());
        public static void BindDecayTimeInterval(this AudioReverbZone obj, float seconds, Func<System.Single> func)
            => BindDecayTimeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDecayHFRatio(this AudioReverbZone obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.decayHFRatio = v);
        public static void BindDecayHFRatio(this AudioReverbZone obj, IProperty<System.Single> property)
            => BindDecayHFRatio(obj, Bindings2._scope, property);
        public static void BindDecayHFRatio(this AudioReverbZone obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.decayHFRatio = func());
        public static void BindDecayHFRatio(this AudioReverbZone obj, Func<System.Single> func)
            => BindDecayHFRatio(obj, Bindings2._scope, func);
        public static void BindDecayHFRatioInterval(this AudioReverbZone obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.decayHFRatio = func());
        public static void BindDecayHFRatioInterval(this AudioReverbZone obj, float seconds, Func<System.Single> func)
            => BindDecayHFRatioInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReflections(this AudioReverbZone obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.reflections = v);
        public static void BindReflections(this AudioReverbZone obj, IProperty<System.Int32> property)
            => BindReflections(obj, Bindings2._scope, property);
        public static void BindReflections(this AudioReverbZone obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.reflections = func());
        public static void BindReflections(this AudioReverbZone obj, Func<System.Int32> func)
            => BindReflections(obj, Bindings2._scope, func);
        public static void BindReflectionsInterval(this AudioReverbZone obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.reflections = func());
        public static void BindReflectionsInterval(this AudioReverbZone obj, float seconds, Func<System.Int32> func)
            => BindReflectionsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReflectionsDelay(this AudioReverbZone obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.reflectionsDelay = v);
        public static void BindReflectionsDelay(this AudioReverbZone obj, IProperty<System.Single> property)
            => BindReflectionsDelay(obj, Bindings2._scope, property);
        public static void BindReflectionsDelay(this AudioReverbZone obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.reflectionsDelay = func());
        public static void BindReflectionsDelay(this AudioReverbZone obj, Func<System.Single> func)
            => BindReflectionsDelay(obj, Bindings2._scope, func);
        public static void BindReflectionsDelayInterval(this AudioReverbZone obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.reflectionsDelay = func());
        public static void BindReflectionsDelayInterval(this AudioReverbZone obj, float seconds, Func<System.Single> func)
            => BindReflectionsDelayInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReverb(this AudioReverbZone obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.reverb = v);
        public static void BindReverb(this AudioReverbZone obj, IProperty<System.Int32> property)
            => BindReverb(obj, Bindings2._scope, property);
        public static void BindReverb(this AudioReverbZone obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.reverb = func());
        public static void BindReverb(this AudioReverbZone obj, Func<System.Int32> func)
            => BindReverb(obj, Bindings2._scope, func);
        public static void BindReverbInterval(this AudioReverbZone obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.reverb = func());
        public static void BindReverbInterval(this AudioReverbZone obj, float seconds, Func<System.Int32> func)
            => BindReverbInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReverbDelay(this AudioReverbZone obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.reverbDelay = v);
        public static void BindReverbDelay(this AudioReverbZone obj, IProperty<System.Single> property)
            => BindReverbDelay(obj, Bindings2._scope, property);
        public static void BindReverbDelay(this AudioReverbZone obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.reverbDelay = func());
        public static void BindReverbDelay(this AudioReverbZone obj, Func<System.Single> func)
            => BindReverbDelay(obj, Bindings2._scope, func);
        public static void BindReverbDelayInterval(this AudioReverbZone obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.reverbDelay = func());
        public static void BindReverbDelayInterval(this AudioReverbZone obj, float seconds, Func<System.Single> func)
            => BindReverbDelayInterval(obj, Bindings2._scope, seconds, func);
        public static void BindHFReference(this AudioReverbZone obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.HFReference = v);
        public static void BindHFReference(this AudioReverbZone obj, IProperty<System.Single> property)
            => BindHFReference(obj, Bindings2._scope, property);
        public static void BindHFReference(this AudioReverbZone obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.HFReference = func());
        public static void BindHFReference(this AudioReverbZone obj, Func<System.Single> func)
            => BindHFReference(obj, Bindings2._scope, func);
        public static void BindHFReferenceInterval(this AudioReverbZone obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.HFReference = func());
        public static void BindHFReferenceInterval(this AudioReverbZone obj, float seconds, Func<System.Single> func)
            => BindHFReferenceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLFReference(this AudioReverbZone obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.LFReference = v);
        public static void BindLFReference(this AudioReverbZone obj, IProperty<System.Single> property)
            => BindLFReference(obj, Bindings2._scope, property);
        public static void BindLFReference(this AudioReverbZone obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.LFReference = func());
        public static void BindLFReference(this AudioReverbZone obj, Func<System.Single> func)
            => BindLFReference(obj, Bindings2._scope, func);
        public static void BindLFReferenceInterval(this AudioReverbZone obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.LFReference = func());
        public static void BindLFReferenceInterval(this AudioReverbZone obj, float seconds, Func<System.Single> func)
            => BindLFReferenceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDiffusion(this AudioReverbZone obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.diffusion = v);
        public static void BindDiffusion(this AudioReverbZone obj, IProperty<System.Single> property)
            => BindDiffusion(obj, Bindings2._scope, property);
        public static void BindDiffusion(this AudioReverbZone obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.diffusion = func());
        public static void BindDiffusion(this AudioReverbZone obj, Func<System.Single> func)
            => BindDiffusion(obj, Bindings2._scope, func);
        public static void BindDiffusionInterval(this AudioReverbZone obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.diffusion = func());
        public static void BindDiffusionInterval(this AudioReverbZone obj, float seconds, Func<System.Single> func)
            => BindDiffusionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDensity(this AudioReverbZone obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.density = v);
        public static void BindDensity(this AudioReverbZone obj, IProperty<System.Single> property)
            => BindDensity(obj, Bindings2._scope, property);
        public static void BindDensity(this AudioReverbZone obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.density = func());
        public static void BindDensity(this AudioReverbZone obj, Func<System.Single> func)
            => BindDensity(obj, Bindings2._scope, func);
        public static void BindDensityInterval(this AudioReverbZone obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.density = func());
        public static void BindDensityInterval(this AudioReverbZone obj, float seconds, Func<System.Single> func)
            => BindDensityInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_AUDIO
        public static void BindClip(this AudioSource obj, Bindings2 bindings, IProperty<UnityEngine.AudioClip> property)
            => bindings.Bind(property, v => obj.clip = v);
        public static void BindClip(this AudioSource obj, IProperty<UnityEngine.AudioClip> property)
            => BindClip(obj, Bindings2._scope, property);
        public static void BindClip(this AudioSource obj, Bindings2 bindings, Func<UnityEngine.AudioClip> func)
            => bindings.BindUpdate(() => obj.clip = func());
        public static void BindClip(this AudioSource obj, Func<UnityEngine.AudioClip> func)
            => BindClip(obj, Bindings2._scope, func);
        public static void BindClipInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<UnityEngine.AudioClip> func)
            => bindings.BindInterval(seconds, () => obj.clip = func());
        public static void BindClipInterval(this AudioSource obj, float seconds, Func<UnityEngine.AudioClip> func)
            => BindClipInterval(obj, Bindings2._scope, seconds, func);
        public static void BindOutputAudioMixerGroup(this AudioSource obj, Bindings2 bindings, IProperty<UnityEngine.Audio.AudioMixerGroup> property)
            => bindings.Bind(property, v => obj.outputAudioMixerGroup = v);
        public static void BindOutputAudioMixerGroup(this AudioSource obj, IProperty<UnityEngine.Audio.AudioMixerGroup> property)
            => BindOutputAudioMixerGroup(obj, Bindings2._scope, property);
        public static void BindOutputAudioMixerGroup(this AudioSource obj, Bindings2 bindings, Func<UnityEngine.Audio.AudioMixerGroup> func)
            => bindings.BindUpdate(() => obj.outputAudioMixerGroup = func());
        public static void BindOutputAudioMixerGroup(this AudioSource obj, Func<UnityEngine.Audio.AudioMixerGroup> func)
            => BindOutputAudioMixerGroup(obj, Bindings2._scope, func);
        public static void BindOutputAudioMixerGroupInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<UnityEngine.Audio.AudioMixerGroup> func)
            => bindings.BindInterval(seconds, () => obj.outputAudioMixerGroup = func());
        public static void BindOutputAudioMixerGroupInterval(this AudioSource obj, float seconds, Func<UnityEngine.Audio.AudioMixerGroup> func)
            => BindOutputAudioMixerGroupInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMute(this AudioSource obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.mute = v);
        public static void BindMute(this AudioSource obj, IProperty<System.Boolean> property)
            => BindMute(obj, Bindings2._scope, property);
        public static void BindMute(this AudioSource obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.mute = func());
        public static void BindMute(this AudioSource obj, Func<System.Boolean> func)
            => BindMute(obj, Bindings2._scope, func);
        public static void BindMuteInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.mute = func());
        public static void BindMuteInterval(this AudioSource obj, float seconds, Func<System.Boolean> func)
            => BindMuteInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBypassEffects(this AudioSource obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.bypassEffects = v);
        public static void BindBypassEffects(this AudioSource obj, IProperty<System.Boolean> property)
            => BindBypassEffects(obj, Bindings2._scope, property);
        public static void BindBypassEffects(this AudioSource obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.bypassEffects = func());
        public static void BindBypassEffects(this AudioSource obj, Func<System.Boolean> func)
            => BindBypassEffects(obj, Bindings2._scope, func);
        public static void BindBypassEffectsInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.bypassEffects = func());
        public static void BindBypassEffectsInterval(this AudioSource obj, float seconds, Func<System.Boolean> func)
            => BindBypassEffectsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBypassListenerEffects(this AudioSource obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.bypassListenerEffects = v);
        public static void BindBypassListenerEffects(this AudioSource obj, IProperty<System.Boolean> property)
            => BindBypassListenerEffects(obj, Bindings2._scope, property);
        public static void BindBypassListenerEffects(this AudioSource obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.bypassListenerEffects = func());
        public static void BindBypassListenerEffects(this AudioSource obj, Func<System.Boolean> func)
            => BindBypassListenerEffects(obj, Bindings2._scope, func);
        public static void BindBypassListenerEffectsInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.bypassListenerEffects = func());
        public static void BindBypassListenerEffectsInterval(this AudioSource obj, float seconds, Func<System.Boolean> func)
            => BindBypassListenerEffectsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBypassReverbZones(this AudioSource obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.bypassReverbZones = v);
        public static void BindBypassReverbZones(this AudioSource obj, IProperty<System.Boolean> property)
            => BindBypassReverbZones(obj, Bindings2._scope, property);
        public static void BindBypassReverbZones(this AudioSource obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.bypassReverbZones = func());
        public static void BindBypassReverbZones(this AudioSource obj, Func<System.Boolean> func)
            => BindBypassReverbZones(obj, Bindings2._scope, func);
        public static void BindBypassReverbZonesInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.bypassReverbZones = func());
        public static void BindBypassReverbZonesInterval(this AudioSource obj, float seconds, Func<System.Boolean> func)
            => BindBypassReverbZonesInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPlayOnAwake(this AudioSource obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.playOnAwake = v);
        public static void BindPlayOnAwake(this AudioSource obj, IProperty<System.Boolean> property)
            => BindPlayOnAwake(obj, Bindings2._scope, property);
        public static void BindPlayOnAwake(this AudioSource obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.playOnAwake = func());
        public static void BindPlayOnAwake(this AudioSource obj, Func<System.Boolean> func)
            => BindPlayOnAwake(obj, Bindings2._scope, func);
        public static void BindPlayOnAwakeInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.playOnAwake = func());
        public static void BindPlayOnAwakeInterval(this AudioSource obj, float seconds, Func<System.Boolean> func)
            => BindPlayOnAwakeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLoop(this AudioSource obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.loop = v);
        public static void BindLoop(this AudioSource obj, IProperty<System.Boolean> property)
            => BindLoop(obj, Bindings2._scope, property);
        public static void BindLoop(this AudioSource obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.loop = func());
        public static void BindLoop(this AudioSource obj, Func<System.Boolean> func)
            => BindLoop(obj, Bindings2._scope, func);
        public static void BindLoopInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.loop = func());
        public static void BindLoopInterval(this AudioSource obj, float seconds, Func<System.Boolean> func)
            => BindLoopInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPriority(this AudioSource obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.priority = v);
        public static void BindPriority(this AudioSource obj, IProperty<System.Int32> property)
            => BindPriority(obj, Bindings2._scope, property);
        public static void BindPriority(this AudioSource obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.priority = func());
        public static void BindPriority(this AudioSource obj, Func<System.Int32> func)
            => BindPriority(obj, Bindings2._scope, func);
        public static void BindPriorityInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.priority = func());
        public static void BindPriorityInterval(this AudioSource obj, float seconds, Func<System.Int32> func)
            => BindPriorityInterval(obj, Bindings2._scope, seconds, func);
        public static void BindVolume(this AudioSource obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.volume = v);
        public static void BindVolume(this AudioSource obj, IProperty<System.Single> property)
            => BindVolume(obj, Bindings2._scope, property);
        public static void BindVolume(this AudioSource obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.volume = func());
        public static void BindVolume(this AudioSource obj, Func<System.Single> func)
            => BindVolume(obj, Bindings2._scope, func);
        public static void BindVolumeInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.volume = func());
        public static void BindVolumeInterval(this AudioSource obj, float seconds, Func<System.Single> func)
            => BindVolumeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPitch(this AudioSource obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.pitch = v);
        public static void BindPitch(this AudioSource obj, IProperty<System.Single> property)
            => BindPitch(obj, Bindings2._scope, property);
        public static void BindPitch(this AudioSource obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.pitch = func());
        public static void BindPitch(this AudioSource obj, Func<System.Single> func)
            => BindPitch(obj, Bindings2._scope, func);
        public static void BindPitchInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.pitch = func());
        public static void BindPitchInterval(this AudioSource obj, float seconds, Func<System.Single> func)
            => BindPitchInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPanStereo(this AudioSource obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.panStereo = v);
        public static void BindPanStereo(this AudioSource obj, IProperty<System.Single> property)
            => BindPanStereo(obj, Bindings2._scope, property);
        public static void BindPanStereo(this AudioSource obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.panStereo = func());
        public static void BindPanStereo(this AudioSource obj, Func<System.Single> func)
            => BindPanStereo(obj, Bindings2._scope, func);
        public static void BindPanStereoInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.panStereo = func());
        public static void BindPanStereoInterval(this AudioSource obj, float seconds, Func<System.Single> func)
            => BindPanStereoInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSpatialBlend(this AudioSource obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.spatialBlend = v);
        public static void BindSpatialBlend(this AudioSource obj, IProperty<System.Single> property)
            => BindSpatialBlend(obj, Bindings2._scope, property);
        public static void BindSpatialBlend(this AudioSource obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.spatialBlend = func());
        public static void BindSpatialBlend(this AudioSource obj, Func<System.Single> func)
            => BindSpatialBlend(obj, Bindings2._scope, func);
        public static void BindSpatialBlendInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.spatialBlend = func());
        public static void BindSpatialBlendInterval(this AudioSource obj, float seconds, Func<System.Single> func)
            => BindSpatialBlendInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReverbZoneMix(this AudioSource obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.reverbZoneMix = v);
        public static void BindReverbZoneMix(this AudioSource obj, IProperty<System.Single> property)
            => BindReverbZoneMix(obj, Bindings2._scope, property);
        public static void BindReverbZoneMix(this AudioSource obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.reverbZoneMix = func());
        public static void BindReverbZoneMix(this AudioSource obj, Func<System.Single> func)
            => BindReverbZoneMix(obj, Bindings2._scope, func);
        public static void BindReverbZoneMixInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.reverbZoneMix = func());
        public static void BindReverbZoneMixInterval(this AudioSource obj, float seconds, Func<System.Single> func)
            => BindReverbZoneMixInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDopplerLevel(this AudioSource obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.dopplerLevel = v);
        public static void BindDopplerLevel(this AudioSource obj, IProperty<System.Single> property)
            => BindDopplerLevel(obj, Bindings2._scope, property);
        public static void BindDopplerLevel(this AudioSource obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.dopplerLevel = func());
        public static void BindDopplerLevel(this AudioSource obj, Func<System.Single> func)
            => BindDopplerLevel(obj, Bindings2._scope, func);
        public static void BindDopplerLevelInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.dopplerLevel = func());
        public static void BindDopplerLevelInterval(this AudioSource obj, float seconds, Func<System.Single> func)
            => BindDopplerLevelInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSpread(this AudioSource obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.spread = v);
        public static void BindSpread(this AudioSource obj, IProperty<System.Single> property)
            => BindSpread(obj, Bindings2._scope, property);
        public static void BindSpread(this AudioSource obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.spread = func());
        public static void BindSpread(this AudioSource obj, Func<System.Single> func)
            => BindSpread(obj, Bindings2._scope, func);
        public static void BindSpreadInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.spread = func());
        public static void BindSpreadInterval(this AudioSource obj, float seconds, Func<System.Single> func)
            => BindSpreadInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRolloffMode(this AudioSource obj, Bindings2 bindings, IProperty<UnityEngine.AudioRolloffMode> property)
            => bindings.Bind(property, v => obj.rolloffMode = v);
        public static void BindRolloffMode(this AudioSource obj, IProperty<UnityEngine.AudioRolloffMode> property)
            => BindRolloffMode(obj, Bindings2._scope, property);
        public static void BindRolloffMode(this AudioSource obj, Bindings2 bindings, Func<UnityEngine.AudioRolloffMode> func)
            => bindings.BindUpdate(() => obj.rolloffMode = func());
        public static void BindRolloffMode(this AudioSource obj, Func<UnityEngine.AudioRolloffMode> func)
            => BindRolloffMode(obj, Bindings2._scope, func);
        public static void BindRolloffModeInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<UnityEngine.AudioRolloffMode> func)
            => bindings.BindInterval(seconds, () => obj.rolloffMode = func());
        public static void BindRolloffModeInterval(this AudioSource obj, float seconds, Func<UnityEngine.AudioRolloffMode> func)
            => BindRolloffModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMinDistance(this AudioSource obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.minDistance = v);
        public static void BindMinDistance(this AudioSource obj, IProperty<System.Single> property)
            => BindMinDistance(obj, Bindings2._scope, property);
        public static void BindMinDistance(this AudioSource obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.minDistance = func());
        public static void BindMinDistance(this AudioSource obj, Func<System.Single> func)
            => BindMinDistance(obj, Bindings2._scope, func);
        public static void BindMinDistanceInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.minDistance = func());
        public static void BindMinDistanceInterval(this AudioSource obj, float seconds, Func<System.Single> func)
            => BindMinDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMaxDistance(this AudioSource obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.maxDistance = v);
        public static void BindMaxDistance(this AudioSource obj, IProperty<System.Single> property)
            => BindMaxDistance(obj, Bindings2._scope, property);
        public static void BindMaxDistance(this AudioSource obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.maxDistance = func());
        public static void BindMaxDistance(this AudioSource obj, Func<System.Single> func)
            => BindMaxDistance(obj, Bindings2._scope, func);
        public static void BindMaxDistanceInterval(this AudioSource obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.maxDistance = func());
        public static void BindMaxDistanceInterval(this AudioSource obj, float seconds, Func<System.Single> func)
            => BindMaxDistanceInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS
        public static void BindIsTrigger(this BoxCollider obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isTrigger = v);
        public static void BindIsTrigger(this BoxCollider obj, IProperty<System.Boolean> property)
            => BindIsTrigger(obj, Bindings2._scope, property);
        public static void BindIsTrigger(this BoxCollider obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isTrigger = func());
        public static void BindIsTrigger(this BoxCollider obj, Func<System.Boolean> func)
            => BindIsTrigger(obj, Bindings2._scope, func);
        public static void BindIsTriggerInterval(this BoxCollider obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isTrigger = func());
        public static void BindIsTriggerInterval(this BoxCollider obj, float seconds, Func<System.Boolean> func)
            => BindIsTriggerInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_6000_0_OR_NEWER
        public static void BindSharedMaterial(this BoxCollider obj, Bindings2 bindings, IProperty<PhysicMaterial> property)
            => bindings.Bind(property, v => obj.sharedMaterial = v);
        public static void BindSharedMaterial(this BoxCollider obj, IProperty<PhysicMaterial> property)
            => BindSharedMaterial(obj, Bindings2._scope, property);
        public static void BindSharedMaterial(this BoxCollider obj, Bindings2 bindings, Func<PhysicMaterial> func)
            => bindings.BindUpdate(() => obj.sharedMaterial = func());
        public static void BindSharedMaterial(this BoxCollider obj, Func<PhysicMaterial> func)
            => BindSharedMaterial(obj, Bindings2._scope, func);
        public static void BindSharedMaterialInterval(this BoxCollider obj, Bindings2 bindings, float seconds, Func<PhysicMaterial> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterial = func());
        public static void BindSharedMaterialInterval(this BoxCollider obj, float seconds, Func<PhysicMaterial> func)
            => BindSharedMaterialInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_6000_0_OR_NEWER
        public static void BindSharedMaterial(this BoxCollider obj, Bindings2 bindings, IProperty<PhysicsMaterial> property)
            => bindings.Bind(property, v => obj.sharedMaterial = v);
        public static void BindSharedMaterial(this BoxCollider obj, IProperty<PhysicsMaterial> property)
            => BindSharedMaterial(obj, Bindings2._scope, property);
        public static void BindSharedMaterial(this BoxCollider obj, Bindings2 bindings, Func<PhysicsMaterial> func)
            => bindings.BindUpdate(() => obj.sharedMaterial = func());
        public static void BindSharedMaterial(this BoxCollider obj, Func<PhysicsMaterial> func)
            => BindSharedMaterial(obj, Bindings2._scope, func);
        public static void BindSharedMaterialInterval(this BoxCollider obj, Bindings2 bindings, float seconds, Func<PhysicsMaterial> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterial = func());
        public static void BindSharedMaterialInterval(this BoxCollider obj, float seconds, Func<PhysicsMaterial> func)
            => BindSharedMaterialInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindCenter(this BoxCollider obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.center = v);
        public static void BindCenter(this BoxCollider obj, IProperty<UnityEngine.Vector3> property)
            => BindCenter(obj, Bindings2._scope, property);
        public static void BindCenter(this BoxCollider obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = func());
        public static void BindCenter(this BoxCollider obj, Func<UnityEngine.Vector3> func)
            => BindCenter(obj, Bindings2._scope, func);
        public static void BindCenterInterval(this BoxCollider obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.center = func());
        public static void BindCenterInterval(this BoxCollider obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindCenterInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCenterLerp(this BoxCollider obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.center = Vector3.Lerp(obj.center, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCenterLerp(this BoxCollider obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCenterLerp(obj, Bindings2._scope, speed, property);
        public static void BindCenterLerp(this BoxCollider obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = Vector3.Lerp(obj.center, func(), speed * Time.smoothDeltaTime));
        public static void BindCenterLerp(this BoxCollider obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCenterLerp(obj, Bindings2._scope, speed, func);
        public static void BindCenterTowards(this BoxCollider obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.center = Vector3.MoveTowards(obj.center, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCenterTowards(this BoxCollider obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCenterTowards(obj, Bindings2._scope, speed, property);
        public static void BindCenterTowards(this BoxCollider obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = Vector3.MoveTowards(obj.center, func(), speed * Time.smoothDeltaTime));
        public static void BindCenterTowards(this BoxCollider obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCenterTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateCenter(this BoxCollider obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.center = Vector3.Lerp(start, end, t));
        public static void AnimateCenter(this BoxCollider obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, start, end, curve);
        public static void AnimateCenter(this BoxCollider obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, obj.center, end, curve);
        public static void AnimateCenter(this BoxCollider obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, end, curve);
        public static void BindSize(this BoxCollider obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.size = v);
        public static void BindSize(this BoxCollider obj, IProperty<UnityEngine.Vector3> property)
            => BindSize(obj, Bindings2._scope, property);
        public static void BindSize(this BoxCollider obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.size = func());
        public static void BindSize(this BoxCollider obj, Func<UnityEngine.Vector3> func)
            => BindSize(obj, Bindings2._scope, func);
        public static void BindSizeInterval(this BoxCollider obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.size = func());
        public static void BindSizeInterval(this BoxCollider obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindSizeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSizeLerp(this BoxCollider obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.size = Vector3.Lerp(obj.size, property.Value, speed * Time.smoothDeltaTime));
        public static void BindSizeLerp(this BoxCollider obj, float speed, Property<UnityEngine.Vector3> property)
            => BindSizeLerp(obj, Bindings2._scope, speed, property);
        public static void BindSizeLerp(this BoxCollider obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.size = Vector3.Lerp(obj.size, func(), speed * Time.smoothDeltaTime));
        public static void BindSizeLerp(this BoxCollider obj, float speed, Func<UnityEngine.Vector3> func)
            => BindSizeLerp(obj, Bindings2._scope, speed, func);
        public static void BindSizeTowards(this BoxCollider obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.size = Vector3.MoveTowards(obj.size, property.Value, speed * Time.smoothDeltaTime));
        public static void BindSizeTowards(this BoxCollider obj, float speed, Property<UnityEngine.Vector3> property)
            => BindSizeTowards(obj, Bindings2._scope, speed, property);
        public static void BindSizeTowards(this BoxCollider obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.size = Vector3.MoveTowards(obj.size, func(), speed * Time.smoothDeltaTime));
        public static void BindSizeTowards(this BoxCollider obj, float speed, Func<UnityEngine.Vector3> func)
            => BindSizeTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateSize(this BoxCollider obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.size = Vector3.Lerp(start, end, t));
        public static void AnimateSize(this BoxCollider obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateSize(obj, Bindings2._scope, start, end, curve);
        public static void AnimateSize(this BoxCollider obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateSize(obj, Bindings2._scope, obj.size, end, curve);
        public static void AnimateSize(this BoxCollider obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateSize(obj, Bindings2._scope, end, curve);
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindSharedMaterial(this BoxCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.PhysicsMaterial2D> property)
            => bindings.Bind(property, v => obj.sharedMaterial = v);
        public static void BindSharedMaterial(this BoxCollider2D obj, IProperty<UnityEngine.PhysicsMaterial2D> property)
            => BindSharedMaterial(obj, Bindings2._scope, property);
        public static void BindSharedMaterial(this BoxCollider2D obj, Bindings2 bindings, Func<UnityEngine.PhysicsMaterial2D> func)
            => bindings.BindUpdate(() => obj.sharedMaterial = func());
        public static void BindSharedMaterial(this BoxCollider2D obj, Func<UnityEngine.PhysicsMaterial2D> func)
            => BindSharedMaterial(obj, Bindings2._scope, func);
        public static void BindSharedMaterialInterval(this BoxCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.PhysicsMaterial2D> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterial = func());
        public static void BindSharedMaterialInterval(this BoxCollider2D obj, float seconds, Func<UnityEngine.PhysicsMaterial2D> func)
            => BindSharedMaterialInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIsTrigger(this BoxCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isTrigger = v);
        public static void BindIsTrigger(this BoxCollider2D obj, IProperty<System.Boolean> property)
            => BindIsTrigger(obj, Bindings2._scope, property);
        public static void BindIsTrigger(this BoxCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isTrigger = func());
        public static void BindIsTrigger(this BoxCollider2D obj, Func<System.Boolean> func)
            => BindIsTrigger(obj, Bindings2._scope, func);
        public static void BindIsTriggerInterval(this BoxCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isTrigger = func());
        public static void BindIsTriggerInterval(this BoxCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindIsTriggerInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUsedByEffector(this BoxCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.usedByEffector = v);
        public static void BindUsedByEffector(this BoxCollider2D obj, IProperty<System.Boolean> property)
            => BindUsedByEffector(obj, Bindings2._scope, property);
        public static void BindUsedByEffector(this BoxCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.usedByEffector = func());
        public static void BindUsedByEffector(this BoxCollider2D obj, Func<System.Boolean> func)
            => BindUsedByEffector(obj, Bindings2._scope, func);
        public static void BindUsedByEffectorInterval(this BoxCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.usedByEffector = func());
        public static void BindUsedByEffectorInterval(this BoxCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindUsedByEffectorInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_2023_1_OR_NEWER
        public static void BindUsedByComposite(this BoxCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.usedByComposite = v);
        public static void BindUsedByComposite(this BoxCollider2D obj, IProperty<System.Boolean> property)
            => BindUsedByComposite(obj, Bindings2._scope, property);
        public static void BindUsedByComposite(this BoxCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.usedByComposite = func());
        public static void BindUsedByComposite(this BoxCollider2D obj, Func<System.Boolean> func)
            => BindUsedByComposite(obj, Bindings2._scope, func);
        public static void BindUsedByCompositeInterval(this BoxCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.usedByComposite = func());
        public static void BindUsedByCompositeInterval(this BoxCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindUsedByCompositeInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_2023_1_OR_NEWER
        public static void BindCompositeOperation(this BoxCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.Collider2D.CompositeOperation> property)
            => bindings.Bind(property, v => obj.compositeOperation = v);
        public static void BindCompositeOperation(this BoxCollider2D obj, IProperty<UnityEngine.Collider2D.CompositeOperation> property)
            => BindCompositeOperation(obj, Bindings2._scope, property);
        public static void BindCompositeOperation(this BoxCollider2D obj, Bindings2 bindings, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => bindings.BindUpdate(() => obj.compositeOperation = func());
        public static void BindCompositeOperation(this BoxCollider2D obj, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => BindCompositeOperation(obj, Bindings2._scope, func);
        public static void BindCompositeOperationInterval(this BoxCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => bindings.BindInterval(seconds, () => obj.compositeOperation = func());
        public static void BindCompositeOperationInterval(this BoxCollider2D obj, float seconds, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => BindCompositeOperationInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindOffset(this BoxCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.offset = v);
        public static void BindOffset(this BoxCollider2D obj, IProperty<UnityEngine.Vector2> property)
            => BindOffset(obj, Bindings2._scope, property);
        public static void BindOffset(this BoxCollider2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.offset = func());
        public static void BindOffset(this BoxCollider2D obj, Func<UnityEngine.Vector2> func)
            => BindOffset(obj, Bindings2._scope, func);
        public static void BindOffsetInterval(this BoxCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.offset = func());
        public static void BindOffsetInterval(this BoxCollider2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindOffsetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoTiling(this BoxCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoTiling = v);
        public static void BindAutoTiling(this BoxCollider2D obj, IProperty<System.Boolean> property)
            => BindAutoTiling(obj, Bindings2._scope, property);
        public static void BindAutoTiling(this BoxCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoTiling = func());
        public static void BindAutoTiling(this BoxCollider2D obj, Func<System.Boolean> func)
            => BindAutoTiling(obj, Bindings2._scope, func);
        public static void BindAutoTilingInterval(this BoxCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoTiling = func());
        public static void BindAutoTilingInterval(this BoxCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindAutoTilingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSize(this BoxCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.size = v);
        public static void BindSize(this BoxCollider2D obj, IProperty<UnityEngine.Vector2> property)
            => BindSize(obj, Bindings2._scope, property);
        public static void BindSize(this BoxCollider2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.size = func());
        public static void BindSize(this BoxCollider2D obj, Func<UnityEngine.Vector2> func)
            => BindSize(obj, Bindings2._scope, func);
        public static void BindSizeInterval(this BoxCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.size = func());
        public static void BindSizeInterval(this BoxCollider2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindSizeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEdgeRadius(this BoxCollider2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.edgeRadius = v);
        public static void BindEdgeRadius(this BoxCollider2D obj, IProperty<System.Single> property)
            => BindEdgeRadius(obj, Bindings2._scope, property);
        public static void BindEdgeRadius(this BoxCollider2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.edgeRadius = func());
        public static void BindEdgeRadius(this BoxCollider2D obj, Func<System.Single> func)
            => BindEdgeRadius(obj, Bindings2._scope, func);
        public static void BindEdgeRadiusInterval(this BoxCollider2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.edgeRadius = func());
        public static void BindEdgeRadiusInterval(this BoxCollider2D obj, float seconds, Func<System.Single> func)
            => BindEdgeRadiusInterval(obj, Bindings2._scope, seconds, func);
        #endif


        public static void BindBillboard(this BillboardRenderer obj, Bindings2 bindings, IProperty<UnityEngine.BillboardAsset> property)
            => bindings.Bind(property, v => obj.billboard = v);
        public static void BindBillboard(this BillboardRenderer obj, IProperty<UnityEngine.BillboardAsset> property)
            => BindBillboard(obj, Bindings2._scope, property);
        public static void BindBillboard(this BillboardRenderer obj, Bindings2 bindings, Func<UnityEngine.BillboardAsset> func)
            => bindings.BindUpdate(() => obj.billboard = func());
        public static void BindBillboard(this BillboardRenderer obj, Func<UnityEngine.BillboardAsset> func)
            => BindBillboard(obj, Bindings2._scope, func);
        public static void BindBillboardInterval(this BillboardRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.BillboardAsset> func)
            => bindings.BindInterval(seconds, () => obj.billboard = func());
        public static void BindBillboardInterval(this BillboardRenderer obj, float seconds, Func<UnityEngine.BillboardAsset> func)
            => BindBillboardInterval(obj, Bindings2._scope, seconds, func);
        public static void BindShadowCastingMode(this BillboardRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Rendering.ShadowCastingMode> property)
            => bindings.Bind(property, v => obj.shadowCastingMode = v);
        public static void BindShadowCastingMode(this BillboardRenderer obj, IProperty<UnityEngine.Rendering.ShadowCastingMode> property)
            => BindShadowCastingMode(obj, Bindings2._scope, property);
        public static void BindShadowCastingMode(this BillboardRenderer obj, Bindings2 bindings, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => bindings.BindUpdate(() => obj.shadowCastingMode = func());
        public static void BindShadowCastingMode(this BillboardRenderer obj, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => BindShadowCastingMode(obj, Bindings2._scope, func);
        public static void BindShadowCastingModeInterval(this BillboardRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => bindings.BindInterval(seconds, () => obj.shadowCastingMode = func());
        public static void BindShadowCastingModeInterval(this BillboardRenderer obj, float seconds, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => BindShadowCastingModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReceiveShadows(this BillboardRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.receiveShadows = v);
        public static void BindReceiveShadows(this BillboardRenderer obj, IProperty<System.Boolean> property)
            => BindReceiveShadows(obj, Bindings2._scope, property);
        public static void BindReceiveShadows(this BillboardRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.receiveShadows = func());
        public static void BindReceiveShadows(this BillboardRenderer obj, Func<System.Boolean> func)
            => BindReceiveShadows(obj, Bindings2._scope, func);
        public static void BindReceiveShadowsInterval(this BillboardRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.receiveShadows = func());
        public static void BindReceiveShadowsInterval(this BillboardRenderer obj, float seconds, Func<System.Boolean> func)
            => BindReceiveShadowsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLightProbeUsage(this BillboardRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Rendering.LightProbeUsage> property)
            => bindings.Bind(property, v => obj.lightProbeUsage = v);
        public static void BindLightProbeUsage(this BillboardRenderer obj, IProperty<UnityEngine.Rendering.LightProbeUsage> property)
            => BindLightProbeUsage(obj, Bindings2._scope, property);
        public static void BindLightProbeUsage(this BillboardRenderer obj, Bindings2 bindings, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => bindings.BindUpdate(() => obj.lightProbeUsage = func());
        public static void BindLightProbeUsage(this BillboardRenderer obj, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => BindLightProbeUsage(obj, Bindings2._scope, func);
        public static void BindLightProbeUsageInterval(this BillboardRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => bindings.BindInterval(seconds, () => obj.lightProbeUsage = func());
        public static void BindLightProbeUsageInterval(this BillboardRenderer obj, float seconds, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => BindLightProbeUsageInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReflectionProbeUsage(this BillboardRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Rendering.ReflectionProbeUsage> property)
            => bindings.Bind(property, v => obj.reflectionProbeUsage = v);
        public static void BindReflectionProbeUsage(this BillboardRenderer obj, IProperty<UnityEngine.Rendering.ReflectionProbeUsage> property)
            => BindReflectionProbeUsage(obj, Bindings2._scope, property);
        public static void BindReflectionProbeUsage(this BillboardRenderer obj, Bindings2 bindings, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => bindings.BindUpdate(() => obj.reflectionProbeUsage = func());
        public static void BindReflectionProbeUsage(this BillboardRenderer obj, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => BindReflectionProbeUsage(obj, Bindings2._scope, func);
        public static void BindReflectionProbeUsageInterval(this BillboardRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => bindings.BindInterval(seconds, () => obj.reflectionProbeUsage = func());
        public static void BindReflectionProbeUsageInterval(this BillboardRenderer obj, float seconds, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => BindReflectionProbeUsageInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMotionVectorGenerationMode(this BillboardRenderer obj, Bindings2 bindings, IProperty<UnityEngine.MotionVectorGenerationMode> property)
            => bindings.Bind(property, v => obj.motionVectorGenerationMode = v);
        public static void BindMotionVectorGenerationMode(this BillboardRenderer obj, IProperty<UnityEngine.MotionVectorGenerationMode> property)
            => BindMotionVectorGenerationMode(obj, Bindings2._scope, property);
        public static void BindMotionVectorGenerationMode(this BillboardRenderer obj, Bindings2 bindings, Func<UnityEngine.MotionVectorGenerationMode> func)
            => bindings.BindUpdate(() => obj.motionVectorGenerationMode = func());
        public static void BindMotionVectorGenerationMode(this BillboardRenderer obj, Func<UnityEngine.MotionVectorGenerationMode> func)
            => BindMotionVectorGenerationMode(obj, Bindings2._scope, func);
        public static void BindMotionVectorGenerationModeInterval(this BillboardRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.MotionVectorGenerationMode> func)
            => bindings.BindInterval(seconds, () => obj.motionVectorGenerationMode = func());
        public static void BindMotionVectorGenerationModeInterval(this BillboardRenderer obj, float seconds, Func<UnityEngine.MotionVectorGenerationMode> func)
            => BindMotionVectorGenerationModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAllowOcclusionWhenDynamic(this BillboardRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.allowOcclusionWhenDynamic = v);
        public static void BindAllowOcclusionWhenDynamic(this BillboardRenderer obj, IProperty<System.Boolean> property)
            => BindAllowOcclusionWhenDynamic(obj, Bindings2._scope, property);
        public static void BindAllowOcclusionWhenDynamic(this BillboardRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.allowOcclusionWhenDynamic = func());
        public static void BindAllowOcclusionWhenDynamic(this BillboardRenderer obj, Func<System.Boolean> func)
            => BindAllowOcclusionWhenDynamic(obj, Bindings2._scope, func);
        public static void BindAllowOcclusionWhenDynamicInterval(this BillboardRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.allowOcclusionWhenDynamic = func());
        public static void BindAllowOcclusionWhenDynamicInterval(this BillboardRenderer obj, float seconds, Func<System.Boolean> func)
            => BindAllowOcclusionWhenDynamicInterval(obj, Bindings2._scope, seconds, func);


        #if UNITY_PHYSICS_2D
        public static void BindUseColliderMask(this BuoyancyEffector2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useColliderMask = v);
        public static void BindUseColliderMask(this BuoyancyEffector2D obj, IProperty<System.Boolean> property)
            => BindUseColliderMask(obj, Bindings2._scope, property);
        public static void BindUseColliderMask(this BuoyancyEffector2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useColliderMask = func());
        public static void BindUseColliderMask(this BuoyancyEffector2D obj, Func<System.Boolean> func)
            => BindUseColliderMask(obj, Bindings2._scope, func);
        public static void BindUseColliderMaskInterval(this BuoyancyEffector2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useColliderMask = func());
        public static void BindUseColliderMaskInterval(this BuoyancyEffector2D obj, float seconds, Func<System.Boolean> func)
            => BindUseColliderMaskInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColliderMask(this BuoyancyEffector2D obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.colliderMask = v);
        public static void BindColliderMask(this BuoyancyEffector2D obj, IProperty<System.Int32> property)
            => BindColliderMask(obj, Bindings2._scope, property);
        public static void BindColliderMask(this BuoyancyEffector2D obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.colliderMask = func());
        public static void BindColliderMask(this BuoyancyEffector2D obj, Func<System.Int32> func)
            => BindColliderMask(obj, Bindings2._scope, func);
        public static void BindColliderMaskInterval(this BuoyancyEffector2D obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.colliderMask = func());
        public static void BindColliderMaskInterval(this BuoyancyEffector2D obj, float seconds, Func<System.Int32> func)
            => BindColliderMaskInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDensity(this BuoyancyEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.density = v);
        public static void BindDensity(this BuoyancyEffector2D obj, IProperty<System.Single> property)
            => BindDensity(obj, Bindings2._scope, property);
        public static void BindDensity(this BuoyancyEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.density = func());
        public static void BindDensity(this BuoyancyEffector2D obj, Func<System.Single> func)
            => BindDensity(obj, Bindings2._scope, func);
        public static void BindDensityInterval(this BuoyancyEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.density = func());
        public static void BindDensityInterval(this BuoyancyEffector2D obj, float seconds, Func<System.Single> func)
            => BindDensityInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSurfaceLevel(this BuoyancyEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.surfaceLevel = v);
        public static void BindSurfaceLevel(this BuoyancyEffector2D obj, IProperty<System.Single> property)
            => BindSurfaceLevel(obj, Bindings2._scope, property);
        public static void BindSurfaceLevel(this BuoyancyEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.surfaceLevel = func());
        public static void BindSurfaceLevel(this BuoyancyEffector2D obj, Func<System.Single> func)
            => BindSurfaceLevel(obj, Bindings2._scope, func);
        public static void BindSurfaceLevelInterval(this BuoyancyEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.surfaceLevel = func());
        public static void BindSurfaceLevelInterval(this BuoyancyEffector2D obj, float seconds, Func<System.Single> func)
            => BindSurfaceLevelInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFlowAngle(this BuoyancyEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.flowAngle = v);
        public static void BindFlowAngle(this BuoyancyEffector2D obj, IProperty<System.Single> property)
            => BindFlowAngle(obj, Bindings2._scope, property);
        public static void BindFlowAngle(this BuoyancyEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.flowAngle = func());
        public static void BindFlowAngle(this BuoyancyEffector2D obj, Func<System.Single> func)
            => BindFlowAngle(obj, Bindings2._scope, func);
        public static void BindFlowAngleInterval(this BuoyancyEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.flowAngle = func());
        public static void BindFlowAngleInterval(this BuoyancyEffector2D obj, float seconds, Func<System.Single> func)
            => BindFlowAngleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFlowMagnitude(this BuoyancyEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.flowMagnitude = v);
        public static void BindFlowMagnitude(this BuoyancyEffector2D obj, IProperty<System.Single> property)
            => BindFlowMagnitude(obj, Bindings2._scope, property);
        public static void BindFlowMagnitude(this BuoyancyEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.flowMagnitude = func());
        public static void BindFlowMagnitude(this BuoyancyEffector2D obj, Func<System.Single> func)
            => BindFlowMagnitude(obj, Bindings2._scope, func);
        public static void BindFlowMagnitudeInterval(this BuoyancyEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.flowMagnitude = func());
        public static void BindFlowMagnitudeInterval(this BuoyancyEffector2D obj, float seconds, Func<System.Single> func)
            => BindFlowMagnitudeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFlowVariation(this BuoyancyEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.flowVariation = v);
        public static void BindFlowVariation(this BuoyancyEffector2D obj, IProperty<System.Single> property)
            => BindFlowVariation(obj, Bindings2._scope, property);
        public static void BindFlowVariation(this BuoyancyEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.flowVariation = func());
        public static void BindFlowVariation(this BuoyancyEffector2D obj, Func<System.Single> func)
            => BindFlowVariation(obj, Bindings2._scope, func);
        public static void BindFlowVariationInterval(this BuoyancyEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.flowVariation = func());
        public static void BindFlowVariationInterval(this BuoyancyEffector2D obj, float seconds, Func<System.Single> func)
            => BindFlowVariationInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindInteractable(this UnityEngine.UI.Button obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.interactable = v);
        public static void BindInteractable(this UnityEngine.UI.Button obj, IProperty<System.Boolean> property)
            => BindInteractable(obj, Bindings2._scope, property);
        public static void BindInteractable(this UnityEngine.UI.Button obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.interactable = func());
        public static void BindInteractable(this UnityEngine.UI.Button obj, Func<System.Boolean> func)
            => BindInteractable(obj, Bindings2._scope, func);
        public static void BindInteractableInterval(this UnityEngine.UI.Button obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.interactable = func());
        public static void BindInteractableInterval(this UnityEngine.UI.Button obj, float seconds, Func<System.Boolean> func)
            => BindInteractableInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTransition(this UnityEngine.UI.Button obj, Bindings2 bindings, IProperty<UnityEngine.UI.Selectable.Transition> property)
            => bindings.Bind(property, v => obj.transition = v);
        public static void BindTransition(this UnityEngine.UI.Button obj, IProperty<UnityEngine.UI.Selectable.Transition> property)
            => BindTransition(obj, Bindings2._scope, property);
        public static void BindTransition(this UnityEngine.UI.Button obj, Bindings2 bindings, Func<UnityEngine.UI.Selectable.Transition> func)
            => bindings.BindUpdate(() => obj.transition = func());
        public static void BindTransition(this UnityEngine.UI.Button obj, Func<UnityEngine.UI.Selectable.Transition> func)
            => BindTransition(obj, Bindings2._scope, func);
        public static void BindTransitionInterval(this UnityEngine.UI.Button obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Selectable.Transition> func)
            => bindings.BindInterval(seconds, () => obj.transition = func());
        public static void BindTransitionInterval(this UnityEngine.UI.Button obj, float seconds, Func<UnityEngine.UI.Selectable.Transition> func)
            => BindTransitionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetGraphic(this UnityEngine.UI.Button obj, Bindings2 bindings, IProperty<UnityEngine.UI.Graphic> property)
            => bindings.Bind(property, v => obj.targetGraphic = v);
        public static void BindTargetGraphic(this UnityEngine.UI.Button obj, IProperty<UnityEngine.UI.Graphic> property)
            => BindTargetGraphic(obj, Bindings2._scope, property);
        public static void BindTargetGraphic(this UnityEngine.UI.Button obj, Bindings2 bindings, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindUpdate(() => obj.targetGraphic = func());
        public static void BindTargetGraphic(this UnityEngine.UI.Button obj, Func<UnityEngine.UI.Graphic> func)
            => BindTargetGraphic(obj, Bindings2._scope, func);
        public static void BindTargetGraphicInterval(this UnityEngine.UI.Button obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindInterval(seconds, () => obj.targetGraphic = func());
        public static void BindTargetGraphicInterval(this UnityEngine.UI.Button obj, float seconds, Func<UnityEngine.UI.Graphic> func)
            => BindTargetGraphicInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColors(this UnityEngine.UI.Button obj, Bindings2 bindings, IProperty<UnityEngine.UI.ColorBlock> property)
            => bindings.Bind(property, v => obj.colors = v);
        public static void BindColors(this UnityEngine.UI.Button obj, IProperty<UnityEngine.UI.ColorBlock> property)
            => BindColors(obj, Bindings2._scope, property);
        public static void BindColors(this UnityEngine.UI.Button obj, Bindings2 bindings, Func<UnityEngine.UI.ColorBlock> func)
            => bindings.BindUpdate(() => obj.colors = func());
        public static void BindColors(this UnityEngine.UI.Button obj, Func<UnityEngine.UI.ColorBlock> func)
            => BindColors(obj, Bindings2._scope, func);
        public static void BindColorsInterval(this UnityEngine.UI.Button obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.ColorBlock> func)
            => bindings.BindInterval(seconds, () => obj.colors = func());
        public static void BindColorsInterval(this UnityEngine.UI.Button obj, float seconds, Func<UnityEngine.UI.ColorBlock> func)
            => BindColorsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindNavigation(this UnityEngine.UI.Button obj, Bindings2 bindings, IProperty<UnityEngine.UI.Navigation> property)
            => bindings.Bind(property, v => obj.navigation = v);
        public static void BindNavigation(this UnityEngine.UI.Button obj, IProperty<UnityEngine.UI.Navigation> property)
            => BindNavigation(obj, Bindings2._scope, property);
        public static void BindNavigation(this UnityEngine.UI.Button obj, Bindings2 bindings, Func<UnityEngine.UI.Navigation> func)
            => bindings.BindUpdate(() => obj.navigation = func());
        public static void BindNavigation(this UnityEngine.UI.Button obj, Func<UnityEngine.UI.Navigation> func)
            => BindNavigation(obj, Bindings2._scope, func);
        public static void BindNavigationInterval(this UnityEngine.UI.Button obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Navigation> func)
            => bindings.BindInterval(seconds, () => obj.navigation = func());
        public static void BindNavigationInterval(this UnityEngine.UI.Button obj, float seconds, Func<UnityEngine.UI.Navigation> func)
            => BindNavigationInterval(obj, Bindings2._scope, seconds, func);
        #endif


        public static void BindClearFlags(this Camera obj, Bindings2 bindings, IProperty<UnityEngine.CameraClearFlags> property)
            => bindings.Bind(property, v => obj.clearFlags = v);
        public static void BindClearFlags(this Camera obj, IProperty<UnityEngine.CameraClearFlags> property)
            => BindClearFlags(obj, Bindings2._scope, property);
        public static void BindClearFlags(this Camera obj, Bindings2 bindings, Func<UnityEngine.CameraClearFlags> func)
            => bindings.BindUpdate(() => obj.clearFlags = func());
        public static void BindClearFlags(this Camera obj, Func<UnityEngine.CameraClearFlags> func)
            => BindClearFlags(obj, Bindings2._scope, func);
        public static void BindClearFlagsInterval(this Camera obj, Bindings2 bindings, float seconds, Func<UnityEngine.CameraClearFlags> func)
            => bindings.BindInterval(seconds, () => obj.clearFlags = func());
        public static void BindClearFlagsInterval(this Camera obj, float seconds, Func<UnityEngine.CameraClearFlags> func)
            => BindClearFlagsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBackgroundColor(this Camera obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.backgroundColor = v);
        public static void BindBackgroundColor(this Camera obj, IProperty<UnityEngine.Color> property)
            => BindBackgroundColor(obj, Bindings2._scope, property);
        public static void BindBackgroundColor(this Camera obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.backgroundColor = func());
        public static void BindBackgroundColor(this Camera obj, Func<UnityEngine.Color> func)
            => BindBackgroundColor(obj, Bindings2._scope, func);
        public static void BindBackgroundColorInterval(this Camera obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.backgroundColor = func());
        public static void BindBackgroundColorInterval(this Camera obj, float seconds, Func<UnityEngine.Color> func)
            => BindBackgroundColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCullingMask(this Camera obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.cullingMask = v);
        public static void BindCullingMask(this Camera obj, IProperty<System.Int32> property)
            => BindCullingMask(obj, Bindings2._scope, property);
        public static void BindCullingMask(this Camera obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.cullingMask = func());
        public static void BindCullingMask(this Camera obj, Func<System.Int32> func)
            => BindCullingMask(obj, Bindings2._scope, func);
        public static void BindCullingMaskInterval(this Camera obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.cullingMask = func());
        public static void BindCullingMaskInterval(this Camera obj, float seconds, Func<System.Int32> func)
            => BindCullingMaskInterval(obj, Bindings2._scope, seconds, func);
        public static void BindOrthographic(this Camera obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.orthographic = v);
        public static void BindOrthographic(this Camera obj, IProperty<System.Boolean> property)
            => BindOrthographic(obj, Bindings2._scope, property);
        public static void BindOrthographic(this Camera obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.orthographic = func());
        public static void BindOrthographic(this Camera obj, Func<System.Boolean> func)
            => BindOrthographic(obj, Bindings2._scope, func);
        public static void BindOrthographicInterval(this Camera obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.orthographic = func());
        public static void BindOrthographicInterval(this Camera obj, float seconds, Func<System.Boolean> func)
            => BindOrthographicInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFieldOfView(this Camera obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.fieldOfView = v);
        public static void BindFieldOfView(this Camera obj, IProperty<System.Single> property)
            => BindFieldOfView(obj, Bindings2._scope, property);
        public static void BindFieldOfView(this Camera obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.fieldOfView = func());
        public static void BindFieldOfView(this Camera obj, Func<System.Single> func)
            => BindFieldOfView(obj, Bindings2._scope, func);
        public static void BindFieldOfViewInterval(this Camera obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.fieldOfView = func());
        public static void BindFieldOfViewInterval(this Camera obj, float seconds, Func<System.Single> func)
            => BindFieldOfViewInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUsePhysicalProperties(this Camera obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.usePhysicalProperties = v);
        public static void BindUsePhysicalProperties(this Camera obj, IProperty<System.Boolean> property)
            => BindUsePhysicalProperties(obj, Bindings2._scope, property);
        public static void BindUsePhysicalProperties(this Camera obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.usePhysicalProperties = func());
        public static void BindUsePhysicalProperties(this Camera obj, Func<System.Boolean> func)
            => BindUsePhysicalProperties(obj, Bindings2._scope, func);
        public static void BindUsePhysicalPropertiesInterval(this Camera obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.usePhysicalProperties = func());
        public static void BindUsePhysicalPropertiesInterval(this Camera obj, float seconds, Func<System.Boolean> func)
            => BindUsePhysicalPropertiesInterval(obj, Bindings2._scope, seconds, func);
        public static void BindNearClipPlane(this Camera obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.nearClipPlane = v);
        public static void BindNearClipPlane(this Camera obj, IProperty<System.Single> property)
            => BindNearClipPlane(obj, Bindings2._scope, property);
        public static void BindNearClipPlane(this Camera obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.nearClipPlane = func());
        public static void BindNearClipPlane(this Camera obj, Func<System.Single> func)
            => BindNearClipPlane(obj, Bindings2._scope, func);
        public static void BindNearClipPlaneInterval(this Camera obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.nearClipPlane = func());
        public static void BindNearClipPlaneInterval(this Camera obj, float seconds, Func<System.Single> func)
            => BindNearClipPlaneInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFarClipPlane(this Camera obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.farClipPlane = v);
        public static void BindFarClipPlane(this Camera obj, IProperty<System.Single> property)
            => BindFarClipPlane(obj, Bindings2._scope, property);
        public static void BindFarClipPlane(this Camera obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.farClipPlane = func());
        public static void BindFarClipPlane(this Camera obj, Func<System.Single> func)
            => BindFarClipPlane(obj, Bindings2._scope, func);
        public static void BindFarClipPlaneInterval(this Camera obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.farClipPlane = func());
        public static void BindFarClipPlaneInterval(this Camera obj, float seconds, Func<System.Single> func)
            => BindFarClipPlaneInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRect(this Camera obj, Bindings2 bindings, IProperty<UnityEngine.Rect> property)
            => bindings.Bind(property, v => obj.rect = v);
        public static void BindRect(this Camera obj, IProperty<UnityEngine.Rect> property)
            => BindRect(obj, Bindings2._scope, property);
        public static void BindRect(this Camera obj, Bindings2 bindings, Func<UnityEngine.Rect> func)
            => bindings.BindUpdate(() => obj.rect = func());
        public static void BindRect(this Camera obj, Func<UnityEngine.Rect> func)
            => BindRect(obj, Bindings2._scope, func);
        public static void BindRectInterval(this Camera obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rect> func)
            => bindings.BindInterval(seconds, () => obj.rect = func());
        public static void BindRectInterval(this Camera obj, float seconds, Func<UnityEngine.Rect> func)
            => BindRectInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDepth(this Camera obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.depth = v);
        public static void BindDepth(this Camera obj, IProperty<System.Single> property)
            => BindDepth(obj, Bindings2._scope, property);
        public static void BindDepth(this Camera obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.depth = func());
        public static void BindDepth(this Camera obj, Func<System.Single> func)
            => BindDepth(obj, Bindings2._scope, func);
        public static void BindDepthInterval(this Camera obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.depth = func());
        public static void BindDepthInterval(this Camera obj, float seconds, Func<System.Single> func)
            => BindDepthInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRenderingPath(this Camera obj, Bindings2 bindings, IProperty<UnityEngine.RenderingPath> property)
            => bindings.Bind(property, v => obj.renderingPath = v);
        public static void BindRenderingPath(this Camera obj, IProperty<UnityEngine.RenderingPath> property)
            => BindRenderingPath(obj, Bindings2._scope, property);
        public static void BindRenderingPath(this Camera obj, Bindings2 bindings, Func<UnityEngine.RenderingPath> func)
            => bindings.BindUpdate(() => obj.renderingPath = func());
        public static void BindRenderingPath(this Camera obj, Func<UnityEngine.RenderingPath> func)
            => BindRenderingPath(obj, Bindings2._scope, func);
        public static void BindRenderingPathInterval(this Camera obj, Bindings2 bindings, float seconds, Func<UnityEngine.RenderingPath> func)
            => bindings.BindInterval(seconds, () => obj.renderingPath = func());
        public static void BindRenderingPathInterval(this Camera obj, float seconds, Func<UnityEngine.RenderingPath> func)
            => BindRenderingPathInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetTexture(this Camera obj, Bindings2 bindings, IProperty<UnityEngine.RenderTexture> property)
            => bindings.Bind(property, v => obj.targetTexture = v);
        public static void BindTargetTexture(this Camera obj, IProperty<UnityEngine.RenderTexture> property)
            => BindTargetTexture(obj, Bindings2._scope, property);
        public static void BindTargetTexture(this Camera obj, Bindings2 bindings, Func<UnityEngine.RenderTexture> func)
            => bindings.BindUpdate(() => obj.targetTexture = func());
        public static void BindTargetTexture(this Camera obj, Func<UnityEngine.RenderTexture> func)
            => BindTargetTexture(obj, Bindings2._scope, func);
        public static void BindTargetTextureInterval(this Camera obj, Bindings2 bindings, float seconds, Func<UnityEngine.RenderTexture> func)
            => bindings.BindInterval(seconds, () => obj.targetTexture = func());
        public static void BindTargetTextureInterval(this Camera obj, float seconds, Func<UnityEngine.RenderTexture> func)
            => BindTargetTextureInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseOcclusionCulling(this Camera obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useOcclusionCulling = v);
        public static void BindUseOcclusionCulling(this Camera obj, IProperty<System.Boolean> property)
            => BindUseOcclusionCulling(obj, Bindings2._scope, property);
        public static void BindUseOcclusionCulling(this Camera obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useOcclusionCulling = func());
        public static void BindUseOcclusionCulling(this Camera obj, Func<System.Boolean> func)
            => BindUseOcclusionCulling(obj, Bindings2._scope, func);
        public static void BindUseOcclusionCullingInterval(this Camera obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useOcclusionCulling = func());
        public static void BindUseOcclusionCullingInterval(this Camera obj, float seconds, Func<System.Boolean> func)
            => BindUseOcclusionCullingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAllowHDR(this Camera obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.allowHDR = v);
        public static void BindAllowHDR(this Camera obj, IProperty<System.Boolean> property)
            => BindAllowHDR(obj, Bindings2._scope, property);
        public static void BindAllowHDR(this Camera obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.allowHDR = func());
        public static void BindAllowHDR(this Camera obj, Func<System.Boolean> func)
            => BindAllowHDR(obj, Bindings2._scope, func);
        public static void BindAllowHDRInterval(this Camera obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.allowHDR = func());
        public static void BindAllowHDRInterval(this Camera obj, float seconds, Func<System.Boolean> func)
            => BindAllowHDRInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAllowMSAA(this Camera obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.allowMSAA = v);
        public static void BindAllowMSAA(this Camera obj, IProperty<System.Boolean> property)
            => BindAllowMSAA(obj, Bindings2._scope, property);
        public static void BindAllowMSAA(this Camera obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.allowMSAA = func());
        public static void BindAllowMSAA(this Camera obj, Func<System.Boolean> func)
            => BindAllowMSAA(obj, Bindings2._scope, func);
        public static void BindAllowMSAAInterval(this Camera obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.allowMSAA = func());
        public static void BindAllowMSAAInterval(this Camera obj, float seconds, Func<System.Boolean> func)
            => BindAllowMSAAInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAllowDynamicResolution(this Camera obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.allowDynamicResolution = v);
        public static void BindAllowDynamicResolution(this Camera obj, IProperty<System.Boolean> property)
            => BindAllowDynamicResolution(obj, Bindings2._scope, property);
        public static void BindAllowDynamicResolution(this Camera obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.allowDynamicResolution = func());
        public static void BindAllowDynamicResolution(this Camera obj, Func<System.Boolean> func)
            => BindAllowDynamicResolution(obj, Bindings2._scope, func);
        public static void BindAllowDynamicResolutionInterval(this Camera obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.allowDynamicResolution = func());
        public static void BindAllowDynamicResolutionInterval(this Camera obj, float seconds, Func<System.Boolean> func)
            => BindAllowDynamicResolutionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetDisplay(this Camera obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.targetDisplay = v);
        public static void BindTargetDisplay(this Camera obj, IProperty<System.Int32> property)
            => BindTargetDisplay(obj, Bindings2._scope, property);
        public static void BindTargetDisplay(this Camera obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.targetDisplay = func());
        public static void BindTargetDisplay(this Camera obj, Func<System.Int32> func)
            => BindTargetDisplay(obj, Bindings2._scope, func);
        public static void BindTargetDisplayInterval(this Camera obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.targetDisplay = func());
        public static void BindTargetDisplayInterval(this Camera obj, float seconds, Func<System.Int32> func)
            => BindTargetDisplayInterval(obj, Bindings2._scope, seconds, func);


        #if UNITY_UI
        public static void BindRenderMode(this Canvas obj, Bindings2 bindings, IProperty<UnityEngine.RenderMode> property)
            => bindings.Bind(property, v => obj.renderMode = v);
        public static void BindRenderMode(this Canvas obj, IProperty<UnityEngine.RenderMode> property)
            => BindRenderMode(obj, Bindings2._scope, property);
        public static void BindRenderMode(this Canvas obj, Bindings2 bindings, Func<UnityEngine.RenderMode> func)
            => bindings.BindUpdate(() => obj.renderMode = func());
        public static void BindRenderMode(this Canvas obj, Func<UnityEngine.RenderMode> func)
            => BindRenderMode(obj, Bindings2._scope, func);
        public static void BindRenderModeInterval(this Canvas obj, Bindings2 bindings, float seconds, Func<UnityEngine.RenderMode> func)
            => bindings.BindInterval(seconds, () => obj.renderMode = func());
        public static void BindRenderModeInterval(this Canvas obj, float seconds, Func<UnityEngine.RenderMode> func)
            => BindRenderModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWorldCamera(this Canvas obj, Bindings2 bindings, IProperty<UnityEngine.Camera> property)
            => bindings.Bind(property, v => obj.worldCamera = v);
        public static void BindWorldCamera(this Canvas obj, IProperty<UnityEngine.Camera> property)
            => BindWorldCamera(obj, Bindings2._scope, property);
        public static void BindWorldCamera(this Canvas obj, Bindings2 bindings, Func<UnityEngine.Camera> func)
            => bindings.BindUpdate(() => obj.worldCamera = func());
        public static void BindWorldCamera(this Canvas obj, Func<UnityEngine.Camera> func)
            => BindWorldCamera(obj, Bindings2._scope, func);
        public static void BindWorldCameraInterval(this Canvas obj, Bindings2 bindings, float seconds, Func<UnityEngine.Camera> func)
            => bindings.BindInterval(seconds, () => obj.worldCamera = func());
        public static void BindWorldCameraInterval(this Canvas obj, float seconds, Func<UnityEngine.Camera> func)
            => BindWorldCameraInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPixelPerfect(this Canvas obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.pixelPerfect = v);
        public static void BindPixelPerfect(this Canvas obj, IProperty<System.Boolean> property)
            => BindPixelPerfect(obj, Bindings2._scope, property);
        public static void BindPixelPerfect(this Canvas obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.pixelPerfect = func());
        public static void BindPixelPerfect(this Canvas obj, Func<System.Boolean> func)
            => BindPixelPerfect(obj, Bindings2._scope, func);
        public static void BindPixelPerfectInterval(this Canvas obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.pixelPerfect = func());
        public static void BindPixelPerfectInterval(this Canvas obj, float seconds, Func<System.Boolean> func)
            => BindPixelPerfectInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSortingOrder(this Canvas obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.sortingOrder = v);
        public static void BindSortingOrder(this Canvas obj, IProperty<System.Int32> property)
            => BindSortingOrder(obj, Bindings2._scope, property);
        public static void BindSortingOrder(this Canvas obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.sortingOrder = func());
        public static void BindSortingOrder(this Canvas obj, Func<System.Int32> func)
            => BindSortingOrder(obj, Bindings2._scope, func);
        public static void BindSortingOrderInterval(this Canvas obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.sortingOrder = func());
        public static void BindSortingOrderInterval(this Canvas obj, float seconds, Func<System.Int32> func)
            => BindSortingOrderInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetDisplay(this Canvas obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.targetDisplay = v);
        public static void BindTargetDisplay(this Canvas obj, IProperty<System.Int32> property)
            => BindTargetDisplay(obj, Bindings2._scope, property);
        public static void BindTargetDisplay(this Canvas obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.targetDisplay = func());
        public static void BindTargetDisplay(this Canvas obj, Func<System.Int32> func)
            => BindTargetDisplay(obj, Bindings2._scope, func);
        public static void BindTargetDisplayInterval(this Canvas obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.targetDisplay = func());
        public static void BindTargetDisplayInterval(this Canvas obj, float seconds, Func<System.Int32> func)
            => BindTargetDisplayInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAdditionalShaderChannels(this Canvas obj, Bindings2 bindings, IProperty<UnityEngine.AdditionalCanvasShaderChannels> property)
            => bindings.Bind(property, v => obj.additionalShaderChannels = v);
        public static void BindAdditionalShaderChannels(this Canvas obj, IProperty<UnityEngine.AdditionalCanvasShaderChannels> property)
            => BindAdditionalShaderChannels(obj, Bindings2._scope, property);
        public static void BindAdditionalShaderChannels(this Canvas obj, Bindings2 bindings, Func<UnityEngine.AdditionalCanvasShaderChannels> func)
            => bindings.BindUpdate(() => obj.additionalShaderChannels = func());
        public static void BindAdditionalShaderChannels(this Canvas obj, Func<UnityEngine.AdditionalCanvasShaderChannels> func)
            => BindAdditionalShaderChannels(obj, Bindings2._scope, func);
        public static void BindAdditionalShaderChannelsInterval(this Canvas obj, Bindings2 bindings, float seconds, Func<UnityEngine.AdditionalCanvasShaderChannels> func)
            => bindings.BindInterval(seconds, () => obj.additionalShaderChannels = func());
        public static void BindAdditionalShaderChannelsInterval(this Canvas obj, float seconds, Func<UnityEngine.AdditionalCanvasShaderChannels> func)
            => BindAdditionalShaderChannelsInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_UI
        public static void BindAlpha(this CanvasGroup obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.alpha = v);
        public static void BindAlpha(this CanvasGroup obj, IProperty<System.Single> property)
            => BindAlpha(obj, Bindings2._scope, property);
        public static void BindAlpha(this CanvasGroup obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.alpha = func());
        public static void BindAlpha(this CanvasGroup obj, Func<System.Single> func)
            => BindAlpha(obj, Bindings2._scope, func);
        public static void BindAlphaInterval(this CanvasGroup obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.alpha = func());
        public static void BindAlphaInterval(this CanvasGroup obj, float seconds, Func<System.Single> func)
            => BindAlphaInterval(obj, Bindings2._scope, seconds, func);
        public static void BindInteractable(this CanvasGroup obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.interactable = v);
        public static void BindInteractable(this CanvasGroup obj, IProperty<System.Boolean> property)
            => BindInteractable(obj, Bindings2._scope, property);
        public static void BindInteractable(this CanvasGroup obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.interactable = func());
        public static void BindInteractable(this CanvasGroup obj, Func<System.Boolean> func)
            => BindInteractable(obj, Bindings2._scope, func);
        public static void BindInteractableInterval(this CanvasGroup obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.interactable = func());
        public static void BindInteractableInterval(this CanvasGroup obj, float seconds, Func<System.Boolean> func)
            => BindInteractableInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBlocksRaycasts(this CanvasGroup obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.blocksRaycasts = v);
        public static void BindBlocksRaycasts(this CanvasGroup obj, IProperty<System.Boolean> property)
            => BindBlocksRaycasts(obj, Bindings2._scope, property);
        public static void BindBlocksRaycasts(this CanvasGroup obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.blocksRaycasts = func());
        public static void BindBlocksRaycasts(this CanvasGroup obj, Func<System.Boolean> func)
            => BindBlocksRaycasts(obj, Bindings2._scope, func);
        public static void BindBlocksRaycastsInterval(this CanvasGroup obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.blocksRaycasts = func());
        public static void BindBlocksRaycastsInterval(this CanvasGroup obj, float seconds, Func<System.Boolean> func)
            => BindBlocksRaycastsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIgnoreParentGroups(this CanvasGroup obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.ignoreParentGroups = v);
        public static void BindIgnoreParentGroups(this CanvasGroup obj, IProperty<System.Boolean> property)
            => BindIgnoreParentGroups(obj, Bindings2._scope, property);
        public static void BindIgnoreParentGroups(this CanvasGroup obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.ignoreParentGroups = func());
        public static void BindIgnoreParentGroups(this CanvasGroup obj, Func<System.Boolean> func)
            => BindIgnoreParentGroups(obj, Bindings2._scope, func);
        public static void BindIgnoreParentGroupsInterval(this CanvasGroup obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.ignoreParentGroups = func());
        public static void BindIgnoreParentGroupsInterval(this CanvasGroup obj, float seconds, Func<System.Boolean> func)
            => BindIgnoreParentGroupsInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_UI
        public static void BindCullTransparentMesh(this CanvasRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.cullTransparentMesh = v);
        public static void BindCullTransparentMesh(this CanvasRenderer obj, IProperty<System.Boolean> property)
            => BindCullTransparentMesh(obj, Bindings2._scope, property);
        public static void BindCullTransparentMesh(this CanvasRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.cullTransparentMesh = func());
        public static void BindCullTransparentMesh(this CanvasRenderer obj, Func<System.Boolean> func)
            => BindCullTransparentMesh(obj, Bindings2._scope, func);
        public static void BindCullTransparentMeshInterval(this CanvasRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.cullTransparentMesh = func());
        public static void BindCullTransparentMeshInterval(this CanvasRenderer obj, float seconds, Func<System.Boolean> func)
            => BindCullTransparentMeshInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindUiScaleMode(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, IProperty<UnityEngine.UI.CanvasScaler.ScaleMode> property)
            => bindings.Bind(property, v => obj.uiScaleMode = v);
        public static void BindUiScaleMode(this UnityEngine.UI.CanvasScaler obj, IProperty<UnityEngine.UI.CanvasScaler.ScaleMode> property)
            => BindUiScaleMode(obj, Bindings2._scope, property);
        public static void BindUiScaleMode(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, Func<UnityEngine.UI.CanvasScaler.ScaleMode> func)
            => bindings.BindUpdate(() => obj.uiScaleMode = func());
        public static void BindUiScaleMode(this UnityEngine.UI.CanvasScaler obj, Func<UnityEngine.UI.CanvasScaler.ScaleMode> func)
            => BindUiScaleMode(obj, Bindings2._scope, func);
        public static void BindUiScaleModeInterval(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.CanvasScaler.ScaleMode> func)
            => bindings.BindInterval(seconds, () => obj.uiScaleMode = func());
        public static void BindUiScaleModeInterval(this UnityEngine.UI.CanvasScaler obj, float seconds, Func<UnityEngine.UI.CanvasScaler.ScaleMode> func)
            => BindUiScaleModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindScaleFactor(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.scaleFactor = v);
        public static void BindScaleFactor(this UnityEngine.UI.CanvasScaler obj, IProperty<System.Single> property)
            => BindScaleFactor(obj, Bindings2._scope, property);
        public static void BindScaleFactor(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.scaleFactor = func());
        public static void BindScaleFactor(this UnityEngine.UI.CanvasScaler obj, Func<System.Single> func)
            => BindScaleFactor(obj, Bindings2._scope, func);
        public static void BindScaleFactorInterval(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.scaleFactor = func());
        public static void BindScaleFactorInterval(this UnityEngine.UI.CanvasScaler obj, float seconds, Func<System.Single> func)
            => BindScaleFactorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReferenceResolution(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.referenceResolution = v);
        public static void BindReferenceResolution(this UnityEngine.UI.CanvasScaler obj, IProperty<UnityEngine.Vector2> property)
            => BindReferenceResolution(obj, Bindings2._scope, property);
        public static void BindReferenceResolution(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.referenceResolution = func());
        public static void BindReferenceResolution(this UnityEngine.UI.CanvasScaler obj, Func<UnityEngine.Vector2> func)
            => BindReferenceResolution(obj, Bindings2._scope, func);
        public static void BindReferenceResolutionInterval(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.referenceResolution = func());
        public static void BindReferenceResolutionInterval(this UnityEngine.UI.CanvasScaler obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindReferenceResolutionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindScreenMatchMode(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, IProperty<UnityEngine.UI.CanvasScaler.ScreenMatchMode> property)
            => bindings.Bind(property, v => obj.screenMatchMode = v);
        public static void BindScreenMatchMode(this UnityEngine.UI.CanvasScaler obj, IProperty<UnityEngine.UI.CanvasScaler.ScreenMatchMode> property)
            => BindScreenMatchMode(obj, Bindings2._scope, property);
        public static void BindScreenMatchMode(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, Func<UnityEngine.UI.CanvasScaler.ScreenMatchMode> func)
            => bindings.BindUpdate(() => obj.screenMatchMode = func());
        public static void BindScreenMatchMode(this UnityEngine.UI.CanvasScaler obj, Func<UnityEngine.UI.CanvasScaler.ScreenMatchMode> func)
            => BindScreenMatchMode(obj, Bindings2._scope, func);
        public static void BindScreenMatchModeInterval(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.CanvasScaler.ScreenMatchMode> func)
            => bindings.BindInterval(seconds, () => obj.screenMatchMode = func());
        public static void BindScreenMatchModeInterval(this UnityEngine.UI.CanvasScaler obj, float seconds, Func<UnityEngine.UI.CanvasScaler.ScreenMatchMode> func)
            => BindScreenMatchModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPhysicalUnit(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, IProperty<UnityEngine.UI.CanvasScaler.Unit> property)
            => bindings.Bind(property, v => obj.physicalUnit = v);
        public static void BindPhysicalUnit(this UnityEngine.UI.CanvasScaler obj, IProperty<UnityEngine.UI.CanvasScaler.Unit> property)
            => BindPhysicalUnit(obj, Bindings2._scope, property);
        public static void BindPhysicalUnit(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, Func<UnityEngine.UI.CanvasScaler.Unit> func)
            => bindings.BindUpdate(() => obj.physicalUnit = func());
        public static void BindPhysicalUnit(this UnityEngine.UI.CanvasScaler obj, Func<UnityEngine.UI.CanvasScaler.Unit> func)
            => BindPhysicalUnit(obj, Bindings2._scope, func);
        public static void BindPhysicalUnitInterval(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.CanvasScaler.Unit> func)
            => bindings.BindInterval(seconds, () => obj.physicalUnit = func());
        public static void BindPhysicalUnitInterval(this UnityEngine.UI.CanvasScaler obj, float seconds, Func<UnityEngine.UI.CanvasScaler.Unit> func)
            => BindPhysicalUnitInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFallbackScreenDPI(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.fallbackScreenDPI = v);
        public static void BindFallbackScreenDPI(this UnityEngine.UI.CanvasScaler obj, IProperty<System.Single> property)
            => BindFallbackScreenDPI(obj, Bindings2._scope, property);
        public static void BindFallbackScreenDPI(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.fallbackScreenDPI = func());
        public static void BindFallbackScreenDPI(this UnityEngine.UI.CanvasScaler obj, Func<System.Single> func)
            => BindFallbackScreenDPI(obj, Bindings2._scope, func);
        public static void BindFallbackScreenDPIInterval(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.fallbackScreenDPI = func());
        public static void BindFallbackScreenDPIInterval(this UnityEngine.UI.CanvasScaler obj, float seconds, Func<System.Single> func)
            => BindFallbackScreenDPIInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDefaultSpriteDPI(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.defaultSpriteDPI = v);
        public static void BindDefaultSpriteDPI(this UnityEngine.UI.CanvasScaler obj, IProperty<System.Single> property)
            => BindDefaultSpriteDPI(obj, Bindings2._scope, property);
        public static void BindDefaultSpriteDPI(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.defaultSpriteDPI = func());
        public static void BindDefaultSpriteDPI(this UnityEngine.UI.CanvasScaler obj, Func<System.Single> func)
            => BindDefaultSpriteDPI(obj, Bindings2._scope, func);
        public static void BindDefaultSpriteDPIInterval(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.defaultSpriteDPI = func());
        public static void BindDefaultSpriteDPIInterval(this UnityEngine.UI.CanvasScaler obj, float seconds, Func<System.Single> func)
            => BindDefaultSpriteDPIInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReferencePixelsPerUnit(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.referencePixelsPerUnit = v);
        public static void BindReferencePixelsPerUnit(this UnityEngine.UI.CanvasScaler obj, IProperty<System.Single> property)
            => BindReferencePixelsPerUnit(obj, Bindings2._scope, property);
        public static void BindReferencePixelsPerUnit(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.referencePixelsPerUnit = func());
        public static void BindReferencePixelsPerUnit(this UnityEngine.UI.CanvasScaler obj, Func<System.Single> func)
            => BindReferencePixelsPerUnit(obj, Bindings2._scope, func);
        public static void BindReferencePixelsPerUnitInterval(this UnityEngine.UI.CanvasScaler obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.referencePixelsPerUnit = func());
        public static void BindReferencePixelsPerUnitInterval(this UnityEngine.UI.CanvasScaler obj, float seconds, Func<System.Single> func)
            => BindReferencePixelsPerUnitInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS
        public static void BindIsTrigger(this CapsuleCollider obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isTrigger = v);
        public static void BindIsTrigger(this CapsuleCollider obj, IProperty<System.Boolean> property)
            => BindIsTrigger(obj, Bindings2._scope, property);
        public static void BindIsTrigger(this CapsuleCollider obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isTrigger = func());
        public static void BindIsTrigger(this CapsuleCollider obj, Func<System.Boolean> func)
            => BindIsTrigger(obj, Bindings2._scope, func);
        public static void BindIsTriggerInterval(this CapsuleCollider obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isTrigger = func());
        public static void BindIsTriggerInterval(this CapsuleCollider obj, float seconds, Func<System.Boolean> func)
            => BindIsTriggerInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_6000_0_OR_NEWER
        public static void BindSharedMaterial(this CapsuleCollider obj, Bindings2 bindings, IProperty<PhysicMaterial> property)
            => bindings.Bind(property, v => obj.sharedMaterial = v);
        public static void BindSharedMaterial(this CapsuleCollider obj, IProperty<PhysicMaterial> property)
            => BindSharedMaterial(obj, Bindings2._scope, property);
        public static void BindSharedMaterial(this CapsuleCollider obj, Bindings2 bindings, Func<PhysicMaterial> func)
            => bindings.BindUpdate(() => obj.sharedMaterial = func());
        public static void BindSharedMaterial(this CapsuleCollider obj, Func<PhysicMaterial> func)
            => BindSharedMaterial(obj, Bindings2._scope, func);
        public static void BindSharedMaterialInterval(this CapsuleCollider obj, Bindings2 bindings, float seconds, Func<PhysicMaterial> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterial = func());
        public static void BindSharedMaterialInterval(this CapsuleCollider obj, float seconds, Func<PhysicMaterial> func)
            => BindSharedMaterialInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_6000_0_OR_NEWER
        public static void BindSharedMaterial(this CapsuleCollider obj, Bindings2 bindings, IProperty<PhysicsMaterial> property)
            => bindings.Bind(property, v => obj.sharedMaterial = v);
        public static void BindSharedMaterial(this CapsuleCollider obj, IProperty<PhysicsMaterial> property)
            => BindSharedMaterial(obj, Bindings2._scope, property);
        public static void BindSharedMaterial(this CapsuleCollider obj, Bindings2 bindings, Func<PhysicsMaterial> func)
            => bindings.BindUpdate(() => obj.sharedMaterial = func());
        public static void BindSharedMaterial(this CapsuleCollider obj, Func<PhysicsMaterial> func)
            => BindSharedMaterial(obj, Bindings2._scope, func);
        public static void BindSharedMaterialInterval(this CapsuleCollider obj, Bindings2 bindings, float seconds, Func<PhysicsMaterial> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterial = func());
        public static void BindSharedMaterialInterval(this CapsuleCollider obj, float seconds, Func<PhysicsMaterial> func)
            => BindSharedMaterialInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindCenter(this CapsuleCollider obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.center = v);
        public static void BindCenter(this CapsuleCollider obj, IProperty<UnityEngine.Vector3> property)
            => BindCenter(obj, Bindings2._scope, property);
        public static void BindCenter(this CapsuleCollider obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = func());
        public static void BindCenter(this CapsuleCollider obj, Func<UnityEngine.Vector3> func)
            => BindCenter(obj, Bindings2._scope, func);
        public static void BindCenterInterval(this CapsuleCollider obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.center = func());
        public static void BindCenterInterval(this CapsuleCollider obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindCenterInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCenterLerp(this CapsuleCollider obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.center = Vector3.Lerp(obj.center, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCenterLerp(this CapsuleCollider obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCenterLerp(obj, Bindings2._scope, speed, property);
        public static void BindCenterLerp(this CapsuleCollider obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = Vector3.Lerp(obj.center, func(), speed * Time.smoothDeltaTime));
        public static void BindCenterLerp(this CapsuleCollider obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCenterLerp(obj, Bindings2._scope, speed, func);
        public static void BindCenterTowards(this CapsuleCollider obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.center = Vector3.MoveTowards(obj.center, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCenterTowards(this CapsuleCollider obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCenterTowards(obj, Bindings2._scope, speed, property);
        public static void BindCenterTowards(this CapsuleCollider obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = Vector3.MoveTowards(obj.center, func(), speed * Time.smoothDeltaTime));
        public static void BindCenterTowards(this CapsuleCollider obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCenterTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateCenter(this CapsuleCollider obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.center = Vector3.Lerp(start, end, t));
        public static void AnimateCenter(this CapsuleCollider obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, start, end, curve);
        public static void AnimateCenter(this CapsuleCollider obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, obj.center, end, curve);
        public static void AnimateCenter(this CapsuleCollider obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, end, curve);
        public static void BindRadius(this CapsuleCollider obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.radius = v);
        public static void BindRadius(this CapsuleCollider obj, IProperty<System.Single> property)
            => BindRadius(obj, Bindings2._scope, property);
        public static void BindRadius(this CapsuleCollider obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.radius = func());
        public static void BindRadius(this CapsuleCollider obj, Func<System.Single> func)
            => BindRadius(obj, Bindings2._scope, func);
        public static void BindRadiusInterval(this CapsuleCollider obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.radius = func());
        public static void BindRadiusInterval(this CapsuleCollider obj, float seconds, Func<System.Single> func)
            => BindRadiusInterval(obj, Bindings2._scope, seconds, func);
        public static void BindHeight(this CapsuleCollider obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.height = v);
        public static void BindHeight(this CapsuleCollider obj, IProperty<System.Single> property)
            => BindHeight(obj, Bindings2._scope, property);
        public static void BindHeight(this CapsuleCollider obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.height = func());
        public static void BindHeight(this CapsuleCollider obj, Func<System.Single> func)
            => BindHeight(obj, Bindings2._scope, func);
        public static void BindHeightInterval(this CapsuleCollider obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.height = func());
        public static void BindHeightInterval(this CapsuleCollider obj, float seconds, Func<System.Single> func)
            => BindHeightInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDirection(this CapsuleCollider obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.direction = v);
        public static void BindDirection(this CapsuleCollider obj, IProperty<System.Int32> property)
            => BindDirection(obj, Bindings2._scope, property);
        public static void BindDirection(this CapsuleCollider obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.direction = func());
        public static void BindDirection(this CapsuleCollider obj, Func<System.Int32> func)
            => BindDirection(obj, Bindings2._scope, func);
        public static void BindDirectionInterval(this CapsuleCollider obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.direction = func());
        public static void BindDirectionInterval(this CapsuleCollider obj, float seconds, Func<System.Int32> func)
            => BindDirectionInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindSharedMaterial(this CapsuleCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.PhysicsMaterial2D> property)
            => bindings.Bind(property, v => obj.sharedMaterial = v);
        public static void BindSharedMaterial(this CapsuleCollider2D obj, IProperty<UnityEngine.PhysicsMaterial2D> property)
            => BindSharedMaterial(obj, Bindings2._scope, property);
        public static void BindSharedMaterial(this CapsuleCollider2D obj, Bindings2 bindings, Func<UnityEngine.PhysicsMaterial2D> func)
            => bindings.BindUpdate(() => obj.sharedMaterial = func());
        public static void BindSharedMaterial(this CapsuleCollider2D obj, Func<UnityEngine.PhysicsMaterial2D> func)
            => BindSharedMaterial(obj, Bindings2._scope, func);
        public static void BindSharedMaterialInterval(this CapsuleCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.PhysicsMaterial2D> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterial = func());
        public static void BindSharedMaterialInterval(this CapsuleCollider2D obj, float seconds, Func<UnityEngine.PhysicsMaterial2D> func)
            => BindSharedMaterialInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIsTrigger(this CapsuleCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isTrigger = v);
        public static void BindIsTrigger(this CapsuleCollider2D obj, IProperty<System.Boolean> property)
            => BindIsTrigger(obj, Bindings2._scope, property);
        public static void BindIsTrigger(this CapsuleCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isTrigger = func());
        public static void BindIsTrigger(this CapsuleCollider2D obj, Func<System.Boolean> func)
            => BindIsTrigger(obj, Bindings2._scope, func);
        public static void BindIsTriggerInterval(this CapsuleCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isTrigger = func());
        public static void BindIsTriggerInterval(this CapsuleCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindIsTriggerInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUsedByEffector(this CapsuleCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.usedByEffector = v);
        public static void BindUsedByEffector(this CapsuleCollider2D obj, IProperty<System.Boolean> property)
            => BindUsedByEffector(obj, Bindings2._scope, property);
        public static void BindUsedByEffector(this CapsuleCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.usedByEffector = func());
        public static void BindUsedByEffector(this CapsuleCollider2D obj, Func<System.Boolean> func)
            => BindUsedByEffector(obj, Bindings2._scope, func);
        public static void BindUsedByEffectorInterval(this CapsuleCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.usedByEffector = func());
        public static void BindUsedByEffectorInterval(this CapsuleCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindUsedByEffectorInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_2023_1_OR_NEWER
        public static void BindUsedByComposite(this CapsuleCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.usedByComposite = v);
        public static void BindUsedByComposite(this CapsuleCollider2D obj, IProperty<System.Boolean> property)
            => BindUsedByComposite(obj, Bindings2._scope, property);
        public static void BindUsedByComposite(this CapsuleCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.usedByComposite = func());
        public static void BindUsedByComposite(this CapsuleCollider2D obj, Func<System.Boolean> func)
            => BindUsedByComposite(obj, Bindings2._scope, func);
        public static void BindUsedByCompositeInterval(this CapsuleCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.usedByComposite = func());
        public static void BindUsedByCompositeInterval(this CapsuleCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindUsedByCompositeInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_2023_1_OR_NEWER
        public static void BindCompositeOperation(this CapsuleCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.Collider2D.CompositeOperation> property)
            => bindings.Bind(property, v => obj.compositeOperation = v);
        public static void BindCompositeOperation(this CapsuleCollider2D obj, IProperty<UnityEngine.Collider2D.CompositeOperation> property)
            => BindCompositeOperation(obj, Bindings2._scope, property);
        public static void BindCompositeOperation(this CapsuleCollider2D obj, Bindings2 bindings, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => bindings.BindUpdate(() => obj.compositeOperation = func());
        public static void BindCompositeOperation(this CapsuleCollider2D obj, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => BindCompositeOperation(obj, Bindings2._scope, func);
        public static void BindCompositeOperationInterval(this CapsuleCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => bindings.BindInterval(seconds, () => obj.compositeOperation = func());
        public static void BindCompositeOperationInterval(this CapsuleCollider2D obj, float seconds, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => BindCompositeOperationInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindOffset(this CapsuleCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.offset = v);
        public static void BindOffset(this CapsuleCollider2D obj, IProperty<UnityEngine.Vector2> property)
            => BindOffset(obj, Bindings2._scope, property);
        public static void BindOffset(this CapsuleCollider2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.offset = func());
        public static void BindOffset(this CapsuleCollider2D obj, Func<UnityEngine.Vector2> func)
            => BindOffset(obj, Bindings2._scope, func);
        public static void BindOffsetInterval(this CapsuleCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.offset = func());
        public static void BindOffsetInterval(this CapsuleCollider2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindOffsetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSize(this CapsuleCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.size = v);
        public static void BindSize(this CapsuleCollider2D obj, IProperty<UnityEngine.Vector2> property)
            => BindSize(obj, Bindings2._scope, property);
        public static void BindSize(this CapsuleCollider2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.size = func());
        public static void BindSize(this CapsuleCollider2D obj, Func<UnityEngine.Vector2> func)
            => BindSize(obj, Bindings2._scope, func);
        public static void BindSizeInterval(this CapsuleCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.size = func());
        public static void BindSizeInterval(this CapsuleCollider2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindSizeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDirection(this CapsuleCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.CapsuleDirection2D> property)
            => bindings.Bind(property, v => obj.direction = v);
        public static void BindDirection(this CapsuleCollider2D obj, IProperty<UnityEngine.CapsuleDirection2D> property)
            => BindDirection(obj, Bindings2._scope, property);
        public static void BindDirection(this CapsuleCollider2D obj, Bindings2 bindings, Func<UnityEngine.CapsuleDirection2D> func)
            => bindings.BindUpdate(() => obj.direction = func());
        public static void BindDirection(this CapsuleCollider2D obj, Func<UnityEngine.CapsuleDirection2D> func)
            => BindDirection(obj, Bindings2._scope, func);
        public static void BindDirectionInterval(this CapsuleCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.CapsuleDirection2D> func)
            => bindings.BindInterval(seconds, () => obj.direction = func());
        public static void BindDirectionInterval(this CapsuleCollider2D obj, float seconds, Func<UnityEngine.CapsuleDirection2D> func)
            => BindDirectionInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS
        public static void BindSlopeLimit(this CharacterController obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.slopeLimit = v);
        public static void BindSlopeLimit(this CharacterController obj, IProperty<System.Single> property)
            => BindSlopeLimit(obj, Bindings2._scope, property);
        public static void BindSlopeLimit(this CharacterController obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.slopeLimit = func());
        public static void BindSlopeLimit(this CharacterController obj, Func<System.Single> func)
            => BindSlopeLimit(obj, Bindings2._scope, func);
        public static void BindSlopeLimitInterval(this CharacterController obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.slopeLimit = func());
        public static void BindSlopeLimitInterval(this CharacterController obj, float seconds, Func<System.Single> func)
            => BindSlopeLimitInterval(obj, Bindings2._scope, seconds, func);
        public static void BindStepOffset(this CharacterController obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.stepOffset = v);
        public static void BindStepOffset(this CharacterController obj, IProperty<System.Single> property)
            => BindStepOffset(obj, Bindings2._scope, property);
        public static void BindStepOffset(this CharacterController obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.stepOffset = func());
        public static void BindStepOffset(this CharacterController obj, Func<System.Single> func)
            => BindStepOffset(obj, Bindings2._scope, func);
        public static void BindStepOffsetInterval(this CharacterController obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.stepOffset = func());
        public static void BindStepOffsetInterval(this CharacterController obj, float seconds, Func<System.Single> func)
            => BindStepOffsetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSkinWidth(this CharacterController obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.skinWidth = v);
        public static void BindSkinWidth(this CharacterController obj, IProperty<System.Single> property)
            => BindSkinWidth(obj, Bindings2._scope, property);
        public static void BindSkinWidth(this CharacterController obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.skinWidth = func());
        public static void BindSkinWidth(this CharacterController obj, Func<System.Single> func)
            => BindSkinWidth(obj, Bindings2._scope, func);
        public static void BindSkinWidthInterval(this CharacterController obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.skinWidth = func());
        public static void BindSkinWidthInterval(this CharacterController obj, float seconds, Func<System.Single> func)
            => BindSkinWidthInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMinMoveDistance(this CharacterController obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.minMoveDistance = v);
        public static void BindMinMoveDistance(this CharacterController obj, IProperty<System.Single> property)
            => BindMinMoveDistance(obj, Bindings2._scope, property);
        public static void BindMinMoveDistance(this CharacterController obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.minMoveDistance = func());
        public static void BindMinMoveDistance(this CharacterController obj, Func<System.Single> func)
            => BindMinMoveDistance(obj, Bindings2._scope, func);
        public static void BindMinMoveDistanceInterval(this CharacterController obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.minMoveDistance = func());
        public static void BindMinMoveDistanceInterval(this CharacterController obj, float seconds, Func<System.Single> func)
            => BindMinMoveDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCenter(this CharacterController obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.center = v);
        public static void BindCenter(this CharacterController obj, IProperty<UnityEngine.Vector3> property)
            => BindCenter(obj, Bindings2._scope, property);
        public static void BindCenter(this CharacterController obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = func());
        public static void BindCenter(this CharacterController obj, Func<UnityEngine.Vector3> func)
            => BindCenter(obj, Bindings2._scope, func);
        public static void BindCenterInterval(this CharacterController obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.center = func());
        public static void BindCenterInterval(this CharacterController obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindCenterInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCenterLerp(this CharacterController obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.center = Vector3.Lerp(obj.center, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCenterLerp(this CharacterController obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCenterLerp(obj, Bindings2._scope, speed, property);
        public static void BindCenterLerp(this CharacterController obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = Vector3.Lerp(obj.center, func(), speed * Time.smoothDeltaTime));
        public static void BindCenterLerp(this CharacterController obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCenterLerp(obj, Bindings2._scope, speed, func);
        public static void BindCenterTowards(this CharacterController obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.center = Vector3.MoveTowards(obj.center, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCenterTowards(this CharacterController obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCenterTowards(obj, Bindings2._scope, speed, property);
        public static void BindCenterTowards(this CharacterController obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = Vector3.MoveTowards(obj.center, func(), speed * Time.smoothDeltaTime));
        public static void BindCenterTowards(this CharacterController obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCenterTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateCenter(this CharacterController obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.center = Vector3.Lerp(start, end, t));
        public static void AnimateCenter(this CharacterController obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, start, end, curve);
        public static void AnimateCenter(this CharacterController obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, obj.center, end, curve);
        public static void AnimateCenter(this CharacterController obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, end, curve);
        public static void BindRadius(this CharacterController obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.radius = v);
        public static void BindRadius(this CharacterController obj, IProperty<System.Single> property)
            => BindRadius(obj, Bindings2._scope, property);
        public static void BindRadius(this CharacterController obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.radius = func());
        public static void BindRadius(this CharacterController obj, Func<System.Single> func)
            => BindRadius(obj, Bindings2._scope, func);
        public static void BindRadiusInterval(this CharacterController obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.radius = func());
        public static void BindRadiusInterval(this CharacterController obj, float seconds, Func<System.Single> func)
            => BindRadiusInterval(obj, Bindings2._scope, seconds, func);
        public static void BindHeight(this CharacterController obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.height = v);
        public static void BindHeight(this CharacterController obj, IProperty<System.Single> property)
            => BindHeight(obj, Bindings2._scope, property);
        public static void BindHeight(this CharacterController obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.height = func());
        public static void BindHeight(this CharacterController obj, Func<System.Single> func)
            => BindHeight(obj, Bindings2._scope, func);
        public static void BindHeightInterval(this CharacterController obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.height = func());
        public static void BindHeightInterval(this CharacterController obj, float seconds, Func<System.Single> func)
            => BindHeightInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS
        public static void BindConnectedBody(this CharacterJoint obj, Bindings2 bindings, IProperty<UnityEngine.Rigidbody> property)
            => bindings.Bind(property, v => obj.connectedBody = v);
        public static void BindConnectedBody(this CharacterJoint obj, IProperty<UnityEngine.Rigidbody> property)
            => BindConnectedBody(obj, Bindings2._scope, property);
        public static void BindConnectedBody(this CharacterJoint obj, Bindings2 bindings, Func<UnityEngine.Rigidbody> func)
            => bindings.BindUpdate(() => obj.connectedBody = func());
        public static void BindConnectedBody(this CharacterJoint obj, Func<UnityEngine.Rigidbody> func)
            => BindConnectedBody(obj, Bindings2._scope, func);
        public static void BindConnectedBodyInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rigidbody> func)
            => bindings.BindInterval(seconds, () => obj.connectedBody = func());
        public static void BindConnectedBodyInterval(this CharacterJoint obj, float seconds, Func<UnityEngine.Rigidbody> func)
            => BindConnectedBodyInterval(obj, Bindings2._scope, seconds, func);
        #if UNITY_2020_2_OR_NEWER
        public static void BindConnectedArticulationBody(this CharacterJoint obj, Bindings2 bindings, IProperty<UnityEngine.ArticulationBody> property)
            => bindings.Bind(property, v => obj.connectedArticulationBody = v);
        public static void BindConnectedArticulationBody(this CharacterJoint obj, IProperty<UnityEngine.ArticulationBody> property)
            => BindConnectedArticulationBody(obj, Bindings2._scope, property);
        public static void BindConnectedArticulationBody(this CharacterJoint obj, Bindings2 bindings, Func<UnityEngine.ArticulationBody> func)
            => bindings.BindUpdate(() => obj.connectedArticulationBody = func());
        public static void BindConnectedArticulationBody(this CharacterJoint obj, Func<UnityEngine.ArticulationBody> func)
            => BindConnectedArticulationBody(obj, Bindings2._scope, func);
        public static void BindConnectedArticulationBodyInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.ArticulationBody> func)
            => bindings.BindInterval(seconds, () => obj.connectedArticulationBody = func());
        public static void BindConnectedArticulationBodyInterval(this CharacterJoint obj, float seconds, Func<UnityEngine.ArticulationBody> func)
            => BindConnectedArticulationBodyInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindAnchor(this CharacterJoint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.anchor = v);
        public static void BindAnchor(this CharacterJoint obj, IProperty<UnityEngine.Vector3> property)
            => BindAnchor(obj, Bindings2._scope, property);
        public static void BindAnchor(this CharacterJoint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.anchor = func());
        public static void BindAnchor(this CharacterJoint obj, Func<UnityEngine.Vector3> func)
            => BindAnchor(obj, Bindings2._scope, func);
        public static void BindAnchorInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.anchor = func());
        public static void BindAnchorInterval(this CharacterJoint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAnchorLerp(this CharacterJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.anchor = Vector3.Lerp(obj.anchor, property.Value, speed * Time.smoothDeltaTime));
        public static void BindAnchorLerp(this CharacterJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindAnchorLerp(obj, Bindings2._scope, speed, property);
        public static void BindAnchorLerp(this CharacterJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.anchor = Vector3.Lerp(obj.anchor, func(), speed * Time.smoothDeltaTime));
        public static void BindAnchorLerp(this CharacterJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindAnchorLerp(obj, Bindings2._scope, speed, func);
        public static void BindAnchorTowards(this CharacterJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.anchor = Vector3.MoveTowards(obj.anchor, property.Value, speed * Time.smoothDeltaTime));
        public static void BindAnchorTowards(this CharacterJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindAnchorTowards(obj, Bindings2._scope, speed, property);
        public static void BindAnchorTowards(this CharacterJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.anchor = Vector3.MoveTowards(obj.anchor, func(), speed * Time.smoothDeltaTime));
        public static void BindAnchorTowards(this CharacterJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindAnchorTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateAnchor(this CharacterJoint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.anchor = Vector3.Lerp(start, end, t));
        public static void AnimateAnchor(this CharacterJoint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAnchor(obj, Bindings2._scope, start, end, curve);
        public static void AnimateAnchor(this CharacterJoint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAnchor(obj, Bindings2._scope, obj.anchor, end, curve);
        public static void AnimateAnchor(this CharacterJoint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAnchor(obj, Bindings2._scope, end, curve);
        public static void BindAxis(this CharacterJoint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.axis = v);
        public static void BindAxis(this CharacterJoint obj, IProperty<UnityEngine.Vector3> property)
            => BindAxis(obj, Bindings2._scope, property);
        public static void BindAxis(this CharacterJoint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.axis = func());
        public static void BindAxis(this CharacterJoint obj, Func<UnityEngine.Vector3> func)
            => BindAxis(obj, Bindings2._scope, func);
        public static void BindAxisInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.axis = func());
        public static void BindAxisInterval(this CharacterJoint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindAxisInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAxisLerp(this CharacterJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.axis = Vector3.Lerp(obj.axis, property.Value, speed * Time.smoothDeltaTime));
        public static void BindAxisLerp(this CharacterJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindAxisLerp(obj, Bindings2._scope, speed, property);
        public static void BindAxisLerp(this CharacterJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.axis = Vector3.Lerp(obj.axis, func(), speed * Time.smoothDeltaTime));
        public static void BindAxisLerp(this CharacterJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindAxisLerp(obj, Bindings2._scope, speed, func);
        public static void BindAxisTowards(this CharacterJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.axis = Vector3.MoveTowards(obj.axis, property.Value, speed * Time.smoothDeltaTime));
        public static void BindAxisTowards(this CharacterJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindAxisTowards(obj, Bindings2._scope, speed, property);
        public static void BindAxisTowards(this CharacterJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.axis = Vector3.MoveTowards(obj.axis, func(), speed * Time.smoothDeltaTime));
        public static void BindAxisTowards(this CharacterJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindAxisTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateAxis(this CharacterJoint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.axis = Vector3.Lerp(start, end, t));
        public static void AnimateAxis(this CharacterJoint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAxis(obj, Bindings2._scope, start, end, curve);
        public static void AnimateAxis(this CharacterJoint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAxis(obj, Bindings2._scope, obj.axis, end, curve);
        public static void AnimateAxis(this CharacterJoint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAxis(obj, Bindings2._scope, end, curve);
        public static void BindAutoConfigureConnectedAnchor(this CharacterJoint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoConfigureConnectedAnchor = v);
        public static void BindAutoConfigureConnectedAnchor(this CharacterJoint obj, IProperty<System.Boolean> property)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindAutoConfigureConnectedAnchor(this CharacterJoint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchor(this CharacterJoint obj, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindAutoConfigureConnectedAnchorInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchorInterval(this CharacterJoint obj, float seconds, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedAnchor(this CharacterJoint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.connectedAnchor = v);
        public static void BindConnectedAnchor(this CharacterJoint obj, IProperty<UnityEngine.Vector3> property)
            => BindConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindConnectedAnchor(this CharacterJoint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = func());
        public static void BindConnectedAnchor(this CharacterJoint obj, Func<UnityEngine.Vector3> func)
            => BindConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindConnectedAnchorInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.connectedAnchor = func());
        public static void BindConnectedAnchorInterval(this CharacterJoint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedAnchorLerp(this CharacterJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.connectedAnchor = Vector3.Lerp(obj.connectedAnchor, property.Value, speed * Time.smoothDeltaTime));
        public static void BindConnectedAnchorLerp(this CharacterJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindConnectedAnchorLerp(obj, Bindings2._scope, speed, property);
        public static void BindConnectedAnchorLerp(this CharacterJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = Vector3.Lerp(obj.connectedAnchor, func(), speed * Time.smoothDeltaTime));
        public static void BindConnectedAnchorLerp(this CharacterJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindConnectedAnchorLerp(obj, Bindings2._scope, speed, func);
        public static void BindConnectedAnchorTowards(this CharacterJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.connectedAnchor = Vector3.MoveTowards(obj.connectedAnchor, property.Value, speed * Time.smoothDeltaTime));
        public static void BindConnectedAnchorTowards(this CharacterJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindConnectedAnchorTowards(obj, Bindings2._scope, speed, property);
        public static void BindConnectedAnchorTowards(this CharacterJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = Vector3.MoveTowards(obj.connectedAnchor, func(), speed * Time.smoothDeltaTime));
        public static void BindConnectedAnchorTowards(this CharacterJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindConnectedAnchorTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateConnectedAnchor(this CharacterJoint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.connectedAnchor = Vector3.Lerp(start, end, t));
        public static void AnimateConnectedAnchor(this CharacterJoint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateConnectedAnchor(obj, Bindings2._scope, start, end, curve);
        public static void AnimateConnectedAnchor(this CharacterJoint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateConnectedAnchor(obj, Bindings2._scope, obj.connectedAnchor, end, curve);
        public static void AnimateConnectedAnchor(this CharacterJoint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateConnectedAnchor(obj, Bindings2._scope, end, curve);
        public static void BindSwingAxis(this CharacterJoint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.swingAxis = v);
        public static void BindSwingAxis(this CharacterJoint obj, IProperty<UnityEngine.Vector3> property)
            => BindSwingAxis(obj, Bindings2._scope, property);
        public static void BindSwingAxis(this CharacterJoint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.swingAxis = func());
        public static void BindSwingAxis(this CharacterJoint obj, Func<UnityEngine.Vector3> func)
            => BindSwingAxis(obj, Bindings2._scope, func);
        public static void BindSwingAxisInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.swingAxis = func());
        public static void BindSwingAxisInterval(this CharacterJoint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindSwingAxisInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSwingAxisLerp(this CharacterJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.swingAxis = Vector3.Lerp(obj.swingAxis, property.Value, speed * Time.smoothDeltaTime));
        public static void BindSwingAxisLerp(this CharacterJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindSwingAxisLerp(obj, Bindings2._scope, speed, property);
        public static void BindSwingAxisLerp(this CharacterJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.swingAxis = Vector3.Lerp(obj.swingAxis, func(), speed * Time.smoothDeltaTime));
        public static void BindSwingAxisLerp(this CharacterJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindSwingAxisLerp(obj, Bindings2._scope, speed, func);
        public static void BindSwingAxisTowards(this CharacterJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.swingAxis = Vector3.MoveTowards(obj.swingAxis, property.Value, speed * Time.smoothDeltaTime));
        public static void BindSwingAxisTowards(this CharacterJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindSwingAxisTowards(obj, Bindings2._scope, speed, property);
        public static void BindSwingAxisTowards(this CharacterJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.swingAxis = Vector3.MoveTowards(obj.swingAxis, func(), speed * Time.smoothDeltaTime));
        public static void BindSwingAxisTowards(this CharacterJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindSwingAxisTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateSwingAxis(this CharacterJoint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.swingAxis = Vector3.Lerp(start, end, t));
        public static void AnimateSwingAxis(this CharacterJoint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateSwingAxis(obj, Bindings2._scope, start, end, curve);
        public static void AnimateSwingAxis(this CharacterJoint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateSwingAxis(obj, Bindings2._scope, obj.swingAxis, end, curve);
        public static void AnimateSwingAxis(this CharacterJoint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateSwingAxis(obj, Bindings2._scope, end, curve);
        public static void BindTwistLimitSpring(this CharacterJoint obj, Bindings2 bindings, IProperty<UnityEngine.SoftJointLimitSpring> property)
            => bindings.Bind(property, v => obj.twistLimitSpring = v);
        public static void BindTwistLimitSpring(this CharacterJoint obj, IProperty<UnityEngine.SoftJointLimitSpring> property)
            => BindTwistLimitSpring(obj, Bindings2._scope, property);
        public static void BindTwistLimitSpring(this CharacterJoint obj, Bindings2 bindings, Func<UnityEngine.SoftJointLimitSpring> func)
            => bindings.BindUpdate(() => obj.twistLimitSpring = func());
        public static void BindTwistLimitSpring(this CharacterJoint obj, Func<UnityEngine.SoftJointLimitSpring> func)
            => BindTwistLimitSpring(obj, Bindings2._scope, func);
        public static void BindTwistLimitSpringInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.SoftJointLimitSpring> func)
            => bindings.BindInterval(seconds, () => obj.twistLimitSpring = func());
        public static void BindTwistLimitSpringInterval(this CharacterJoint obj, float seconds, Func<UnityEngine.SoftJointLimitSpring> func)
            => BindTwistLimitSpringInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLowTwistLimit(this CharacterJoint obj, Bindings2 bindings, IProperty<UnityEngine.SoftJointLimit> property)
            => bindings.Bind(property, v => obj.lowTwistLimit = v);
        public static void BindLowTwistLimit(this CharacterJoint obj, IProperty<UnityEngine.SoftJointLimit> property)
            => BindLowTwistLimit(obj, Bindings2._scope, property);
        public static void BindLowTwistLimit(this CharacterJoint obj, Bindings2 bindings, Func<UnityEngine.SoftJointLimit> func)
            => bindings.BindUpdate(() => obj.lowTwistLimit = func());
        public static void BindLowTwistLimit(this CharacterJoint obj, Func<UnityEngine.SoftJointLimit> func)
            => BindLowTwistLimit(obj, Bindings2._scope, func);
        public static void BindLowTwistLimitInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.SoftJointLimit> func)
            => bindings.BindInterval(seconds, () => obj.lowTwistLimit = func());
        public static void BindLowTwistLimitInterval(this CharacterJoint obj, float seconds, Func<UnityEngine.SoftJointLimit> func)
            => BindLowTwistLimitInterval(obj, Bindings2._scope, seconds, func);
        public static void BindHighTwistLimit(this CharacterJoint obj, Bindings2 bindings, IProperty<UnityEngine.SoftJointLimit> property)
            => bindings.Bind(property, v => obj.highTwistLimit = v);
        public static void BindHighTwistLimit(this CharacterJoint obj, IProperty<UnityEngine.SoftJointLimit> property)
            => BindHighTwistLimit(obj, Bindings2._scope, property);
        public static void BindHighTwistLimit(this CharacterJoint obj, Bindings2 bindings, Func<UnityEngine.SoftJointLimit> func)
            => bindings.BindUpdate(() => obj.highTwistLimit = func());
        public static void BindHighTwistLimit(this CharacterJoint obj, Func<UnityEngine.SoftJointLimit> func)
            => BindHighTwistLimit(obj, Bindings2._scope, func);
        public static void BindHighTwistLimitInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.SoftJointLimit> func)
            => bindings.BindInterval(seconds, () => obj.highTwistLimit = func());
        public static void BindHighTwistLimitInterval(this CharacterJoint obj, float seconds, Func<UnityEngine.SoftJointLimit> func)
            => BindHighTwistLimitInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSwingLimitSpring(this CharacterJoint obj, Bindings2 bindings, IProperty<UnityEngine.SoftJointLimitSpring> property)
            => bindings.Bind(property, v => obj.swingLimitSpring = v);
        public static void BindSwingLimitSpring(this CharacterJoint obj, IProperty<UnityEngine.SoftJointLimitSpring> property)
            => BindSwingLimitSpring(obj, Bindings2._scope, property);
        public static void BindSwingLimitSpring(this CharacterJoint obj, Bindings2 bindings, Func<UnityEngine.SoftJointLimitSpring> func)
            => bindings.BindUpdate(() => obj.swingLimitSpring = func());
        public static void BindSwingLimitSpring(this CharacterJoint obj, Func<UnityEngine.SoftJointLimitSpring> func)
            => BindSwingLimitSpring(obj, Bindings2._scope, func);
        public static void BindSwingLimitSpringInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.SoftJointLimitSpring> func)
            => bindings.BindInterval(seconds, () => obj.swingLimitSpring = func());
        public static void BindSwingLimitSpringInterval(this CharacterJoint obj, float seconds, Func<UnityEngine.SoftJointLimitSpring> func)
            => BindSwingLimitSpringInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSwing1Limit(this CharacterJoint obj, Bindings2 bindings, IProperty<UnityEngine.SoftJointLimit> property)
            => bindings.Bind(property, v => obj.swing1Limit = v);
        public static void BindSwing1Limit(this CharacterJoint obj, IProperty<UnityEngine.SoftJointLimit> property)
            => BindSwing1Limit(obj, Bindings2._scope, property);
        public static void BindSwing1Limit(this CharacterJoint obj, Bindings2 bindings, Func<UnityEngine.SoftJointLimit> func)
            => bindings.BindUpdate(() => obj.swing1Limit = func());
        public static void BindSwing1Limit(this CharacterJoint obj, Func<UnityEngine.SoftJointLimit> func)
            => BindSwing1Limit(obj, Bindings2._scope, func);
        public static void BindSwing1LimitInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.SoftJointLimit> func)
            => bindings.BindInterval(seconds, () => obj.swing1Limit = func());
        public static void BindSwing1LimitInterval(this CharacterJoint obj, float seconds, Func<UnityEngine.SoftJointLimit> func)
            => BindSwing1LimitInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSwing2Limit(this CharacterJoint obj, Bindings2 bindings, IProperty<UnityEngine.SoftJointLimit> property)
            => bindings.Bind(property, v => obj.swing2Limit = v);
        public static void BindSwing2Limit(this CharacterJoint obj, IProperty<UnityEngine.SoftJointLimit> property)
            => BindSwing2Limit(obj, Bindings2._scope, property);
        public static void BindSwing2Limit(this CharacterJoint obj, Bindings2 bindings, Func<UnityEngine.SoftJointLimit> func)
            => bindings.BindUpdate(() => obj.swing2Limit = func());
        public static void BindSwing2Limit(this CharacterJoint obj, Func<UnityEngine.SoftJointLimit> func)
            => BindSwing2Limit(obj, Bindings2._scope, func);
        public static void BindSwing2LimitInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.SoftJointLimit> func)
            => bindings.BindInterval(seconds, () => obj.swing2Limit = func());
        public static void BindSwing2LimitInterval(this CharacterJoint obj, float seconds, Func<UnityEngine.SoftJointLimit> func)
            => BindSwing2LimitInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEnableProjection(this CharacterJoint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enableProjection = v);
        public static void BindEnableProjection(this CharacterJoint obj, IProperty<System.Boolean> property)
            => BindEnableProjection(obj, Bindings2._scope, property);
        public static void BindEnableProjection(this CharacterJoint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enableProjection = func());
        public static void BindEnableProjection(this CharacterJoint obj, Func<System.Boolean> func)
            => BindEnableProjection(obj, Bindings2._scope, func);
        public static void BindEnableProjectionInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enableProjection = func());
        public static void BindEnableProjectionInterval(this CharacterJoint obj, float seconds, Func<System.Boolean> func)
            => BindEnableProjectionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindProjectionDistance(this CharacterJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.projectionDistance = v);
        public static void BindProjectionDistance(this CharacterJoint obj, IProperty<System.Single> property)
            => BindProjectionDistance(obj, Bindings2._scope, property);
        public static void BindProjectionDistance(this CharacterJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.projectionDistance = func());
        public static void BindProjectionDistance(this CharacterJoint obj, Func<System.Single> func)
            => BindProjectionDistance(obj, Bindings2._scope, func);
        public static void BindProjectionDistanceInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.projectionDistance = func());
        public static void BindProjectionDistanceInterval(this CharacterJoint obj, float seconds, Func<System.Single> func)
            => BindProjectionDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindProjectionAngle(this CharacterJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.projectionAngle = v);
        public static void BindProjectionAngle(this CharacterJoint obj, IProperty<System.Single> property)
            => BindProjectionAngle(obj, Bindings2._scope, property);
        public static void BindProjectionAngle(this CharacterJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.projectionAngle = func());
        public static void BindProjectionAngle(this CharacterJoint obj, Func<System.Single> func)
            => BindProjectionAngle(obj, Bindings2._scope, func);
        public static void BindProjectionAngleInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.projectionAngle = func());
        public static void BindProjectionAngleInterval(this CharacterJoint obj, float seconds, Func<System.Single> func)
            => BindProjectionAngleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakForce(this CharacterJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakForce = v);
        public static void BindBreakForce(this CharacterJoint obj, IProperty<System.Single> property)
            => BindBreakForce(obj, Bindings2._scope, property);
        public static void BindBreakForce(this CharacterJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakForce = func());
        public static void BindBreakForce(this CharacterJoint obj, Func<System.Single> func)
            => BindBreakForce(obj, Bindings2._scope, func);
        public static void BindBreakForceInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakForce = func());
        public static void BindBreakForceInterval(this CharacterJoint obj, float seconds, Func<System.Single> func)
            => BindBreakForceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakTorque(this CharacterJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakTorque = v);
        public static void BindBreakTorque(this CharacterJoint obj, IProperty<System.Single> property)
            => BindBreakTorque(obj, Bindings2._scope, property);
        public static void BindBreakTorque(this CharacterJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakTorque = func());
        public static void BindBreakTorque(this CharacterJoint obj, Func<System.Single> func)
            => BindBreakTorque(obj, Bindings2._scope, func);
        public static void BindBreakTorqueInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakTorque = func());
        public static void BindBreakTorqueInterval(this CharacterJoint obj, float seconds, Func<System.Single> func)
            => BindBreakTorqueInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEnableCollision(this CharacterJoint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enableCollision = v);
        public static void BindEnableCollision(this CharacterJoint obj, IProperty<System.Boolean> property)
            => BindEnableCollision(obj, Bindings2._scope, property);
        public static void BindEnableCollision(this CharacterJoint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enableCollision = func());
        public static void BindEnableCollision(this CharacterJoint obj, Func<System.Boolean> func)
            => BindEnableCollision(obj, Bindings2._scope, func);
        public static void BindEnableCollisionInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enableCollision = func());
        public static void BindEnableCollisionInterval(this CharacterJoint obj, float seconds, Func<System.Boolean> func)
            => BindEnableCollisionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEnablePreprocessing(this CharacterJoint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enablePreprocessing = v);
        public static void BindEnablePreprocessing(this CharacterJoint obj, IProperty<System.Boolean> property)
            => BindEnablePreprocessing(obj, Bindings2._scope, property);
        public static void BindEnablePreprocessing(this CharacterJoint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enablePreprocessing = func());
        public static void BindEnablePreprocessing(this CharacterJoint obj, Func<System.Boolean> func)
            => BindEnablePreprocessing(obj, Bindings2._scope, func);
        public static void BindEnablePreprocessingInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enablePreprocessing = func());
        public static void BindEnablePreprocessingInterval(this CharacterJoint obj, float seconds, Func<System.Boolean> func)
            => BindEnablePreprocessingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMassScale(this CharacterJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.massScale = v);
        public static void BindMassScale(this CharacterJoint obj, IProperty<System.Single> property)
            => BindMassScale(obj, Bindings2._scope, property);
        public static void BindMassScale(this CharacterJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.massScale = func());
        public static void BindMassScale(this CharacterJoint obj, Func<System.Single> func)
            => BindMassScale(obj, Bindings2._scope, func);
        public static void BindMassScaleInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.massScale = func());
        public static void BindMassScaleInterval(this CharacterJoint obj, float seconds, Func<System.Single> func)
            => BindMassScaleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedMassScale(this CharacterJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.connectedMassScale = v);
        public static void BindConnectedMassScale(this CharacterJoint obj, IProperty<System.Single> property)
            => BindConnectedMassScale(obj, Bindings2._scope, property);
        public static void BindConnectedMassScale(this CharacterJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.connectedMassScale = func());
        public static void BindConnectedMassScale(this CharacterJoint obj, Func<System.Single> func)
            => BindConnectedMassScale(obj, Bindings2._scope, func);
        public static void BindConnectedMassScaleInterval(this CharacterJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.connectedMassScale = func());
        public static void BindConnectedMassScaleInterval(this CharacterJoint obj, float seconds, Func<System.Single> func)
            => BindConnectedMassScaleInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindSharedMaterial(this CircleCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.PhysicsMaterial2D> property)
            => bindings.Bind(property, v => obj.sharedMaterial = v);
        public static void BindSharedMaterial(this CircleCollider2D obj, IProperty<UnityEngine.PhysicsMaterial2D> property)
            => BindSharedMaterial(obj, Bindings2._scope, property);
        public static void BindSharedMaterial(this CircleCollider2D obj, Bindings2 bindings, Func<UnityEngine.PhysicsMaterial2D> func)
            => bindings.BindUpdate(() => obj.sharedMaterial = func());
        public static void BindSharedMaterial(this CircleCollider2D obj, Func<UnityEngine.PhysicsMaterial2D> func)
            => BindSharedMaterial(obj, Bindings2._scope, func);
        public static void BindSharedMaterialInterval(this CircleCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.PhysicsMaterial2D> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterial = func());
        public static void BindSharedMaterialInterval(this CircleCollider2D obj, float seconds, Func<UnityEngine.PhysicsMaterial2D> func)
            => BindSharedMaterialInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIsTrigger(this CircleCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isTrigger = v);
        public static void BindIsTrigger(this CircleCollider2D obj, IProperty<System.Boolean> property)
            => BindIsTrigger(obj, Bindings2._scope, property);
        public static void BindIsTrigger(this CircleCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isTrigger = func());
        public static void BindIsTrigger(this CircleCollider2D obj, Func<System.Boolean> func)
            => BindIsTrigger(obj, Bindings2._scope, func);
        public static void BindIsTriggerInterval(this CircleCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isTrigger = func());
        public static void BindIsTriggerInterval(this CircleCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindIsTriggerInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUsedByEffector(this CircleCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.usedByEffector = v);
        public static void BindUsedByEffector(this CircleCollider2D obj, IProperty<System.Boolean> property)
            => BindUsedByEffector(obj, Bindings2._scope, property);
        public static void BindUsedByEffector(this CircleCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.usedByEffector = func());
        public static void BindUsedByEffector(this CircleCollider2D obj, Func<System.Boolean> func)
            => BindUsedByEffector(obj, Bindings2._scope, func);
        public static void BindUsedByEffectorInterval(this CircleCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.usedByEffector = func());
        public static void BindUsedByEffectorInterval(this CircleCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindUsedByEffectorInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_2023_1_OR_NEWER
        public static void BindUsedByComposite(this CircleCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.usedByComposite = v);
        public static void BindUsedByComposite(this CircleCollider2D obj, IProperty<System.Boolean> property)
            => BindUsedByComposite(obj, Bindings2._scope, property);
        public static void BindUsedByComposite(this CircleCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.usedByComposite = func());
        public static void BindUsedByComposite(this CircleCollider2D obj, Func<System.Boolean> func)
            => BindUsedByComposite(obj, Bindings2._scope, func);
        public static void BindUsedByCompositeInterval(this CircleCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.usedByComposite = func());
        public static void BindUsedByCompositeInterval(this CircleCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindUsedByCompositeInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_2023_1_OR_NEWER
        public static void BindCompositeOperation(this CircleCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.Collider2D.CompositeOperation> property)
            => bindings.Bind(property, v => obj.compositeOperation = v);
        public static void BindCompositeOperation(this CircleCollider2D obj, IProperty<UnityEngine.Collider2D.CompositeOperation> property)
            => BindCompositeOperation(obj, Bindings2._scope, property);
        public static void BindCompositeOperation(this CircleCollider2D obj, Bindings2 bindings, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => bindings.BindUpdate(() => obj.compositeOperation = func());
        public static void BindCompositeOperation(this CircleCollider2D obj, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => BindCompositeOperation(obj, Bindings2._scope, func);
        public static void BindCompositeOperationInterval(this CircleCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => bindings.BindInterval(seconds, () => obj.compositeOperation = func());
        public static void BindCompositeOperationInterval(this CircleCollider2D obj, float seconds, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => BindCompositeOperationInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindOffset(this CircleCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.offset = v);
        public static void BindOffset(this CircleCollider2D obj, IProperty<UnityEngine.Vector2> property)
            => BindOffset(obj, Bindings2._scope, property);
        public static void BindOffset(this CircleCollider2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.offset = func());
        public static void BindOffset(this CircleCollider2D obj, Func<UnityEngine.Vector2> func)
            => BindOffset(obj, Bindings2._scope, func);
        public static void BindOffsetInterval(this CircleCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.offset = func());
        public static void BindOffsetInterval(this CircleCollider2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindOffsetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRadius(this CircleCollider2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.radius = v);
        public static void BindRadius(this CircleCollider2D obj, IProperty<System.Single> property)
            => BindRadius(obj, Bindings2._scope, property);
        public static void BindRadius(this CircleCollider2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.radius = func());
        public static void BindRadius(this CircleCollider2D obj, Func<System.Single> func)
            => BindRadius(obj, Bindings2._scope, func);
        public static void BindRadiusInterval(this CircleCollider2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.radius = func());
        public static void BindRadiusInterval(this CircleCollider2D obj, float seconds, Func<System.Single> func)
            => BindRadiusInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_CLOTH
        public static void BindStretchingStiffness(this Cloth obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.stretchingStiffness = v);
        public static void BindStretchingStiffness(this Cloth obj, IProperty<System.Single> property)
            => BindStretchingStiffness(obj, Bindings2._scope, property);
        public static void BindStretchingStiffness(this Cloth obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.stretchingStiffness = func());
        public static void BindStretchingStiffness(this Cloth obj, Func<System.Single> func)
            => BindStretchingStiffness(obj, Bindings2._scope, func);
        public static void BindStretchingStiffnessInterval(this Cloth obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.stretchingStiffness = func());
        public static void BindStretchingStiffnessInterval(this Cloth obj, float seconds, Func<System.Single> func)
            => BindStretchingStiffnessInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBendingStiffness(this Cloth obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.bendingStiffness = v);
        public static void BindBendingStiffness(this Cloth obj, IProperty<System.Single> property)
            => BindBendingStiffness(obj, Bindings2._scope, property);
        public static void BindBendingStiffness(this Cloth obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.bendingStiffness = func());
        public static void BindBendingStiffness(this Cloth obj, Func<System.Single> func)
            => BindBendingStiffness(obj, Bindings2._scope, func);
        public static void BindBendingStiffnessInterval(this Cloth obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.bendingStiffness = func());
        public static void BindBendingStiffnessInterval(this Cloth obj, float seconds, Func<System.Single> func)
            => BindBendingStiffnessInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseTethers(this Cloth obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useTethers = v);
        public static void BindUseTethers(this Cloth obj, IProperty<System.Boolean> property)
            => BindUseTethers(obj, Bindings2._scope, property);
        public static void BindUseTethers(this Cloth obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useTethers = func());
        public static void BindUseTethers(this Cloth obj, Func<System.Boolean> func)
            => BindUseTethers(obj, Bindings2._scope, func);
        public static void BindUseTethersInterval(this Cloth obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useTethers = func());
        public static void BindUseTethersInterval(this Cloth obj, float seconds, Func<System.Boolean> func)
            => BindUseTethersInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseGravity(this Cloth obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useGravity = v);
        public static void BindUseGravity(this Cloth obj, IProperty<System.Boolean> property)
            => BindUseGravity(obj, Bindings2._scope, property);
        public static void BindUseGravity(this Cloth obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useGravity = func());
        public static void BindUseGravity(this Cloth obj, Func<System.Boolean> func)
            => BindUseGravity(obj, Bindings2._scope, func);
        public static void BindUseGravityInterval(this Cloth obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useGravity = func());
        public static void BindUseGravityInterval(this Cloth obj, float seconds, Func<System.Boolean> func)
            => BindUseGravityInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDamping(this Cloth obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.damping = v);
        public static void BindDamping(this Cloth obj, IProperty<System.Single> property)
            => BindDamping(obj, Bindings2._scope, property);
        public static void BindDamping(this Cloth obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.damping = func());
        public static void BindDamping(this Cloth obj, Func<System.Single> func)
            => BindDamping(obj, Bindings2._scope, func);
        public static void BindDampingInterval(this Cloth obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.damping = func());
        public static void BindDampingInterval(this Cloth obj, float seconds, Func<System.Single> func)
            => BindDampingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindExternalAcceleration(this Cloth obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.externalAcceleration = v);
        public static void BindExternalAcceleration(this Cloth obj, IProperty<UnityEngine.Vector3> property)
            => BindExternalAcceleration(obj, Bindings2._scope, property);
        public static void BindExternalAcceleration(this Cloth obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.externalAcceleration = func());
        public static void BindExternalAcceleration(this Cloth obj, Func<UnityEngine.Vector3> func)
            => BindExternalAcceleration(obj, Bindings2._scope, func);
        public static void BindExternalAccelerationInterval(this Cloth obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.externalAcceleration = func());
        public static void BindExternalAccelerationInterval(this Cloth obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindExternalAccelerationInterval(obj, Bindings2._scope, seconds, func);
        public static void BindExternalAccelerationLerp(this Cloth obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.externalAcceleration = Vector3.Lerp(obj.externalAcceleration, property.Value, speed * Time.smoothDeltaTime));
        public static void BindExternalAccelerationLerp(this Cloth obj, float speed, Property<UnityEngine.Vector3> property)
            => BindExternalAccelerationLerp(obj, Bindings2._scope, speed, property);
        public static void BindExternalAccelerationLerp(this Cloth obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.externalAcceleration = Vector3.Lerp(obj.externalAcceleration, func(), speed * Time.smoothDeltaTime));
        public static void BindExternalAccelerationLerp(this Cloth obj, float speed, Func<UnityEngine.Vector3> func)
            => BindExternalAccelerationLerp(obj, Bindings2._scope, speed, func);
        public static void BindExternalAccelerationTowards(this Cloth obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.externalAcceleration = Vector3.MoveTowards(obj.externalAcceleration, property.Value, speed * Time.smoothDeltaTime));
        public static void BindExternalAccelerationTowards(this Cloth obj, float speed, Property<UnityEngine.Vector3> property)
            => BindExternalAccelerationTowards(obj, Bindings2._scope, speed, property);
        public static void BindExternalAccelerationTowards(this Cloth obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.externalAcceleration = Vector3.MoveTowards(obj.externalAcceleration, func(), speed * Time.smoothDeltaTime));
        public static void BindExternalAccelerationTowards(this Cloth obj, float speed, Func<UnityEngine.Vector3> func)
            => BindExternalAccelerationTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateExternalAcceleration(this Cloth obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.externalAcceleration = Vector3.Lerp(start, end, t));
        public static void AnimateExternalAcceleration(this Cloth obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateExternalAcceleration(obj, Bindings2._scope, start, end, curve);
        public static void AnimateExternalAcceleration(this Cloth obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateExternalAcceleration(obj, Bindings2._scope, obj.externalAcceleration, end, curve);
        public static void AnimateExternalAcceleration(this Cloth obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateExternalAcceleration(obj, Bindings2._scope, end, curve);
        public static void BindRandomAcceleration(this Cloth obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.randomAcceleration = v);
        public static void BindRandomAcceleration(this Cloth obj, IProperty<UnityEngine.Vector3> property)
            => BindRandomAcceleration(obj, Bindings2._scope, property);
        public static void BindRandomAcceleration(this Cloth obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.randomAcceleration = func());
        public static void BindRandomAcceleration(this Cloth obj, Func<UnityEngine.Vector3> func)
            => BindRandomAcceleration(obj, Bindings2._scope, func);
        public static void BindRandomAccelerationInterval(this Cloth obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.randomAcceleration = func());
        public static void BindRandomAccelerationInterval(this Cloth obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindRandomAccelerationInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRandomAccelerationLerp(this Cloth obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.randomAcceleration = Vector3.Lerp(obj.randomAcceleration, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRandomAccelerationLerp(this Cloth obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRandomAccelerationLerp(obj, Bindings2._scope, speed, property);
        public static void BindRandomAccelerationLerp(this Cloth obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.randomAcceleration = Vector3.Lerp(obj.randomAcceleration, func(), speed * Time.smoothDeltaTime));
        public static void BindRandomAccelerationLerp(this Cloth obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRandomAccelerationLerp(obj, Bindings2._scope, speed, func);
        public static void BindRandomAccelerationTowards(this Cloth obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.randomAcceleration = Vector3.MoveTowards(obj.randomAcceleration, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRandomAccelerationTowards(this Cloth obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRandomAccelerationTowards(obj, Bindings2._scope, speed, property);
        public static void BindRandomAccelerationTowards(this Cloth obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.randomAcceleration = Vector3.MoveTowards(obj.randomAcceleration, func(), speed * Time.smoothDeltaTime));
        public static void BindRandomAccelerationTowards(this Cloth obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRandomAccelerationTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateRandomAcceleration(this Cloth obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.randomAcceleration = Vector3.Lerp(start, end, t));
        public static void AnimateRandomAcceleration(this Cloth obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRandomAcceleration(obj, Bindings2._scope, start, end, curve);
        public static void AnimateRandomAcceleration(this Cloth obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRandomAcceleration(obj, Bindings2._scope, obj.randomAcceleration, end, curve);
        public static void AnimateRandomAcceleration(this Cloth obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRandomAcceleration(obj, Bindings2._scope, end, curve);
        public static void BindWorldVelocityScale(this Cloth obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.worldVelocityScale = v);
        public static void BindWorldVelocityScale(this Cloth obj, IProperty<System.Single> property)
            => BindWorldVelocityScale(obj, Bindings2._scope, property);
        public static void BindWorldVelocityScale(this Cloth obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.worldVelocityScale = func());
        public static void BindWorldVelocityScale(this Cloth obj, Func<System.Single> func)
            => BindWorldVelocityScale(obj, Bindings2._scope, func);
        public static void BindWorldVelocityScaleInterval(this Cloth obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.worldVelocityScale = func());
        public static void BindWorldVelocityScaleInterval(this Cloth obj, float seconds, Func<System.Single> func)
            => BindWorldVelocityScaleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWorldAccelerationScale(this Cloth obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.worldAccelerationScale = v);
        public static void BindWorldAccelerationScale(this Cloth obj, IProperty<System.Single> property)
            => BindWorldAccelerationScale(obj, Bindings2._scope, property);
        public static void BindWorldAccelerationScale(this Cloth obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.worldAccelerationScale = func());
        public static void BindWorldAccelerationScale(this Cloth obj, Func<System.Single> func)
            => BindWorldAccelerationScale(obj, Bindings2._scope, func);
        public static void BindWorldAccelerationScaleInterval(this Cloth obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.worldAccelerationScale = func());
        public static void BindWorldAccelerationScaleInterval(this Cloth obj, float seconds, Func<System.Single> func)
            => BindWorldAccelerationScaleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFriction(this Cloth obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.friction = v);
        public static void BindFriction(this Cloth obj, IProperty<System.Single> property)
            => BindFriction(obj, Bindings2._scope, property);
        public static void BindFriction(this Cloth obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.friction = func());
        public static void BindFriction(this Cloth obj, Func<System.Single> func)
            => BindFriction(obj, Bindings2._scope, func);
        public static void BindFrictionInterval(this Cloth obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.friction = func());
        public static void BindFrictionInterval(this Cloth obj, float seconds, Func<System.Single> func)
            => BindFrictionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCollisionMassScale(this Cloth obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.collisionMassScale = v);
        public static void BindCollisionMassScale(this Cloth obj, IProperty<System.Single> property)
            => BindCollisionMassScale(obj, Bindings2._scope, property);
        public static void BindCollisionMassScale(this Cloth obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.collisionMassScale = func());
        public static void BindCollisionMassScale(this Cloth obj, Func<System.Single> func)
            => BindCollisionMassScale(obj, Bindings2._scope, func);
        public static void BindCollisionMassScaleInterval(this Cloth obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.collisionMassScale = func());
        public static void BindCollisionMassScaleInterval(this Cloth obj, float seconds, Func<System.Single> func)
            => BindCollisionMassScaleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEnableContinuousCollision(this Cloth obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enableContinuousCollision = v);
        public static void BindEnableContinuousCollision(this Cloth obj, IProperty<System.Boolean> property)
            => BindEnableContinuousCollision(obj, Bindings2._scope, property);
        public static void BindEnableContinuousCollision(this Cloth obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enableContinuousCollision = func());
        public static void BindEnableContinuousCollision(this Cloth obj, Func<System.Boolean> func)
            => BindEnableContinuousCollision(obj, Bindings2._scope, func);
        public static void BindEnableContinuousCollisionInterval(this Cloth obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enableContinuousCollision = func());
        public static void BindEnableContinuousCollisionInterval(this Cloth obj, float seconds, Func<System.Boolean> func)
            => BindEnableContinuousCollisionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseVirtualParticles(this Cloth obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.useVirtualParticles = v);
        public static void BindUseVirtualParticles(this Cloth obj, IProperty<System.Single> property)
            => BindUseVirtualParticles(obj, Bindings2._scope, property);
        public static void BindUseVirtualParticles(this Cloth obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.useVirtualParticles = func());
        public static void BindUseVirtualParticles(this Cloth obj, Func<System.Single> func)
            => BindUseVirtualParticles(obj, Bindings2._scope, func);
        public static void BindUseVirtualParticlesInterval(this Cloth obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.useVirtualParticles = func());
        public static void BindUseVirtualParticlesInterval(this Cloth obj, float seconds, Func<System.Single> func)
            => BindUseVirtualParticlesInterval(obj, Bindings2._scope, seconds, func);
        public static void BindClothSolverFrequency(this Cloth obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.clothSolverFrequency = v);
        public static void BindClothSolverFrequency(this Cloth obj, IProperty<System.Single> property)
            => BindClothSolverFrequency(obj, Bindings2._scope, property);
        public static void BindClothSolverFrequency(this Cloth obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.clothSolverFrequency = func());
        public static void BindClothSolverFrequency(this Cloth obj, Func<System.Single> func)
            => BindClothSolverFrequency(obj, Bindings2._scope, func);
        public static void BindClothSolverFrequencyInterval(this Cloth obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.clothSolverFrequency = func());
        public static void BindClothSolverFrequencyInterval(this Cloth obj, float seconds, Func<System.Single> func)
            => BindClothSolverFrequencyInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSleepThreshold(this Cloth obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.sleepThreshold = v);
        public static void BindSleepThreshold(this Cloth obj, IProperty<System.Single> property)
            => BindSleepThreshold(obj, Bindings2._scope, property);
        public static void BindSleepThreshold(this Cloth obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.sleepThreshold = func());
        public static void BindSleepThreshold(this Cloth obj, Func<System.Single> func)
            => BindSleepThreshold(obj, Bindings2._scope, func);
        public static void BindSleepThresholdInterval(this Cloth obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.sleepThreshold = func());
        public static void BindSleepThresholdInterval(this Cloth obj, float seconds, Func<System.Single> func)
            => BindSleepThresholdInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCapsuleColliders(this Cloth obj, Bindings2 bindings, IProperty<UnityEngine.CapsuleCollider[]> property)
            => bindings.Bind(property, v => obj.capsuleColliders = v);
        public static void BindCapsuleColliders(this Cloth obj, IProperty<UnityEngine.CapsuleCollider[]> property)
            => BindCapsuleColliders(obj, Bindings2._scope, property);
        public static void BindCapsuleColliders(this Cloth obj, Bindings2 bindings, Func<UnityEngine.CapsuleCollider[]> func)
            => bindings.BindUpdate(() => obj.capsuleColliders = func());
        public static void BindCapsuleColliders(this Cloth obj, Func<UnityEngine.CapsuleCollider[]> func)
            => BindCapsuleColliders(obj, Bindings2._scope, func);
        public static void BindCapsuleCollidersInterval(this Cloth obj, Bindings2 bindings, float seconds, Func<UnityEngine.CapsuleCollider[]> func)
            => bindings.BindInterval(seconds, () => obj.capsuleColliders = func());
        public static void BindCapsuleCollidersInterval(this Cloth obj, float seconds, Func<UnityEngine.CapsuleCollider[]> func)
            => BindCapsuleCollidersInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSphereColliders(this Cloth obj, Bindings2 bindings, IProperty<UnityEngine.ClothSphereColliderPair[]> property)
            => bindings.Bind(property, v => obj.sphereColliders = v);
        public static void BindSphereColliders(this Cloth obj, IProperty<UnityEngine.ClothSphereColliderPair[]> property)
            => BindSphereColliders(obj, Bindings2._scope, property);
        public static void BindSphereColliders(this Cloth obj, Bindings2 bindings, Func<UnityEngine.ClothSphereColliderPair[]> func)
            => bindings.BindUpdate(() => obj.sphereColliders = func());
        public static void BindSphereColliders(this Cloth obj, Func<UnityEngine.ClothSphereColliderPair[]> func)
            => BindSphereColliders(obj, Bindings2._scope, func);
        public static void BindSphereCollidersInterval(this Cloth obj, Bindings2 bindings, float seconds, Func<UnityEngine.ClothSphereColliderPair[]> func)
            => bindings.BindInterval(seconds, () => obj.sphereColliders = func());
        public static void BindSphereCollidersInterval(this Cloth obj, float seconds, Func<UnityEngine.ClothSphereColliderPair[]> func)
            => BindSphereCollidersInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindSharedMaterial(this CompositeCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.PhysicsMaterial2D> property)
            => bindings.Bind(property, v => obj.sharedMaterial = v);
        public static void BindSharedMaterial(this CompositeCollider2D obj, IProperty<UnityEngine.PhysicsMaterial2D> property)
            => BindSharedMaterial(obj, Bindings2._scope, property);
        public static void BindSharedMaterial(this CompositeCollider2D obj, Bindings2 bindings, Func<UnityEngine.PhysicsMaterial2D> func)
            => bindings.BindUpdate(() => obj.sharedMaterial = func());
        public static void BindSharedMaterial(this CompositeCollider2D obj, Func<UnityEngine.PhysicsMaterial2D> func)
            => BindSharedMaterial(obj, Bindings2._scope, func);
        public static void BindSharedMaterialInterval(this CompositeCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.PhysicsMaterial2D> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterial = func());
        public static void BindSharedMaterialInterval(this CompositeCollider2D obj, float seconds, Func<UnityEngine.PhysicsMaterial2D> func)
            => BindSharedMaterialInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIsTrigger(this CompositeCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isTrigger = v);
        public static void BindIsTrigger(this CompositeCollider2D obj, IProperty<System.Boolean> property)
            => BindIsTrigger(obj, Bindings2._scope, property);
        public static void BindIsTrigger(this CompositeCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isTrigger = func());
        public static void BindIsTrigger(this CompositeCollider2D obj, Func<System.Boolean> func)
            => BindIsTrigger(obj, Bindings2._scope, func);
        public static void BindIsTriggerInterval(this CompositeCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isTrigger = func());
        public static void BindIsTriggerInterval(this CompositeCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindIsTriggerInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUsedByEffector(this CompositeCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.usedByEffector = v);
        public static void BindUsedByEffector(this CompositeCollider2D obj, IProperty<System.Boolean> property)
            => BindUsedByEffector(obj, Bindings2._scope, property);
        public static void BindUsedByEffector(this CompositeCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.usedByEffector = func());
        public static void BindUsedByEffector(this CompositeCollider2D obj, Func<System.Boolean> func)
            => BindUsedByEffector(obj, Bindings2._scope, func);
        public static void BindUsedByEffectorInterval(this CompositeCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.usedByEffector = func());
        public static void BindUsedByEffectorInterval(this CompositeCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindUsedByEffectorInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_2023_1_OR_NEWER
        public static void BindUsedByComposite(this CompositeCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.usedByComposite = v);
        public static void BindUsedByComposite(this CompositeCollider2D obj, IProperty<System.Boolean> property)
            => BindUsedByComposite(obj, Bindings2._scope, property);
        public static void BindUsedByComposite(this CompositeCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.usedByComposite = func());
        public static void BindUsedByComposite(this CompositeCollider2D obj, Func<System.Boolean> func)
            => BindUsedByComposite(obj, Bindings2._scope, func);
        public static void BindUsedByCompositeInterval(this CompositeCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.usedByComposite = func());
        public static void BindUsedByCompositeInterval(this CompositeCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindUsedByCompositeInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_2023_1_OR_NEWER
        public static void BindCompositeOperation(this CompositeCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.Collider2D.CompositeOperation> property)
            => bindings.Bind(property, v => obj.compositeOperation = v);
        public static void BindCompositeOperation(this CompositeCollider2D obj, IProperty<UnityEngine.Collider2D.CompositeOperation> property)
            => BindCompositeOperation(obj, Bindings2._scope, property);
        public static void BindCompositeOperation(this CompositeCollider2D obj, Bindings2 bindings, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => bindings.BindUpdate(() => obj.compositeOperation = func());
        public static void BindCompositeOperation(this CompositeCollider2D obj, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => BindCompositeOperation(obj, Bindings2._scope, func);
        public static void BindCompositeOperationInterval(this CompositeCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => bindings.BindInterval(seconds, () => obj.compositeOperation = func());
        public static void BindCompositeOperationInterval(this CompositeCollider2D obj, float seconds, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => BindCompositeOperationInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindOffset(this CompositeCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.offset = v);
        public static void BindOffset(this CompositeCollider2D obj, IProperty<UnityEngine.Vector2> property)
            => BindOffset(obj, Bindings2._scope, property);
        public static void BindOffset(this CompositeCollider2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.offset = func());
        public static void BindOffset(this CompositeCollider2D obj, Func<UnityEngine.Vector2> func)
            => BindOffset(obj, Bindings2._scope, func);
        public static void BindOffsetInterval(this CompositeCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.offset = func());
        public static void BindOffsetInterval(this CompositeCollider2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindOffsetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindGeometryType(this CompositeCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.CompositeCollider2D.GeometryType> property)
            => bindings.Bind(property, v => obj.geometryType = v);
        public static void BindGeometryType(this CompositeCollider2D obj, IProperty<UnityEngine.CompositeCollider2D.GeometryType> property)
            => BindGeometryType(obj, Bindings2._scope, property);
        public static void BindGeometryType(this CompositeCollider2D obj, Bindings2 bindings, Func<UnityEngine.CompositeCollider2D.GeometryType> func)
            => bindings.BindUpdate(() => obj.geometryType = func());
        public static void BindGeometryType(this CompositeCollider2D obj, Func<UnityEngine.CompositeCollider2D.GeometryType> func)
            => BindGeometryType(obj, Bindings2._scope, func);
        public static void BindGeometryTypeInterval(this CompositeCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.CompositeCollider2D.GeometryType> func)
            => bindings.BindInterval(seconds, () => obj.geometryType = func());
        public static void BindGeometryTypeInterval(this CompositeCollider2D obj, float seconds, Func<UnityEngine.CompositeCollider2D.GeometryType> func)
            => BindGeometryTypeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindGenerationType(this CompositeCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.CompositeCollider2D.GenerationType> property)
            => bindings.Bind(property, v => obj.generationType = v);
        public static void BindGenerationType(this CompositeCollider2D obj, IProperty<UnityEngine.CompositeCollider2D.GenerationType> property)
            => BindGenerationType(obj, Bindings2._scope, property);
        public static void BindGenerationType(this CompositeCollider2D obj, Bindings2 bindings, Func<UnityEngine.CompositeCollider2D.GenerationType> func)
            => bindings.BindUpdate(() => obj.generationType = func());
        public static void BindGenerationType(this CompositeCollider2D obj, Func<UnityEngine.CompositeCollider2D.GenerationType> func)
            => BindGenerationType(obj, Bindings2._scope, func);
        public static void BindGenerationTypeInterval(this CompositeCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.CompositeCollider2D.GenerationType> func)
            => bindings.BindInterval(seconds, () => obj.generationType = func());
        public static void BindGenerationTypeInterval(this CompositeCollider2D obj, float seconds, Func<UnityEngine.CompositeCollider2D.GenerationType> func)
            => BindGenerationTypeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindVertexDistance(this CompositeCollider2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.vertexDistance = v);
        public static void BindVertexDistance(this CompositeCollider2D obj, IProperty<System.Single> property)
            => BindVertexDistance(obj, Bindings2._scope, property);
        public static void BindVertexDistance(this CompositeCollider2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.vertexDistance = func());
        public static void BindVertexDistance(this CompositeCollider2D obj, Func<System.Single> func)
            => BindVertexDistance(obj, Bindings2._scope, func);
        public static void BindVertexDistanceInterval(this CompositeCollider2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.vertexDistance = func());
        public static void BindVertexDistanceInterval(this CompositeCollider2D obj, float seconds, Func<System.Single> func)
            => BindVertexDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindOffsetDistance(this CompositeCollider2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.offsetDistance = v);
        public static void BindOffsetDistance(this CompositeCollider2D obj, IProperty<System.Single> property)
            => BindOffsetDistance(obj, Bindings2._scope, property);
        public static void BindOffsetDistance(this CompositeCollider2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.offsetDistance = func());
        public static void BindOffsetDistance(this CompositeCollider2D obj, Func<System.Single> func)
            => BindOffsetDistance(obj, Bindings2._scope, func);
        public static void BindOffsetDistanceInterval(this CompositeCollider2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.offsetDistance = func());
        public static void BindOffsetDistanceInterval(this CompositeCollider2D obj, float seconds, Func<System.Single> func)
            => BindOffsetDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEdgeRadius(this CompositeCollider2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.edgeRadius = v);
        public static void BindEdgeRadius(this CompositeCollider2D obj, IProperty<System.Single> property)
            => BindEdgeRadius(obj, Bindings2._scope, property);
        public static void BindEdgeRadius(this CompositeCollider2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.edgeRadius = func());
        public static void BindEdgeRadius(this CompositeCollider2D obj, Func<System.Single> func)
            => BindEdgeRadius(obj, Bindings2._scope, func);
        public static void BindEdgeRadiusInterval(this CompositeCollider2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.edgeRadius = func());
        public static void BindEdgeRadiusInterval(this CompositeCollider2D obj, float seconds, Func<System.Single> func)
            => BindEdgeRadiusInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS
        public static void BindConnectedBody(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.Rigidbody> property)
            => bindings.Bind(property, v => obj.connectedBody = v);
        public static void BindConnectedBody(this ConfigurableJoint obj, IProperty<UnityEngine.Rigidbody> property)
            => BindConnectedBody(obj, Bindings2._scope, property);
        public static void BindConnectedBody(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.Rigidbody> func)
            => bindings.BindUpdate(() => obj.connectedBody = func());
        public static void BindConnectedBody(this ConfigurableJoint obj, Func<UnityEngine.Rigidbody> func)
            => BindConnectedBody(obj, Bindings2._scope, func);
        public static void BindConnectedBodyInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rigidbody> func)
            => bindings.BindInterval(seconds, () => obj.connectedBody = func());
        public static void BindConnectedBodyInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.Rigidbody> func)
            => BindConnectedBodyInterval(obj, Bindings2._scope, seconds, func);
        #if UNITY_2020_2_OR_NEWER
        public static void BindConnectedArticulationBody(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.ArticulationBody> property)
            => bindings.Bind(property, v => obj.connectedArticulationBody = v);
        public static void BindConnectedArticulationBody(this ConfigurableJoint obj, IProperty<UnityEngine.ArticulationBody> property)
            => BindConnectedArticulationBody(obj, Bindings2._scope, property);
        public static void BindConnectedArticulationBody(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.ArticulationBody> func)
            => bindings.BindUpdate(() => obj.connectedArticulationBody = func());
        public static void BindConnectedArticulationBody(this ConfigurableJoint obj, Func<UnityEngine.ArticulationBody> func)
            => BindConnectedArticulationBody(obj, Bindings2._scope, func);
        public static void BindConnectedArticulationBodyInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.ArticulationBody> func)
            => bindings.BindInterval(seconds, () => obj.connectedArticulationBody = func());
        public static void BindConnectedArticulationBodyInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.ArticulationBody> func)
            => BindConnectedArticulationBodyInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindAnchor(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.anchor = v);
        public static void BindAnchor(this ConfigurableJoint obj, IProperty<UnityEngine.Vector3> property)
            => BindAnchor(obj, Bindings2._scope, property);
        public static void BindAnchor(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.anchor = func());
        public static void BindAnchor(this ConfigurableJoint obj, Func<UnityEngine.Vector3> func)
            => BindAnchor(obj, Bindings2._scope, func);
        public static void BindAnchorInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.anchor = func());
        public static void BindAnchorInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAnchorLerp(this ConfigurableJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.anchor = Vector3.Lerp(obj.anchor, property.Value, speed * Time.smoothDeltaTime));
        public static void BindAnchorLerp(this ConfigurableJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindAnchorLerp(obj, Bindings2._scope, speed, property);
        public static void BindAnchorLerp(this ConfigurableJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.anchor = Vector3.Lerp(obj.anchor, func(), speed * Time.smoothDeltaTime));
        public static void BindAnchorLerp(this ConfigurableJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindAnchorLerp(obj, Bindings2._scope, speed, func);
        public static void BindAnchorTowards(this ConfigurableJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.anchor = Vector3.MoveTowards(obj.anchor, property.Value, speed * Time.smoothDeltaTime));
        public static void BindAnchorTowards(this ConfigurableJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindAnchorTowards(obj, Bindings2._scope, speed, property);
        public static void BindAnchorTowards(this ConfigurableJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.anchor = Vector3.MoveTowards(obj.anchor, func(), speed * Time.smoothDeltaTime));
        public static void BindAnchorTowards(this ConfigurableJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindAnchorTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateAnchor(this ConfigurableJoint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.anchor = Vector3.Lerp(start, end, t));
        public static void AnimateAnchor(this ConfigurableJoint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAnchor(obj, Bindings2._scope, start, end, curve);
        public static void AnimateAnchor(this ConfigurableJoint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAnchor(obj, Bindings2._scope, obj.anchor, end, curve);
        public static void AnimateAnchor(this ConfigurableJoint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAnchor(obj, Bindings2._scope, end, curve);
        public static void BindAxis(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.axis = v);
        public static void BindAxis(this ConfigurableJoint obj, IProperty<UnityEngine.Vector3> property)
            => BindAxis(obj, Bindings2._scope, property);
        public static void BindAxis(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.axis = func());
        public static void BindAxis(this ConfigurableJoint obj, Func<UnityEngine.Vector3> func)
            => BindAxis(obj, Bindings2._scope, func);
        public static void BindAxisInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.axis = func());
        public static void BindAxisInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindAxisInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAxisLerp(this ConfigurableJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.axis = Vector3.Lerp(obj.axis, property.Value, speed * Time.smoothDeltaTime));
        public static void BindAxisLerp(this ConfigurableJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindAxisLerp(obj, Bindings2._scope, speed, property);
        public static void BindAxisLerp(this ConfigurableJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.axis = Vector3.Lerp(obj.axis, func(), speed * Time.smoothDeltaTime));
        public static void BindAxisLerp(this ConfigurableJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindAxisLerp(obj, Bindings2._scope, speed, func);
        public static void BindAxisTowards(this ConfigurableJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.axis = Vector3.MoveTowards(obj.axis, property.Value, speed * Time.smoothDeltaTime));
        public static void BindAxisTowards(this ConfigurableJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindAxisTowards(obj, Bindings2._scope, speed, property);
        public static void BindAxisTowards(this ConfigurableJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.axis = Vector3.MoveTowards(obj.axis, func(), speed * Time.smoothDeltaTime));
        public static void BindAxisTowards(this ConfigurableJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindAxisTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateAxis(this ConfigurableJoint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.axis = Vector3.Lerp(start, end, t));
        public static void AnimateAxis(this ConfigurableJoint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAxis(obj, Bindings2._scope, start, end, curve);
        public static void AnimateAxis(this ConfigurableJoint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAxis(obj, Bindings2._scope, obj.axis, end, curve);
        public static void AnimateAxis(this ConfigurableJoint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAxis(obj, Bindings2._scope, end, curve);
        public static void BindAutoConfigureConnectedAnchor(this ConfigurableJoint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoConfigureConnectedAnchor = v);
        public static void BindAutoConfigureConnectedAnchor(this ConfigurableJoint obj, IProperty<System.Boolean> property)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindAutoConfigureConnectedAnchor(this ConfigurableJoint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchor(this ConfigurableJoint obj, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindAutoConfigureConnectedAnchorInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchorInterval(this ConfigurableJoint obj, float seconds, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedAnchor(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.connectedAnchor = v);
        public static void BindConnectedAnchor(this ConfigurableJoint obj, IProperty<UnityEngine.Vector3> property)
            => BindConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindConnectedAnchor(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = func());
        public static void BindConnectedAnchor(this ConfigurableJoint obj, Func<UnityEngine.Vector3> func)
            => BindConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindConnectedAnchorInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.connectedAnchor = func());
        public static void BindConnectedAnchorInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedAnchorLerp(this ConfigurableJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.connectedAnchor = Vector3.Lerp(obj.connectedAnchor, property.Value, speed * Time.smoothDeltaTime));
        public static void BindConnectedAnchorLerp(this ConfigurableJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindConnectedAnchorLerp(obj, Bindings2._scope, speed, property);
        public static void BindConnectedAnchorLerp(this ConfigurableJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = Vector3.Lerp(obj.connectedAnchor, func(), speed * Time.smoothDeltaTime));
        public static void BindConnectedAnchorLerp(this ConfigurableJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindConnectedAnchorLerp(obj, Bindings2._scope, speed, func);
        public static void BindConnectedAnchorTowards(this ConfigurableJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.connectedAnchor = Vector3.MoveTowards(obj.connectedAnchor, property.Value, speed * Time.smoothDeltaTime));
        public static void BindConnectedAnchorTowards(this ConfigurableJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindConnectedAnchorTowards(obj, Bindings2._scope, speed, property);
        public static void BindConnectedAnchorTowards(this ConfigurableJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = Vector3.MoveTowards(obj.connectedAnchor, func(), speed * Time.smoothDeltaTime));
        public static void BindConnectedAnchorTowards(this ConfigurableJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindConnectedAnchorTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateConnectedAnchor(this ConfigurableJoint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.connectedAnchor = Vector3.Lerp(start, end, t));
        public static void AnimateConnectedAnchor(this ConfigurableJoint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateConnectedAnchor(obj, Bindings2._scope, start, end, curve);
        public static void AnimateConnectedAnchor(this ConfigurableJoint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateConnectedAnchor(obj, Bindings2._scope, obj.connectedAnchor, end, curve);
        public static void AnimateConnectedAnchor(this ConfigurableJoint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateConnectedAnchor(obj, Bindings2._scope, end, curve);
        public static void BindXMotion(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.ConfigurableJointMotion> property)
            => bindings.Bind(property, v => obj.xMotion = v);
        public static void BindXMotion(this ConfigurableJoint obj, IProperty<UnityEngine.ConfigurableJointMotion> property)
            => BindXMotion(obj, Bindings2._scope, property);
        public static void BindXMotion(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.ConfigurableJointMotion> func)
            => bindings.BindUpdate(() => obj.xMotion = func());
        public static void BindXMotion(this ConfigurableJoint obj, Func<UnityEngine.ConfigurableJointMotion> func)
            => BindXMotion(obj, Bindings2._scope, func);
        public static void BindXMotionInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.ConfigurableJointMotion> func)
            => bindings.BindInterval(seconds, () => obj.xMotion = func());
        public static void BindXMotionInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.ConfigurableJointMotion> func)
            => BindXMotionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindYMotion(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.ConfigurableJointMotion> property)
            => bindings.Bind(property, v => obj.yMotion = v);
        public static void BindYMotion(this ConfigurableJoint obj, IProperty<UnityEngine.ConfigurableJointMotion> property)
            => BindYMotion(obj, Bindings2._scope, property);
        public static void BindYMotion(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.ConfigurableJointMotion> func)
            => bindings.BindUpdate(() => obj.yMotion = func());
        public static void BindYMotion(this ConfigurableJoint obj, Func<UnityEngine.ConfigurableJointMotion> func)
            => BindYMotion(obj, Bindings2._scope, func);
        public static void BindYMotionInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.ConfigurableJointMotion> func)
            => bindings.BindInterval(seconds, () => obj.yMotion = func());
        public static void BindYMotionInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.ConfigurableJointMotion> func)
            => BindYMotionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindZMotion(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.ConfigurableJointMotion> property)
            => bindings.Bind(property, v => obj.zMotion = v);
        public static void BindZMotion(this ConfigurableJoint obj, IProperty<UnityEngine.ConfigurableJointMotion> property)
            => BindZMotion(obj, Bindings2._scope, property);
        public static void BindZMotion(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.ConfigurableJointMotion> func)
            => bindings.BindUpdate(() => obj.zMotion = func());
        public static void BindZMotion(this ConfigurableJoint obj, Func<UnityEngine.ConfigurableJointMotion> func)
            => BindZMotion(obj, Bindings2._scope, func);
        public static void BindZMotionInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.ConfigurableJointMotion> func)
            => bindings.BindInterval(seconds, () => obj.zMotion = func());
        public static void BindZMotionInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.ConfigurableJointMotion> func)
            => BindZMotionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAngularXMotion(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.ConfigurableJointMotion> property)
            => bindings.Bind(property, v => obj.angularXMotion = v);
        public static void BindAngularXMotion(this ConfigurableJoint obj, IProperty<UnityEngine.ConfigurableJointMotion> property)
            => BindAngularXMotion(obj, Bindings2._scope, property);
        public static void BindAngularXMotion(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.ConfigurableJointMotion> func)
            => bindings.BindUpdate(() => obj.angularXMotion = func());
        public static void BindAngularXMotion(this ConfigurableJoint obj, Func<UnityEngine.ConfigurableJointMotion> func)
            => BindAngularXMotion(obj, Bindings2._scope, func);
        public static void BindAngularXMotionInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.ConfigurableJointMotion> func)
            => bindings.BindInterval(seconds, () => obj.angularXMotion = func());
        public static void BindAngularXMotionInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.ConfigurableJointMotion> func)
            => BindAngularXMotionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAngularYMotion(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.ConfigurableJointMotion> property)
            => bindings.Bind(property, v => obj.angularYMotion = v);
        public static void BindAngularYMotion(this ConfigurableJoint obj, IProperty<UnityEngine.ConfigurableJointMotion> property)
            => BindAngularYMotion(obj, Bindings2._scope, property);
        public static void BindAngularYMotion(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.ConfigurableJointMotion> func)
            => bindings.BindUpdate(() => obj.angularYMotion = func());
        public static void BindAngularYMotion(this ConfigurableJoint obj, Func<UnityEngine.ConfigurableJointMotion> func)
            => BindAngularYMotion(obj, Bindings2._scope, func);
        public static void BindAngularYMotionInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.ConfigurableJointMotion> func)
            => bindings.BindInterval(seconds, () => obj.angularYMotion = func());
        public static void BindAngularYMotionInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.ConfigurableJointMotion> func)
            => BindAngularYMotionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAngularZMotion(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.ConfigurableJointMotion> property)
            => bindings.Bind(property, v => obj.angularZMotion = v);
        public static void BindAngularZMotion(this ConfigurableJoint obj, IProperty<UnityEngine.ConfigurableJointMotion> property)
            => BindAngularZMotion(obj, Bindings2._scope, property);
        public static void BindAngularZMotion(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.ConfigurableJointMotion> func)
            => bindings.BindUpdate(() => obj.angularZMotion = func());
        public static void BindAngularZMotion(this ConfigurableJoint obj, Func<UnityEngine.ConfigurableJointMotion> func)
            => BindAngularZMotion(obj, Bindings2._scope, func);
        public static void BindAngularZMotionInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.ConfigurableJointMotion> func)
            => bindings.BindInterval(seconds, () => obj.angularZMotion = func());
        public static void BindAngularZMotionInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.ConfigurableJointMotion> func)
            => BindAngularZMotionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLinearLimitSpring(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.SoftJointLimitSpring> property)
            => bindings.Bind(property, v => obj.linearLimitSpring = v);
        public static void BindLinearLimitSpring(this ConfigurableJoint obj, IProperty<UnityEngine.SoftJointLimitSpring> property)
            => BindLinearLimitSpring(obj, Bindings2._scope, property);
        public static void BindLinearLimitSpring(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.SoftJointLimitSpring> func)
            => bindings.BindUpdate(() => obj.linearLimitSpring = func());
        public static void BindLinearLimitSpring(this ConfigurableJoint obj, Func<UnityEngine.SoftJointLimitSpring> func)
            => BindLinearLimitSpring(obj, Bindings2._scope, func);
        public static void BindLinearLimitSpringInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.SoftJointLimitSpring> func)
            => bindings.BindInterval(seconds, () => obj.linearLimitSpring = func());
        public static void BindLinearLimitSpringInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.SoftJointLimitSpring> func)
            => BindLinearLimitSpringInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLinearLimit(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.SoftJointLimit> property)
            => bindings.Bind(property, v => obj.linearLimit = v);
        public static void BindLinearLimit(this ConfigurableJoint obj, IProperty<UnityEngine.SoftJointLimit> property)
            => BindLinearLimit(obj, Bindings2._scope, property);
        public static void BindLinearLimit(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.SoftJointLimit> func)
            => bindings.BindUpdate(() => obj.linearLimit = func());
        public static void BindLinearLimit(this ConfigurableJoint obj, Func<UnityEngine.SoftJointLimit> func)
            => BindLinearLimit(obj, Bindings2._scope, func);
        public static void BindLinearLimitInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.SoftJointLimit> func)
            => bindings.BindInterval(seconds, () => obj.linearLimit = func());
        public static void BindLinearLimitInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.SoftJointLimit> func)
            => BindLinearLimitInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAngularXLimitSpring(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.SoftJointLimitSpring> property)
            => bindings.Bind(property, v => obj.angularXLimitSpring = v);
        public static void BindAngularXLimitSpring(this ConfigurableJoint obj, IProperty<UnityEngine.SoftJointLimitSpring> property)
            => BindAngularXLimitSpring(obj, Bindings2._scope, property);
        public static void BindAngularXLimitSpring(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.SoftJointLimitSpring> func)
            => bindings.BindUpdate(() => obj.angularXLimitSpring = func());
        public static void BindAngularXLimitSpring(this ConfigurableJoint obj, Func<UnityEngine.SoftJointLimitSpring> func)
            => BindAngularXLimitSpring(obj, Bindings2._scope, func);
        public static void BindAngularXLimitSpringInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.SoftJointLimitSpring> func)
            => bindings.BindInterval(seconds, () => obj.angularXLimitSpring = func());
        public static void BindAngularXLimitSpringInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.SoftJointLimitSpring> func)
            => BindAngularXLimitSpringInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLowAngularXLimit(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.SoftJointLimit> property)
            => bindings.Bind(property, v => obj.lowAngularXLimit = v);
        public static void BindLowAngularXLimit(this ConfigurableJoint obj, IProperty<UnityEngine.SoftJointLimit> property)
            => BindLowAngularXLimit(obj, Bindings2._scope, property);
        public static void BindLowAngularXLimit(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.SoftJointLimit> func)
            => bindings.BindUpdate(() => obj.lowAngularXLimit = func());
        public static void BindLowAngularXLimit(this ConfigurableJoint obj, Func<UnityEngine.SoftJointLimit> func)
            => BindLowAngularXLimit(obj, Bindings2._scope, func);
        public static void BindLowAngularXLimitInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.SoftJointLimit> func)
            => bindings.BindInterval(seconds, () => obj.lowAngularXLimit = func());
        public static void BindLowAngularXLimitInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.SoftJointLimit> func)
            => BindLowAngularXLimitInterval(obj, Bindings2._scope, seconds, func);
        public static void BindHighAngularXLimit(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.SoftJointLimit> property)
            => bindings.Bind(property, v => obj.highAngularXLimit = v);
        public static void BindHighAngularXLimit(this ConfigurableJoint obj, IProperty<UnityEngine.SoftJointLimit> property)
            => BindHighAngularXLimit(obj, Bindings2._scope, property);
        public static void BindHighAngularXLimit(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.SoftJointLimit> func)
            => bindings.BindUpdate(() => obj.highAngularXLimit = func());
        public static void BindHighAngularXLimit(this ConfigurableJoint obj, Func<UnityEngine.SoftJointLimit> func)
            => BindHighAngularXLimit(obj, Bindings2._scope, func);
        public static void BindHighAngularXLimitInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.SoftJointLimit> func)
            => bindings.BindInterval(seconds, () => obj.highAngularXLimit = func());
        public static void BindHighAngularXLimitInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.SoftJointLimit> func)
            => BindHighAngularXLimitInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAngularYZLimitSpring(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.SoftJointLimitSpring> property)
            => bindings.Bind(property, v => obj.angularYZLimitSpring = v);
        public static void BindAngularYZLimitSpring(this ConfigurableJoint obj, IProperty<UnityEngine.SoftJointLimitSpring> property)
            => BindAngularYZLimitSpring(obj, Bindings2._scope, property);
        public static void BindAngularYZLimitSpring(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.SoftJointLimitSpring> func)
            => bindings.BindUpdate(() => obj.angularYZLimitSpring = func());
        public static void BindAngularYZLimitSpring(this ConfigurableJoint obj, Func<UnityEngine.SoftJointLimitSpring> func)
            => BindAngularYZLimitSpring(obj, Bindings2._scope, func);
        public static void BindAngularYZLimitSpringInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.SoftJointLimitSpring> func)
            => bindings.BindInterval(seconds, () => obj.angularYZLimitSpring = func());
        public static void BindAngularYZLimitSpringInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.SoftJointLimitSpring> func)
            => BindAngularYZLimitSpringInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAngularYLimit(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.SoftJointLimit> property)
            => bindings.Bind(property, v => obj.angularYLimit = v);
        public static void BindAngularYLimit(this ConfigurableJoint obj, IProperty<UnityEngine.SoftJointLimit> property)
            => BindAngularYLimit(obj, Bindings2._scope, property);
        public static void BindAngularYLimit(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.SoftJointLimit> func)
            => bindings.BindUpdate(() => obj.angularYLimit = func());
        public static void BindAngularYLimit(this ConfigurableJoint obj, Func<UnityEngine.SoftJointLimit> func)
            => BindAngularYLimit(obj, Bindings2._scope, func);
        public static void BindAngularYLimitInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.SoftJointLimit> func)
            => bindings.BindInterval(seconds, () => obj.angularYLimit = func());
        public static void BindAngularYLimitInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.SoftJointLimit> func)
            => BindAngularYLimitInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAngularZLimit(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.SoftJointLimit> property)
            => bindings.Bind(property, v => obj.angularZLimit = v);
        public static void BindAngularZLimit(this ConfigurableJoint obj, IProperty<UnityEngine.SoftJointLimit> property)
            => BindAngularZLimit(obj, Bindings2._scope, property);
        public static void BindAngularZLimit(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.SoftJointLimit> func)
            => bindings.BindUpdate(() => obj.angularZLimit = func());
        public static void BindAngularZLimit(this ConfigurableJoint obj, Func<UnityEngine.SoftJointLimit> func)
            => BindAngularZLimit(obj, Bindings2._scope, func);
        public static void BindAngularZLimitInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.SoftJointLimit> func)
            => bindings.BindInterval(seconds, () => obj.angularZLimit = func());
        public static void BindAngularZLimitInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.SoftJointLimit> func)
            => BindAngularZLimitInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetPosition(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.targetPosition = v);
        public static void BindTargetPosition(this ConfigurableJoint obj, IProperty<UnityEngine.Vector3> property)
            => BindTargetPosition(obj, Bindings2._scope, property);
        public static void BindTargetPosition(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.targetPosition = func());
        public static void BindTargetPosition(this ConfigurableJoint obj, Func<UnityEngine.Vector3> func)
            => BindTargetPosition(obj, Bindings2._scope, func);
        public static void BindTargetPositionInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.targetPosition = func());
        public static void BindTargetPositionInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindTargetPositionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetPositionLerp(this ConfigurableJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.targetPosition = Vector3.Lerp(obj.targetPosition, property.Value, speed * Time.smoothDeltaTime));
        public static void BindTargetPositionLerp(this ConfigurableJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindTargetPositionLerp(obj, Bindings2._scope, speed, property);
        public static void BindTargetPositionLerp(this ConfigurableJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.targetPosition = Vector3.Lerp(obj.targetPosition, func(), speed * Time.smoothDeltaTime));
        public static void BindTargetPositionLerp(this ConfigurableJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindTargetPositionLerp(obj, Bindings2._scope, speed, func);
        public static void BindTargetPositionTowards(this ConfigurableJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.targetPosition = Vector3.MoveTowards(obj.targetPosition, property.Value, speed * Time.smoothDeltaTime));
        public static void BindTargetPositionTowards(this ConfigurableJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindTargetPositionTowards(obj, Bindings2._scope, speed, property);
        public static void BindTargetPositionTowards(this ConfigurableJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.targetPosition = Vector3.MoveTowards(obj.targetPosition, func(), speed * Time.smoothDeltaTime));
        public static void BindTargetPositionTowards(this ConfigurableJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindTargetPositionTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateTargetPosition(this ConfigurableJoint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.targetPosition = Vector3.Lerp(start, end, t));
        public static void AnimateTargetPosition(this ConfigurableJoint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTargetPosition(obj, Bindings2._scope, start, end, curve);
        public static void AnimateTargetPosition(this ConfigurableJoint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTargetPosition(obj, Bindings2._scope, obj.targetPosition, end, curve);
        public static void AnimateTargetPosition(this ConfigurableJoint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTargetPosition(obj, Bindings2._scope, end, curve);
        public static void BindTargetVelocity(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.targetVelocity = v);
        public static void BindTargetVelocity(this ConfigurableJoint obj, IProperty<UnityEngine.Vector3> property)
            => BindTargetVelocity(obj, Bindings2._scope, property);
        public static void BindTargetVelocity(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.targetVelocity = func());
        public static void BindTargetVelocity(this ConfigurableJoint obj, Func<UnityEngine.Vector3> func)
            => BindTargetVelocity(obj, Bindings2._scope, func);
        public static void BindTargetVelocityInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.targetVelocity = func());
        public static void BindTargetVelocityInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindTargetVelocityInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetVelocityLerp(this ConfigurableJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.targetVelocity = Vector3.Lerp(obj.targetVelocity, property.Value, speed * Time.smoothDeltaTime));
        public static void BindTargetVelocityLerp(this ConfigurableJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindTargetVelocityLerp(obj, Bindings2._scope, speed, property);
        public static void BindTargetVelocityLerp(this ConfigurableJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.targetVelocity = Vector3.Lerp(obj.targetVelocity, func(), speed * Time.smoothDeltaTime));
        public static void BindTargetVelocityLerp(this ConfigurableJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindTargetVelocityLerp(obj, Bindings2._scope, speed, func);
        public static void BindTargetVelocityTowards(this ConfigurableJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.targetVelocity = Vector3.MoveTowards(obj.targetVelocity, property.Value, speed * Time.smoothDeltaTime));
        public static void BindTargetVelocityTowards(this ConfigurableJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindTargetVelocityTowards(obj, Bindings2._scope, speed, property);
        public static void BindTargetVelocityTowards(this ConfigurableJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.targetVelocity = Vector3.MoveTowards(obj.targetVelocity, func(), speed * Time.smoothDeltaTime));
        public static void BindTargetVelocityTowards(this ConfigurableJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindTargetVelocityTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateTargetVelocity(this ConfigurableJoint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.targetVelocity = Vector3.Lerp(start, end, t));
        public static void AnimateTargetVelocity(this ConfigurableJoint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTargetVelocity(obj, Bindings2._scope, start, end, curve);
        public static void AnimateTargetVelocity(this ConfigurableJoint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTargetVelocity(obj, Bindings2._scope, obj.targetVelocity, end, curve);
        public static void AnimateTargetVelocity(this ConfigurableJoint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTargetVelocity(obj, Bindings2._scope, end, curve);
        public static void BindXDrive(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.JointDrive> property)
            => bindings.Bind(property, v => obj.xDrive = v);
        public static void BindXDrive(this ConfigurableJoint obj, IProperty<UnityEngine.JointDrive> property)
            => BindXDrive(obj, Bindings2._scope, property);
        public static void BindXDrive(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.JointDrive> func)
            => bindings.BindUpdate(() => obj.xDrive = func());
        public static void BindXDrive(this ConfigurableJoint obj, Func<UnityEngine.JointDrive> func)
            => BindXDrive(obj, Bindings2._scope, func);
        public static void BindXDriveInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.JointDrive> func)
            => bindings.BindInterval(seconds, () => obj.xDrive = func());
        public static void BindXDriveInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.JointDrive> func)
            => BindXDriveInterval(obj, Bindings2._scope, seconds, func);
        public static void BindYDrive(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.JointDrive> property)
            => bindings.Bind(property, v => obj.yDrive = v);
        public static void BindYDrive(this ConfigurableJoint obj, IProperty<UnityEngine.JointDrive> property)
            => BindYDrive(obj, Bindings2._scope, property);
        public static void BindYDrive(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.JointDrive> func)
            => bindings.BindUpdate(() => obj.yDrive = func());
        public static void BindYDrive(this ConfigurableJoint obj, Func<UnityEngine.JointDrive> func)
            => BindYDrive(obj, Bindings2._scope, func);
        public static void BindYDriveInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.JointDrive> func)
            => bindings.BindInterval(seconds, () => obj.yDrive = func());
        public static void BindYDriveInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.JointDrive> func)
            => BindYDriveInterval(obj, Bindings2._scope, seconds, func);
        public static void BindZDrive(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.JointDrive> property)
            => bindings.Bind(property, v => obj.zDrive = v);
        public static void BindZDrive(this ConfigurableJoint obj, IProperty<UnityEngine.JointDrive> property)
            => BindZDrive(obj, Bindings2._scope, property);
        public static void BindZDrive(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.JointDrive> func)
            => bindings.BindUpdate(() => obj.zDrive = func());
        public static void BindZDrive(this ConfigurableJoint obj, Func<UnityEngine.JointDrive> func)
            => BindZDrive(obj, Bindings2._scope, func);
        public static void BindZDriveInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.JointDrive> func)
            => bindings.BindInterval(seconds, () => obj.zDrive = func());
        public static void BindZDriveInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.JointDrive> func)
            => BindZDriveInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetRotation(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.Quaternion> property)
            => bindings.Bind(property, v => obj.targetRotation = v);
        public static void BindTargetRotation(this ConfigurableJoint obj, IProperty<UnityEngine.Quaternion> property)
            => BindTargetRotation(obj, Bindings2._scope, property);
        public static void BindTargetRotation(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.Quaternion> func)
            => bindings.BindUpdate(() => obj.targetRotation = func());
        public static void BindTargetRotation(this ConfigurableJoint obj, Func<UnityEngine.Quaternion> func)
            => BindTargetRotation(obj, Bindings2._scope, func);
        public static void BindTargetRotationInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Quaternion> func)
            => bindings.BindInterval(seconds, () => obj.targetRotation = func());
        public static void BindTargetRotationInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.Quaternion> func)
            => BindTargetRotationInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetAngularVelocity(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.targetAngularVelocity = v);
        public static void BindTargetAngularVelocity(this ConfigurableJoint obj, IProperty<UnityEngine.Vector3> property)
            => BindTargetAngularVelocity(obj, Bindings2._scope, property);
        public static void BindTargetAngularVelocity(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.targetAngularVelocity = func());
        public static void BindTargetAngularVelocity(this ConfigurableJoint obj, Func<UnityEngine.Vector3> func)
            => BindTargetAngularVelocity(obj, Bindings2._scope, func);
        public static void BindTargetAngularVelocityInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.targetAngularVelocity = func());
        public static void BindTargetAngularVelocityInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindTargetAngularVelocityInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetAngularVelocityLerp(this ConfigurableJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.targetAngularVelocity = Vector3.Lerp(obj.targetAngularVelocity, property.Value, speed * Time.smoothDeltaTime));
        public static void BindTargetAngularVelocityLerp(this ConfigurableJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindTargetAngularVelocityLerp(obj, Bindings2._scope, speed, property);
        public static void BindTargetAngularVelocityLerp(this ConfigurableJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.targetAngularVelocity = Vector3.Lerp(obj.targetAngularVelocity, func(), speed * Time.smoothDeltaTime));
        public static void BindTargetAngularVelocityLerp(this ConfigurableJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindTargetAngularVelocityLerp(obj, Bindings2._scope, speed, func);
        public static void BindTargetAngularVelocityTowards(this ConfigurableJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.targetAngularVelocity = Vector3.MoveTowards(obj.targetAngularVelocity, property.Value, speed * Time.smoothDeltaTime));
        public static void BindTargetAngularVelocityTowards(this ConfigurableJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindTargetAngularVelocityTowards(obj, Bindings2._scope, speed, property);
        public static void BindTargetAngularVelocityTowards(this ConfigurableJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.targetAngularVelocity = Vector3.MoveTowards(obj.targetAngularVelocity, func(), speed * Time.smoothDeltaTime));
        public static void BindTargetAngularVelocityTowards(this ConfigurableJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindTargetAngularVelocityTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateTargetAngularVelocity(this ConfigurableJoint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.targetAngularVelocity = Vector3.Lerp(start, end, t));
        public static void AnimateTargetAngularVelocity(this ConfigurableJoint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTargetAngularVelocity(obj, Bindings2._scope, start, end, curve);
        public static void AnimateTargetAngularVelocity(this ConfigurableJoint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTargetAngularVelocity(obj, Bindings2._scope, obj.targetAngularVelocity, end, curve);
        public static void AnimateTargetAngularVelocity(this ConfigurableJoint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTargetAngularVelocity(obj, Bindings2._scope, end, curve);
        public static void BindRotationDriveMode(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.RotationDriveMode> property)
            => bindings.Bind(property, v => obj.rotationDriveMode = v);
        public static void BindRotationDriveMode(this ConfigurableJoint obj, IProperty<UnityEngine.RotationDriveMode> property)
            => BindRotationDriveMode(obj, Bindings2._scope, property);
        public static void BindRotationDriveMode(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.RotationDriveMode> func)
            => bindings.BindUpdate(() => obj.rotationDriveMode = func());
        public static void BindRotationDriveMode(this ConfigurableJoint obj, Func<UnityEngine.RotationDriveMode> func)
            => BindRotationDriveMode(obj, Bindings2._scope, func);
        public static void BindRotationDriveModeInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.RotationDriveMode> func)
            => bindings.BindInterval(seconds, () => obj.rotationDriveMode = func());
        public static void BindRotationDriveModeInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.RotationDriveMode> func)
            => BindRotationDriveModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAngularXDrive(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.JointDrive> property)
            => bindings.Bind(property, v => obj.angularXDrive = v);
        public static void BindAngularXDrive(this ConfigurableJoint obj, IProperty<UnityEngine.JointDrive> property)
            => BindAngularXDrive(obj, Bindings2._scope, property);
        public static void BindAngularXDrive(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.JointDrive> func)
            => bindings.BindUpdate(() => obj.angularXDrive = func());
        public static void BindAngularXDrive(this ConfigurableJoint obj, Func<UnityEngine.JointDrive> func)
            => BindAngularXDrive(obj, Bindings2._scope, func);
        public static void BindAngularXDriveInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.JointDrive> func)
            => bindings.BindInterval(seconds, () => obj.angularXDrive = func());
        public static void BindAngularXDriveInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.JointDrive> func)
            => BindAngularXDriveInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAngularYZDrive(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.JointDrive> property)
            => bindings.Bind(property, v => obj.angularYZDrive = v);
        public static void BindAngularYZDrive(this ConfigurableJoint obj, IProperty<UnityEngine.JointDrive> property)
            => BindAngularYZDrive(obj, Bindings2._scope, property);
        public static void BindAngularYZDrive(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.JointDrive> func)
            => bindings.BindUpdate(() => obj.angularYZDrive = func());
        public static void BindAngularYZDrive(this ConfigurableJoint obj, Func<UnityEngine.JointDrive> func)
            => BindAngularYZDrive(obj, Bindings2._scope, func);
        public static void BindAngularYZDriveInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.JointDrive> func)
            => bindings.BindInterval(seconds, () => obj.angularYZDrive = func());
        public static void BindAngularYZDriveInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.JointDrive> func)
            => BindAngularYZDriveInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSlerpDrive(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.JointDrive> property)
            => bindings.Bind(property, v => obj.slerpDrive = v);
        public static void BindSlerpDrive(this ConfigurableJoint obj, IProperty<UnityEngine.JointDrive> property)
            => BindSlerpDrive(obj, Bindings2._scope, property);
        public static void BindSlerpDrive(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.JointDrive> func)
            => bindings.BindUpdate(() => obj.slerpDrive = func());
        public static void BindSlerpDrive(this ConfigurableJoint obj, Func<UnityEngine.JointDrive> func)
            => BindSlerpDrive(obj, Bindings2._scope, func);
        public static void BindSlerpDriveInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.JointDrive> func)
            => bindings.BindInterval(seconds, () => obj.slerpDrive = func());
        public static void BindSlerpDriveInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.JointDrive> func)
            => BindSlerpDriveInterval(obj, Bindings2._scope, seconds, func);
        public static void BindProjectionMode(this ConfigurableJoint obj, Bindings2 bindings, IProperty<UnityEngine.JointProjectionMode> property)
            => bindings.Bind(property, v => obj.projectionMode = v);
        public static void BindProjectionMode(this ConfigurableJoint obj, IProperty<UnityEngine.JointProjectionMode> property)
            => BindProjectionMode(obj, Bindings2._scope, property);
        public static void BindProjectionMode(this ConfigurableJoint obj, Bindings2 bindings, Func<UnityEngine.JointProjectionMode> func)
            => bindings.BindUpdate(() => obj.projectionMode = func());
        public static void BindProjectionMode(this ConfigurableJoint obj, Func<UnityEngine.JointProjectionMode> func)
            => BindProjectionMode(obj, Bindings2._scope, func);
        public static void BindProjectionModeInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.JointProjectionMode> func)
            => bindings.BindInterval(seconds, () => obj.projectionMode = func());
        public static void BindProjectionModeInterval(this ConfigurableJoint obj, float seconds, Func<UnityEngine.JointProjectionMode> func)
            => BindProjectionModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindProjectionDistance(this ConfigurableJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.projectionDistance = v);
        public static void BindProjectionDistance(this ConfigurableJoint obj, IProperty<System.Single> property)
            => BindProjectionDistance(obj, Bindings2._scope, property);
        public static void BindProjectionDistance(this ConfigurableJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.projectionDistance = func());
        public static void BindProjectionDistance(this ConfigurableJoint obj, Func<System.Single> func)
            => BindProjectionDistance(obj, Bindings2._scope, func);
        public static void BindProjectionDistanceInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.projectionDistance = func());
        public static void BindProjectionDistanceInterval(this ConfigurableJoint obj, float seconds, Func<System.Single> func)
            => BindProjectionDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindProjectionAngle(this ConfigurableJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.projectionAngle = v);
        public static void BindProjectionAngle(this ConfigurableJoint obj, IProperty<System.Single> property)
            => BindProjectionAngle(obj, Bindings2._scope, property);
        public static void BindProjectionAngle(this ConfigurableJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.projectionAngle = func());
        public static void BindProjectionAngle(this ConfigurableJoint obj, Func<System.Single> func)
            => BindProjectionAngle(obj, Bindings2._scope, func);
        public static void BindProjectionAngleInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.projectionAngle = func());
        public static void BindProjectionAngleInterval(this ConfigurableJoint obj, float seconds, Func<System.Single> func)
            => BindProjectionAngleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConfiguredInWorldSpace(this ConfigurableJoint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.configuredInWorldSpace = v);
        public static void BindConfiguredInWorldSpace(this ConfigurableJoint obj, IProperty<System.Boolean> property)
            => BindConfiguredInWorldSpace(obj, Bindings2._scope, property);
        public static void BindConfiguredInWorldSpace(this ConfigurableJoint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.configuredInWorldSpace = func());
        public static void BindConfiguredInWorldSpace(this ConfigurableJoint obj, Func<System.Boolean> func)
            => BindConfiguredInWorldSpace(obj, Bindings2._scope, func);
        public static void BindConfiguredInWorldSpaceInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.configuredInWorldSpace = func());
        public static void BindConfiguredInWorldSpaceInterval(this ConfigurableJoint obj, float seconds, Func<System.Boolean> func)
            => BindConfiguredInWorldSpaceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSwapBodies(this ConfigurableJoint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.swapBodies = v);
        public static void BindSwapBodies(this ConfigurableJoint obj, IProperty<System.Boolean> property)
            => BindSwapBodies(obj, Bindings2._scope, property);
        public static void BindSwapBodies(this ConfigurableJoint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.swapBodies = func());
        public static void BindSwapBodies(this ConfigurableJoint obj, Func<System.Boolean> func)
            => BindSwapBodies(obj, Bindings2._scope, func);
        public static void BindSwapBodiesInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.swapBodies = func());
        public static void BindSwapBodiesInterval(this ConfigurableJoint obj, float seconds, Func<System.Boolean> func)
            => BindSwapBodiesInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakForce(this ConfigurableJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakForce = v);
        public static void BindBreakForce(this ConfigurableJoint obj, IProperty<System.Single> property)
            => BindBreakForce(obj, Bindings2._scope, property);
        public static void BindBreakForce(this ConfigurableJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakForce = func());
        public static void BindBreakForce(this ConfigurableJoint obj, Func<System.Single> func)
            => BindBreakForce(obj, Bindings2._scope, func);
        public static void BindBreakForceInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakForce = func());
        public static void BindBreakForceInterval(this ConfigurableJoint obj, float seconds, Func<System.Single> func)
            => BindBreakForceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakTorque(this ConfigurableJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakTorque = v);
        public static void BindBreakTorque(this ConfigurableJoint obj, IProperty<System.Single> property)
            => BindBreakTorque(obj, Bindings2._scope, property);
        public static void BindBreakTorque(this ConfigurableJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakTorque = func());
        public static void BindBreakTorque(this ConfigurableJoint obj, Func<System.Single> func)
            => BindBreakTorque(obj, Bindings2._scope, func);
        public static void BindBreakTorqueInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakTorque = func());
        public static void BindBreakTorqueInterval(this ConfigurableJoint obj, float seconds, Func<System.Single> func)
            => BindBreakTorqueInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEnableCollision(this ConfigurableJoint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enableCollision = v);
        public static void BindEnableCollision(this ConfigurableJoint obj, IProperty<System.Boolean> property)
            => BindEnableCollision(obj, Bindings2._scope, property);
        public static void BindEnableCollision(this ConfigurableJoint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enableCollision = func());
        public static void BindEnableCollision(this ConfigurableJoint obj, Func<System.Boolean> func)
            => BindEnableCollision(obj, Bindings2._scope, func);
        public static void BindEnableCollisionInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enableCollision = func());
        public static void BindEnableCollisionInterval(this ConfigurableJoint obj, float seconds, Func<System.Boolean> func)
            => BindEnableCollisionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEnablePreprocessing(this ConfigurableJoint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enablePreprocessing = v);
        public static void BindEnablePreprocessing(this ConfigurableJoint obj, IProperty<System.Boolean> property)
            => BindEnablePreprocessing(obj, Bindings2._scope, property);
        public static void BindEnablePreprocessing(this ConfigurableJoint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enablePreprocessing = func());
        public static void BindEnablePreprocessing(this ConfigurableJoint obj, Func<System.Boolean> func)
            => BindEnablePreprocessing(obj, Bindings2._scope, func);
        public static void BindEnablePreprocessingInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enablePreprocessing = func());
        public static void BindEnablePreprocessingInterval(this ConfigurableJoint obj, float seconds, Func<System.Boolean> func)
            => BindEnablePreprocessingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMassScale(this ConfigurableJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.massScale = v);
        public static void BindMassScale(this ConfigurableJoint obj, IProperty<System.Single> property)
            => BindMassScale(obj, Bindings2._scope, property);
        public static void BindMassScale(this ConfigurableJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.massScale = func());
        public static void BindMassScale(this ConfigurableJoint obj, Func<System.Single> func)
            => BindMassScale(obj, Bindings2._scope, func);
        public static void BindMassScaleInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.massScale = func());
        public static void BindMassScaleInterval(this ConfigurableJoint obj, float seconds, Func<System.Single> func)
            => BindMassScaleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedMassScale(this ConfigurableJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.connectedMassScale = v);
        public static void BindConnectedMassScale(this ConfigurableJoint obj, IProperty<System.Single> property)
            => BindConnectedMassScale(obj, Bindings2._scope, property);
        public static void BindConnectedMassScale(this ConfigurableJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.connectedMassScale = func());
        public static void BindConnectedMassScale(this ConfigurableJoint obj, Func<System.Single> func)
            => BindConnectedMassScale(obj, Bindings2._scope, func);
        public static void BindConnectedMassScaleInterval(this ConfigurableJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.connectedMassScale = func());
        public static void BindConnectedMassScaleInterval(this ConfigurableJoint obj, float seconds, Func<System.Single> func)
            => BindConnectedMassScaleInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS
        public static void BindForce(this ConstantForce obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.force = v);
        public static void BindForce(this ConstantForce obj, IProperty<UnityEngine.Vector3> property)
            => BindForce(obj, Bindings2._scope, property);
        public static void BindForce(this ConstantForce obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.force = func());
        public static void BindForce(this ConstantForce obj, Func<UnityEngine.Vector3> func)
            => BindForce(obj, Bindings2._scope, func);
        public static void BindForceInterval(this ConstantForce obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.force = func());
        public static void BindForceInterval(this ConstantForce obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindForceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindForceLerp(this ConstantForce obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.force = Vector3.Lerp(obj.force, property.Value, speed * Time.smoothDeltaTime));
        public static void BindForceLerp(this ConstantForce obj, float speed, Property<UnityEngine.Vector3> property)
            => BindForceLerp(obj, Bindings2._scope, speed, property);
        public static void BindForceLerp(this ConstantForce obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.force = Vector3.Lerp(obj.force, func(), speed * Time.smoothDeltaTime));
        public static void BindForceLerp(this ConstantForce obj, float speed, Func<UnityEngine.Vector3> func)
            => BindForceLerp(obj, Bindings2._scope, speed, func);
        public static void BindForceTowards(this ConstantForce obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.force = Vector3.MoveTowards(obj.force, property.Value, speed * Time.smoothDeltaTime));
        public static void BindForceTowards(this ConstantForce obj, float speed, Property<UnityEngine.Vector3> property)
            => BindForceTowards(obj, Bindings2._scope, speed, property);
        public static void BindForceTowards(this ConstantForce obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.force = Vector3.MoveTowards(obj.force, func(), speed * Time.smoothDeltaTime));
        public static void BindForceTowards(this ConstantForce obj, float speed, Func<UnityEngine.Vector3> func)
            => BindForceTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateForce(this ConstantForce obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.force = Vector3.Lerp(start, end, t));
        public static void AnimateForce(this ConstantForce obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateForce(obj, Bindings2._scope, start, end, curve);
        public static void AnimateForce(this ConstantForce obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateForce(obj, Bindings2._scope, obj.force, end, curve);
        public static void AnimateForce(this ConstantForce obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateForce(obj, Bindings2._scope, end, curve);
        public static void BindRelativeForce(this ConstantForce obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.relativeForce = v);
        public static void BindRelativeForce(this ConstantForce obj, IProperty<UnityEngine.Vector3> property)
            => BindRelativeForce(obj, Bindings2._scope, property);
        public static void BindRelativeForce(this ConstantForce obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.relativeForce = func());
        public static void BindRelativeForce(this ConstantForce obj, Func<UnityEngine.Vector3> func)
            => BindRelativeForce(obj, Bindings2._scope, func);
        public static void BindRelativeForceInterval(this ConstantForce obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.relativeForce = func());
        public static void BindRelativeForceInterval(this ConstantForce obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindRelativeForceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRelativeForceLerp(this ConstantForce obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.relativeForce = Vector3.Lerp(obj.relativeForce, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRelativeForceLerp(this ConstantForce obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRelativeForceLerp(obj, Bindings2._scope, speed, property);
        public static void BindRelativeForceLerp(this ConstantForce obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.relativeForce = Vector3.Lerp(obj.relativeForce, func(), speed * Time.smoothDeltaTime));
        public static void BindRelativeForceLerp(this ConstantForce obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRelativeForceLerp(obj, Bindings2._scope, speed, func);
        public static void BindRelativeForceTowards(this ConstantForce obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.relativeForce = Vector3.MoveTowards(obj.relativeForce, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRelativeForceTowards(this ConstantForce obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRelativeForceTowards(obj, Bindings2._scope, speed, property);
        public static void BindRelativeForceTowards(this ConstantForce obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.relativeForce = Vector3.MoveTowards(obj.relativeForce, func(), speed * Time.smoothDeltaTime));
        public static void BindRelativeForceTowards(this ConstantForce obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRelativeForceTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateRelativeForce(this ConstantForce obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.relativeForce = Vector3.Lerp(start, end, t));
        public static void AnimateRelativeForce(this ConstantForce obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRelativeForce(obj, Bindings2._scope, start, end, curve);
        public static void AnimateRelativeForce(this ConstantForce obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRelativeForce(obj, Bindings2._scope, obj.relativeForce, end, curve);
        public static void AnimateRelativeForce(this ConstantForce obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRelativeForce(obj, Bindings2._scope, end, curve);
        public static void BindTorque(this ConstantForce obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.torque = v);
        public static void BindTorque(this ConstantForce obj, IProperty<UnityEngine.Vector3> property)
            => BindTorque(obj, Bindings2._scope, property);
        public static void BindTorque(this ConstantForce obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.torque = func());
        public static void BindTorque(this ConstantForce obj, Func<UnityEngine.Vector3> func)
            => BindTorque(obj, Bindings2._scope, func);
        public static void BindTorqueInterval(this ConstantForce obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.torque = func());
        public static void BindTorqueInterval(this ConstantForce obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindTorqueInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTorqueLerp(this ConstantForce obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.torque = Vector3.Lerp(obj.torque, property.Value, speed * Time.smoothDeltaTime));
        public static void BindTorqueLerp(this ConstantForce obj, float speed, Property<UnityEngine.Vector3> property)
            => BindTorqueLerp(obj, Bindings2._scope, speed, property);
        public static void BindTorqueLerp(this ConstantForce obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.torque = Vector3.Lerp(obj.torque, func(), speed * Time.smoothDeltaTime));
        public static void BindTorqueLerp(this ConstantForce obj, float speed, Func<UnityEngine.Vector3> func)
            => BindTorqueLerp(obj, Bindings2._scope, speed, func);
        public static void BindTorqueTowards(this ConstantForce obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.torque = Vector3.MoveTowards(obj.torque, property.Value, speed * Time.smoothDeltaTime));
        public static void BindTorqueTowards(this ConstantForce obj, float speed, Property<UnityEngine.Vector3> property)
            => BindTorqueTowards(obj, Bindings2._scope, speed, property);
        public static void BindTorqueTowards(this ConstantForce obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.torque = Vector3.MoveTowards(obj.torque, func(), speed * Time.smoothDeltaTime));
        public static void BindTorqueTowards(this ConstantForce obj, float speed, Func<UnityEngine.Vector3> func)
            => BindTorqueTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateTorque(this ConstantForce obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.torque = Vector3.Lerp(start, end, t));
        public static void AnimateTorque(this ConstantForce obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTorque(obj, Bindings2._scope, start, end, curve);
        public static void AnimateTorque(this ConstantForce obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTorque(obj, Bindings2._scope, obj.torque, end, curve);
        public static void AnimateTorque(this ConstantForce obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTorque(obj, Bindings2._scope, end, curve);
        public static void BindRelativeTorque(this ConstantForce obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.relativeTorque = v);
        public static void BindRelativeTorque(this ConstantForce obj, IProperty<UnityEngine.Vector3> property)
            => BindRelativeTorque(obj, Bindings2._scope, property);
        public static void BindRelativeTorque(this ConstantForce obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.relativeTorque = func());
        public static void BindRelativeTorque(this ConstantForce obj, Func<UnityEngine.Vector3> func)
            => BindRelativeTorque(obj, Bindings2._scope, func);
        public static void BindRelativeTorqueInterval(this ConstantForce obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.relativeTorque = func());
        public static void BindRelativeTorqueInterval(this ConstantForce obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindRelativeTorqueInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRelativeTorqueLerp(this ConstantForce obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.relativeTorque = Vector3.Lerp(obj.relativeTorque, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRelativeTorqueLerp(this ConstantForce obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRelativeTorqueLerp(obj, Bindings2._scope, speed, property);
        public static void BindRelativeTorqueLerp(this ConstantForce obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.relativeTorque = Vector3.Lerp(obj.relativeTorque, func(), speed * Time.smoothDeltaTime));
        public static void BindRelativeTorqueLerp(this ConstantForce obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRelativeTorqueLerp(obj, Bindings2._scope, speed, func);
        public static void BindRelativeTorqueTowards(this ConstantForce obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.relativeTorque = Vector3.MoveTowards(obj.relativeTorque, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRelativeTorqueTowards(this ConstantForce obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRelativeTorqueTowards(obj, Bindings2._scope, speed, property);
        public static void BindRelativeTorqueTowards(this ConstantForce obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.relativeTorque = Vector3.MoveTowards(obj.relativeTorque, func(), speed * Time.smoothDeltaTime));
        public static void BindRelativeTorqueTowards(this ConstantForce obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRelativeTorqueTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateRelativeTorque(this ConstantForce obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.relativeTorque = Vector3.Lerp(start, end, t));
        public static void AnimateRelativeTorque(this ConstantForce obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRelativeTorque(obj, Bindings2._scope, start, end, curve);
        public static void AnimateRelativeTorque(this ConstantForce obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRelativeTorque(obj, Bindings2._scope, obj.relativeTorque, end, curve);
        public static void AnimateRelativeTorque(this ConstantForce obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRelativeTorque(obj, Bindings2._scope, end, curve);
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindForce(this ConstantForce2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.force = v);
        public static void BindForce(this ConstantForce2D obj, IProperty<UnityEngine.Vector2> property)
            => BindForce(obj, Bindings2._scope, property);
        public static void BindForce(this ConstantForce2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.force = func());
        public static void BindForce(this ConstantForce2D obj, Func<UnityEngine.Vector2> func)
            => BindForce(obj, Bindings2._scope, func);
        public static void BindForceInterval(this ConstantForce2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.force = func());
        public static void BindForceInterval(this ConstantForce2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindForceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRelativeForce(this ConstantForce2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.relativeForce = v);
        public static void BindRelativeForce(this ConstantForce2D obj, IProperty<UnityEngine.Vector2> property)
            => BindRelativeForce(obj, Bindings2._scope, property);
        public static void BindRelativeForce(this ConstantForce2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.relativeForce = func());
        public static void BindRelativeForce(this ConstantForce2D obj, Func<UnityEngine.Vector2> func)
            => BindRelativeForce(obj, Bindings2._scope, func);
        public static void BindRelativeForceInterval(this ConstantForce2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.relativeForce = func());
        public static void BindRelativeForceInterval(this ConstantForce2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindRelativeForceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTorque(this ConstantForce2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.torque = v);
        public static void BindTorque(this ConstantForce2D obj, IProperty<System.Single> property)
            => BindTorque(obj, Bindings2._scope, property);
        public static void BindTorque(this ConstantForce2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.torque = func());
        public static void BindTorque(this ConstantForce2D obj, Func<System.Single> func)
            => BindTorque(obj, Bindings2._scope, func);
        public static void BindTorqueInterval(this ConstantForce2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.torque = func());
        public static void BindTorqueInterval(this ConstantForce2D obj, float seconds, Func<System.Single> func)
            => BindTorqueInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindHorizontalFit(this UnityEngine.UI.ContentSizeFitter obj, Bindings2 bindings, IProperty<UnityEngine.UI.ContentSizeFitter.FitMode> property)
            => bindings.Bind(property, v => obj.horizontalFit = v);
        public static void BindHorizontalFit(this UnityEngine.UI.ContentSizeFitter obj, IProperty<UnityEngine.UI.ContentSizeFitter.FitMode> property)
            => BindHorizontalFit(obj, Bindings2._scope, property);
        public static void BindHorizontalFit(this UnityEngine.UI.ContentSizeFitter obj, Bindings2 bindings, Func<UnityEngine.UI.ContentSizeFitter.FitMode> func)
            => bindings.BindUpdate(() => obj.horizontalFit = func());
        public static void BindHorizontalFit(this UnityEngine.UI.ContentSizeFitter obj, Func<UnityEngine.UI.ContentSizeFitter.FitMode> func)
            => BindHorizontalFit(obj, Bindings2._scope, func);
        public static void BindHorizontalFitInterval(this UnityEngine.UI.ContentSizeFitter obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.ContentSizeFitter.FitMode> func)
            => bindings.BindInterval(seconds, () => obj.horizontalFit = func());
        public static void BindHorizontalFitInterval(this UnityEngine.UI.ContentSizeFitter obj, float seconds, Func<UnityEngine.UI.ContentSizeFitter.FitMode> func)
            => BindHorizontalFitInterval(obj, Bindings2._scope, seconds, func);
        public static void BindVerticalFit(this UnityEngine.UI.ContentSizeFitter obj, Bindings2 bindings, IProperty<UnityEngine.UI.ContentSizeFitter.FitMode> property)
            => bindings.Bind(property, v => obj.verticalFit = v);
        public static void BindVerticalFit(this UnityEngine.UI.ContentSizeFitter obj, IProperty<UnityEngine.UI.ContentSizeFitter.FitMode> property)
            => BindVerticalFit(obj, Bindings2._scope, property);
        public static void BindVerticalFit(this UnityEngine.UI.ContentSizeFitter obj, Bindings2 bindings, Func<UnityEngine.UI.ContentSizeFitter.FitMode> func)
            => bindings.BindUpdate(() => obj.verticalFit = func());
        public static void BindVerticalFit(this UnityEngine.UI.ContentSizeFitter obj, Func<UnityEngine.UI.ContentSizeFitter.FitMode> func)
            => BindVerticalFit(obj, Bindings2._scope, func);
        public static void BindVerticalFitInterval(this UnityEngine.UI.ContentSizeFitter obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.ContentSizeFitter.FitMode> func)
            => bindings.BindInterval(seconds, () => obj.verticalFit = func());
        public static void BindVerticalFitInterval(this UnityEngine.UI.ContentSizeFitter obj, float seconds, Func<UnityEngine.UI.ContentSizeFitter.FitMode> func)
            => BindVerticalFitInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindEnableCollision(this DistanceJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enableCollision = v);
        public static void BindEnableCollision(this DistanceJoint2D obj, IProperty<System.Boolean> property)
            => BindEnableCollision(obj, Bindings2._scope, property);
        public static void BindEnableCollision(this DistanceJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enableCollision = func());
        public static void BindEnableCollision(this DistanceJoint2D obj, Func<System.Boolean> func)
            => BindEnableCollision(obj, Bindings2._scope, func);
        public static void BindEnableCollisionInterval(this DistanceJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enableCollision = func());
        public static void BindEnableCollisionInterval(this DistanceJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindEnableCollisionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedBody(this DistanceJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Rigidbody2D> property)
            => bindings.Bind(property, v => obj.connectedBody = v);
        public static void BindConnectedBody(this DistanceJoint2D obj, IProperty<UnityEngine.Rigidbody2D> property)
            => BindConnectedBody(obj, Bindings2._scope, property);
        public static void BindConnectedBody(this DistanceJoint2D obj, Bindings2 bindings, Func<UnityEngine.Rigidbody2D> func)
            => bindings.BindUpdate(() => obj.connectedBody = func());
        public static void BindConnectedBody(this DistanceJoint2D obj, Func<UnityEngine.Rigidbody2D> func)
            => BindConnectedBody(obj, Bindings2._scope, func);
        public static void BindConnectedBodyInterval(this DistanceJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rigidbody2D> func)
            => bindings.BindInterval(seconds, () => obj.connectedBody = func());
        public static void BindConnectedBodyInterval(this DistanceJoint2D obj, float seconds, Func<UnityEngine.Rigidbody2D> func)
            => BindConnectedBodyInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoConfigureConnectedAnchor(this DistanceJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoConfigureConnectedAnchor = v);
        public static void BindAutoConfigureConnectedAnchor(this DistanceJoint2D obj, IProperty<System.Boolean> property)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindAutoConfigureConnectedAnchor(this DistanceJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchor(this DistanceJoint2D obj, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindAutoConfigureConnectedAnchorInterval(this DistanceJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchorInterval(this DistanceJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAnchor(this DistanceJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.anchor = v);
        public static void BindAnchor(this DistanceJoint2D obj, IProperty<UnityEngine.Vector2> property)
            => BindAnchor(obj, Bindings2._scope, property);
        public static void BindAnchor(this DistanceJoint2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.anchor = func());
        public static void BindAnchor(this DistanceJoint2D obj, Func<UnityEngine.Vector2> func)
            => BindAnchor(obj, Bindings2._scope, func);
        public static void BindAnchorInterval(this DistanceJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.anchor = func());
        public static void BindAnchorInterval(this DistanceJoint2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedAnchor(this DistanceJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.connectedAnchor = v);
        public static void BindConnectedAnchor(this DistanceJoint2D obj, IProperty<UnityEngine.Vector2> property)
            => BindConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindConnectedAnchor(this DistanceJoint2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = func());
        public static void BindConnectedAnchor(this DistanceJoint2D obj, Func<UnityEngine.Vector2> func)
            => BindConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindConnectedAnchorInterval(this DistanceJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.connectedAnchor = func());
        public static void BindConnectedAnchorInterval(this DistanceJoint2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoConfigureDistance(this DistanceJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoConfigureDistance = v);
        public static void BindAutoConfigureDistance(this DistanceJoint2D obj, IProperty<System.Boolean> property)
            => BindAutoConfigureDistance(obj, Bindings2._scope, property);
        public static void BindAutoConfigureDistance(this DistanceJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoConfigureDistance = func());
        public static void BindAutoConfigureDistance(this DistanceJoint2D obj, Func<System.Boolean> func)
            => BindAutoConfigureDistance(obj, Bindings2._scope, func);
        public static void BindAutoConfigureDistanceInterval(this DistanceJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoConfigureDistance = func());
        public static void BindAutoConfigureDistanceInterval(this DistanceJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindAutoConfigureDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDistance(this DistanceJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.distance = v);
        public static void BindDistance(this DistanceJoint2D obj, IProperty<System.Single> property)
            => BindDistance(obj, Bindings2._scope, property);
        public static void BindDistance(this DistanceJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.distance = func());
        public static void BindDistance(this DistanceJoint2D obj, Func<System.Single> func)
            => BindDistance(obj, Bindings2._scope, func);
        public static void BindDistanceInterval(this DistanceJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.distance = func());
        public static void BindDistanceInterval(this DistanceJoint2D obj, float seconds, Func<System.Single> func)
            => BindDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMaxDistanceOnly(this DistanceJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.maxDistanceOnly = v);
        public static void BindMaxDistanceOnly(this DistanceJoint2D obj, IProperty<System.Boolean> property)
            => BindMaxDistanceOnly(obj, Bindings2._scope, property);
        public static void BindMaxDistanceOnly(this DistanceJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.maxDistanceOnly = func());
        public static void BindMaxDistanceOnly(this DistanceJoint2D obj, Func<System.Boolean> func)
            => BindMaxDistanceOnly(obj, Bindings2._scope, func);
        public static void BindMaxDistanceOnlyInterval(this DistanceJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.maxDistanceOnly = func());
        public static void BindMaxDistanceOnlyInterval(this DistanceJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindMaxDistanceOnlyInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakForce(this DistanceJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakForce = v);
        public static void BindBreakForce(this DistanceJoint2D obj, IProperty<System.Single> property)
            => BindBreakForce(obj, Bindings2._scope, property);
        public static void BindBreakForce(this DistanceJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakForce = func());
        public static void BindBreakForce(this DistanceJoint2D obj, Func<System.Single> func)
            => BindBreakForce(obj, Bindings2._scope, func);
        public static void BindBreakForceInterval(this DistanceJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakForce = func());
        public static void BindBreakForceInterval(this DistanceJoint2D obj, float seconds, Func<System.Single> func)
            => BindBreakForceInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindInteractable(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.interactable = v);
        public static void BindInteractable(this UnityEngine.UI.Dropdown obj, IProperty<System.Boolean> property)
            => BindInteractable(obj, Bindings2._scope, property);
        public static void BindInteractable(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.interactable = func());
        public static void BindInteractable(this UnityEngine.UI.Dropdown obj, Func<System.Boolean> func)
            => BindInteractable(obj, Bindings2._scope, func);
        public static void BindInteractableInterval(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.interactable = func());
        public static void BindInteractableInterval(this UnityEngine.UI.Dropdown obj, float seconds, Func<System.Boolean> func)
            => BindInteractableInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTransition(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, IProperty<UnityEngine.UI.Selectable.Transition> property)
            => bindings.Bind(property, v => obj.transition = v);
        public static void BindTransition(this UnityEngine.UI.Dropdown obj, IProperty<UnityEngine.UI.Selectable.Transition> property)
            => BindTransition(obj, Bindings2._scope, property);
        public static void BindTransition(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, Func<UnityEngine.UI.Selectable.Transition> func)
            => bindings.BindUpdate(() => obj.transition = func());
        public static void BindTransition(this UnityEngine.UI.Dropdown obj, Func<UnityEngine.UI.Selectable.Transition> func)
            => BindTransition(obj, Bindings2._scope, func);
        public static void BindTransitionInterval(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Selectable.Transition> func)
            => bindings.BindInterval(seconds, () => obj.transition = func());
        public static void BindTransitionInterval(this UnityEngine.UI.Dropdown obj, float seconds, Func<UnityEngine.UI.Selectable.Transition> func)
            => BindTransitionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetGraphic(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, IProperty<UnityEngine.UI.Graphic> property)
            => bindings.Bind(property, v => obj.targetGraphic = v);
        public static void BindTargetGraphic(this UnityEngine.UI.Dropdown obj, IProperty<UnityEngine.UI.Graphic> property)
            => BindTargetGraphic(obj, Bindings2._scope, property);
        public static void BindTargetGraphic(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindUpdate(() => obj.targetGraphic = func());
        public static void BindTargetGraphic(this UnityEngine.UI.Dropdown obj, Func<UnityEngine.UI.Graphic> func)
            => BindTargetGraphic(obj, Bindings2._scope, func);
        public static void BindTargetGraphicInterval(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindInterval(seconds, () => obj.targetGraphic = func());
        public static void BindTargetGraphicInterval(this UnityEngine.UI.Dropdown obj, float seconds, Func<UnityEngine.UI.Graphic> func)
            => BindTargetGraphicInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColors(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, IProperty<UnityEngine.UI.ColorBlock> property)
            => bindings.Bind(property, v => obj.colors = v);
        public static void BindColors(this UnityEngine.UI.Dropdown obj, IProperty<UnityEngine.UI.ColorBlock> property)
            => BindColors(obj, Bindings2._scope, property);
        public static void BindColors(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, Func<UnityEngine.UI.ColorBlock> func)
            => bindings.BindUpdate(() => obj.colors = func());
        public static void BindColors(this UnityEngine.UI.Dropdown obj, Func<UnityEngine.UI.ColorBlock> func)
            => BindColors(obj, Bindings2._scope, func);
        public static void BindColorsInterval(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.ColorBlock> func)
            => bindings.BindInterval(seconds, () => obj.colors = func());
        public static void BindColorsInterval(this UnityEngine.UI.Dropdown obj, float seconds, Func<UnityEngine.UI.ColorBlock> func)
            => BindColorsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindNavigation(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, IProperty<UnityEngine.UI.Navigation> property)
            => bindings.Bind(property, v => obj.navigation = v);
        public static void BindNavigation(this UnityEngine.UI.Dropdown obj, IProperty<UnityEngine.UI.Navigation> property)
            => BindNavigation(obj, Bindings2._scope, property);
        public static void BindNavigation(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, Func<UnityEngine.UI.Navigation> func)
            => bindings.BindUpdate(() => obj.navigation = func());
        public static void BindNavigation(this UnityEngine.UI.Dropdown obj, Func<UnityEngine.UI.Navigation> func)
            => BindNavigation(obj, Bindings2._scope, func);
        public static void BindNavigationInterval(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Navigation> func)
            => bindings.BindInterval(seconds, () => obj.navigation = func());
        public static void BindNavigationInterval(this UnityEngine.UI.Dropdown obj, float seconds, Func<UnityEngine.UI.Navigation> func)
            => BindNavigationInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTemplate(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, IProperty<UnityEngine.RectTransform> property)
            => bindings.Bind(property, v => obj.template = v);
        public static void BindTemplate(this UnityEngine.UI.Dropdown obj, IProperty<UnityEngine.RectTransform> property)
            => BindTemplate(obj, Bindings2._scope, property);
        public static void BindTemplate(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, Func<UnityEngine.RectTransform> func)
            => bindings.BindUpdate(() => obj.template = func());
        public static void BindTemplate(this UnityEngine.UI.Dropdown obj, Func<UnityEngine.RectTransform> func)
            => BindTemplate(obj, Bindings2._scope, func);
        public static void BindTemplateInterval(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, float seconds, Func<UnityEngine.RectTransform> func)
            => bindings.BindInterval(seconds, () => obj.template = func());
        public static void BindTemplateInterval(this UnityEngine.UI.Dropdown obj, float seconds, Func<UnityEngine.RectTransform> func)
            => BindTemplateInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCaptionText(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, IProperty<UnityEngine.UI.Text> property)
            => bindings.Bind(property, v => obj.captionText = v);
        public static void BindCaptionText(this UnityEngine.UI.Dropdown obj, IProperty<UnityEngine.UI.Text> property)
            => BindCaptionText(obj, Bindings2._scope, property);
        public static void BindCaptionText(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, Func<UnityEngine.UI.Text> func)
            => bindings.BindUpdate(() => obj.captionText = func());
        public static void BindCaptionText(this UnityEngine.UI.Dropdown obj, Func<UnityEngine.UI.Text> func)
            => BindCaptionText(obj, Bindings2._scope, func);
        public static void BindCaptionTextInterval(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Text> func)
            => bindings.BindInterval(seconds, () => obj.captionText = func());
        public static void BindCaptionTextInterval(this UnityEngine.UI.Dropdown obj, float seconds, Func<UnityEngine.UI.Text> func)
            => BindCaptionTextInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCaptionImage(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, IProperty<UnityEngine.UI.Image> property)
            => bindings.Bind(property, v => obj.captionImage = v);
        public static void BindCaptionImage(this UnityEngine.UI.Dropdown obj, IProperty<UnityEngine.UI.Image> property)
            => BindCaptionImage(obj, Bindings2._scope, property);
        public static void BindCaptionImage(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, Func<UnityEngine.UI.Image> func)
            => bindings.BindUpdate(() => obj.captionImage = func());
        public static void BindCaptionImage(this UnityEngine.UI.Dropdown obj, Func<UnityEngine.UI.Image> func)
            => BindCaptionImage(obj, Bindings2._scope, func);
        public static void BindCaptionImageInterval(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Image> func)
            => bindings.BindInterval(seconds, () => obj.captionImage = func());
        public static void BindCaptionImageInterval(this UnityEngine.UI.Dropdown obj, float seconds, Func<UnityEngine.UI.Image> func)
            => BindCaptionImageInterval(obj, Bindings2._scope, seconds, func);
        public static void BindItemText(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, IProperty<UnityEngine.UI.Text> property)
            => bindings.Bind(property, v => obj.itemText = v);
        public static void BindItemText(this UnityEngine.UI.Dropdown obj, IProperty<UnityEngine.UI.Text> property)
            => BindItemText(obj, Bindings2._scope, property);
        public static void BindItemText(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, Func<UnityEngine.UI.Text> func)
            => bindings.BindUpdate(() => obj.itemText = func());
        public static void BindItemText(this UnityEngine.UI.Dropdown obj, Func<UnityEngine.UI.Text> func)
            => BindItemText(obj, Bindings2._scope, func);
        public static void BindItemTextInterval(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Text> func)
            => bindings.BindInterval(seconds, () => obj.itemText = func());
        public static void BindItemTextInterval(this UnityEngine.UI.Dropdown obj, float seconds, Func<UnityEngine.UI.Text> func)
            => BindItemTextInterval(obj, Bindings2._scope, seconds, func);
        public static void BindItemImage(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, IProperty<UnityEngine.UI.Image> property)
            => bindings.Bind(property, v => obj.itemImage = v);
        public static void BindItemImage(this UnityEngine.UI.Dropdown obj, IProperty<UnityEngine.UI.Image> property)
            => BindItemImage(obj, Bindings2._scope, property);
        public static void BindItemImage(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, Func<UnityEngine.UI.Image> func)
            => bindings.BindUpdate(() => obj.itemImage = func());
        public static void BindItemImage(this UnityEngine.UI.Dropdown obj, Func<UnityEngine.UI.Image> func)
            => BindItemImage(obj, Bindings2._scope, func);
        public static void BindItemImageInterval(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Image> func)
            => bindings.BindInterval(seconds, () => obj.itemImage = func());
        public static void BindItemImageInterval(this UnityEngine.UI.Dropdown obj, float seconds, Func<UnityEngine.UI.Image> func)
            => BindItemImageInterval(obj, Bindings2._scope, seconds, func);
        public static void BindValue(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.value = v);
        public static void BindValue(this UnityEngine.UI.Dropdown obj, IProperty<System.Int32> property)
            => BindValue(obj, Bindings2._scope, property);
        public static void BindValue(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.value = func());
        public static void BindValue(this UnityEngine.UI.Dropdown obj, Func<System.Int32> func)
            => BindValue(obj, Bindings2._scope, func);
        public static void BindValueInterval(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.value = func());
        public static void BindValueInterval(this UnityEngine.UI.Dropdown obj, float seconds, Func<System.Int32> func)
            => BindValueInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAlphaFadeSpeed(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.alphaFadeSpeed = v);
        public static void BindAlphaFadeSpeed(this UnityEngine.UI.Dropdown obj, IProperty<System.Single> property)
            => BindAlphaFadeSpeed(obj, Bindings2._scope, property);
        public static void BindAlphaFadeSpeed(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.alphaFadeSpeed = func());
        public static void BindAlphaFadeSpeed(this UnityEngine.UI.Dropdown obj, Func<System.Single> func)
            => BindAlphaFadeSpeed(obj, Bindings2._scope, func);
        public static void BindAlphaFadeSpeedInterval(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.alphaFadeSpeed = func());
        public static void BindAlphaFadeSpeedInterval(this UnityEngine.UI.Dropdown obj, float seconds, Func<System.Single> func)
            => BindAlphaFadeSpeedInterval(obj, Bindings2._scope, seconds, func);
        public static void BindOptions(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, IProperty<System.Collections.Generic.List<UnityEngine.UI.Dropdown.OptionData>> property)
            => bindings.Bind(property, v => obj.options = v);
        public static void BindOptions(this UnityEngine.UI.Dropdown obj, IProperty<System.Collections.Generic.List<UnityEngine.UI.Dropdown.OptionData>> property)
            => BindOptions(obj, Bindings2._scope, property);
        public static void BindOptions(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, Func<System.Collections.Generic.List<UnityEngine.UI.Dropdown.OptionData>> func)
            => bindings.BindUpdate(() => obj.options = func());
        public static void BindOptions(this UnityEngine.UI.Dropdown obj, Func<System.Collections.Generic.List<UnityEngine.UI.Dropdown.OptionData>> func)
            => BindOptions(obj, Bindings2._scope, func);
        public static void BindOptionsInterval(this UnityEngine.UI.Dropdown obj, Bindings2 bindings, float seconds, Func<System.Collections.Generic.List<UnityEngine.UI.Dropdown.OptionData>> func)
            => bindings.BindInterval(seconds, () => obj.options = func());
        public static void BindOptionsInterval(this UnityEngine.UI.Dropdown obj, float seconds, Func<System.Collections.Generic.List<UnityEngine.UI.Dropdown.OptionData>> func)
            => BindOptionsInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindSharedMaterial(this EdgeCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.PhysicsMaterial2D> property)
            => bindings.Bind(property, v => obj.sharedMaterial = v);
        public static void BindSharedMaterial(this EdgeCollider2D obj, IProperty<UnityEngine.PhysicsMaterial2D> property)
            => BindSharedMaterial(obj, Bindings2._scope, property);
        public static void BindSharedMaterial(this EdgeCollider2D obj, Bindings2 bindings, Func<UnityEngine.PhysicsMaterial2D> func)
            => bindings.BindUpdate(() => obj.sharedMaterial = func());
        public static void BindSharedMaterial(this EdgeCollider2D obj, Func<UnityEngine.PhysicsMaterial2D> func)
            => BindSharedMaterial(obj, Bindings2._scope, func);
        public static void BindSharedMaterialInterval(this EdgeCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.PhysicsMaterial2D> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterial = func());
        public static void BindSharedMaterialInterval(this EdgeCollider2D obj, float seconds, Func<UnityEngine.PhysicsMaterial2D> func)
            => BindSharedMaterialInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIsTrigger(this EdgeCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isTrigger = v);
        public static void BindIsTrigger(this EdgeCollider2D obj, IProperty<System.Boolean> property)
            => BindIsTrigger(obj, Bindings2._scope, property);
        public static void BindIsTrigger(this EdgeCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isTrigger = func());
        public static void BindIsTrigger(this EdgeCollider2D obj, Func<System.Boolean> func)
            => BindIsTrigger(obj, Bindings2._scope, func);
        public static void BindIsTriggerInterval(this EdgeCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isTrigger = func());
        public static void BindIsTriggerInterval(this EdgeCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindIsTriggerInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUsedByEffector(this EdgeCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.usedByEffector = v);
        public static void BindUsedByEffector(this EdgeCollider2D obj, IProperty<System.Boolean> property)
            => BindUsedByEffector(obj, Bindings2._scope, property);
        public static void BindUsedByEffector(this EdgeCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.usedByEffector = func());
        public static void BindUsedByEffector(this EdgeCollider2D obj, Func<System.Boolean> func)
            => BindUsedByEffector(obj, Bindings2._scope, func);
        public static void BindUsedByEffectorInterval(this EdgeCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.usedByEffector = func());
        public static void BindUsedByEffectorInterval(this EdgeCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindUsedByEffectorInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_2023_1_OR_NEWER
        public static void BindUsedByComposite(this EdgeCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.usedByComposite = v);
        public static void BindUsedByComposite(this EdgeCollider2D obj, IProperty<System.Boolean> property)
            => BindUsedByComposite(obj, Bindings2._scope, property);
        public static void BindUsedByComposite(this EdgeCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.usedByComposite = func());
        public static void BindUsedByComposite(this EdgeCollider2D obj, Func<System.Boolean> func)
            => BindUsedByComposite(obj, Bindings2._scope, func);
        public static void BindUsedByCompositeInterval(this EdgeCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.usedByComposite = func());
        public static void BindUsedByCompositeInterval(this EdgeCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindUsedByCompositeInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_2023_1_OR_NEWER
        public static void BindCompositeOperation(this EdgeCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.Collider2D.CompositeOperation> property)
            => bindings.Bind(property, v => obj.compositeOperation = v);
        public static void BindCompositeOperation(this EdgeCollider2D obj, IProperty<UnityEngine.Collider2D.CompositeOperation> property)
            => BindCompositeOperation(obj, Bindings2._scope, property);
        public static void BindCompositeOperation(this EdgeCollider2D obj, Bindings2 bindings, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => bindings.BindUpdate(() => obj.compositeOperation = func());
        public static void BindCompositeOperation(this EdgeCollider2D obj, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => BindCompositeOperation(obj, Bindings2._scope, func);
        public static void BindCompositeOperationInterval(this EdgeCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => bindings.BindInterval(seconds, () => obj.compositeOperation = func());
        public static void BindCompositeOperationInterval(this EdgeCollider2D obj, float seconds, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => BindCompositeOperationInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindOffset(this EdgeCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.offset = v);
        public static void BindOffset(this EdgeCollider2D obj, IProperty<UnityEngine.Vector2> property)
            => BindOffset(obj, Bindings2._scope, property);
        public static void BindOffset(this EdgeCollider2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.offset = func());
        public static void BindOffset(this EdgeCollider2D obj, Func<UnityEngine.Vector2> func)
            => BindOffset(obj, Bindings2._scope, func);
        public static void BindOffsetInterval(this EdgeCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.offset = func());
        public static void BindOffsetInterval(this EdgeCollider2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindOffsetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEdgeRadius(this EdgeCollider2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.edgeRadius = v);
        public static void BindEdgeRadius(this EdgeCollider2D obj, IProperty<System.Single> property)
            => BindEdgeRadius(obj, Bindings2._scope, property);
        public static void BindEdgeRadius(this EdgeCollider2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.edgeRadius = func());
        public static void BindEdgeRadius(this EdgeCollider2D obj, Func<System.Single> func)
            => BindEdgeRadius(obj, Bindings2._scope, func);
        public static void BindEdgeRadiusInterval(this EdgeCollider2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.edgeRadius = func());
        public static void BindEdgeRadiusInterval(this EdgeCollider2D obj, float seconds, Func<System.Single> func)
            => BindEdgeRadiusInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPoints(this EdgeCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2[]> property)
            => bindings.Bind(property, v => obj.points = v);
        public static void BindPoints(this EdgeCollider2D obj, IProperty<UnityEngine.Vector2[]> property)
            => BindPoints(obj, Bindings2._scope, property);
        public static void BindPoints(this EdgeCollider2D obj, Bindings2 bindings, Func<UnityEngine.Vector2[]> func)
            => bindings.BindUpdate(() => obj.points = func());
        public static void BindPoints(this EdgeCollider2D obj, Func<UnityEngine.Vector2[]> func)
            => BindPoints(obj, Bindings2._scope, func);
        public static void BindPointsInterval(this EdgeCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2[]> func)
            => bindings.BindInterval(seconds, () => obj.points = func());
        public static void BindPointsInterval(this EdgeCollider2D obj, float seconds, Func<UnityEngine.Vector2[]> func)
            => BindPointsInterval(obj, Bindings2._scope, seconds, func);
        #if UNITY_2020_1_OR_NEWER
        public static void BindUseAdjacentStartPoint(this EdgeCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useAdjacentStartPoint = v);
        public static void BindUseAdjacentStartPoint(this EdgeCollider2D obj, IProperty<System.Boolean> property)
            => BindUseAdjacentStartPoint(obj, Bindings2._scope, property);
        public static void BindUseAdjacentStartPoint(this EdgeCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useAdjacentStartPoint = func());
        public static void BindUseAdjacentStartPoint(this EdgeCollider2D obj, Func<System.Boolean> func)
            => BindUseAdjacentStartPoint(obj, Bindings2._scope, func);
        public static void BindUseAdjacentStartPointInterval(this EdgeCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useAdjacentStartPoint = func());
        public static void BindUseAdjacentStartPointInterval(this EdgeCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindUseAdjacentStartPointInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_2020_1_OR_NEWER
        public static void BindUseAdjacentEndPoint(this EdgeCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useAdjacentEndPoint = v);
        public static void BindUseAdjacentEndPoint(this EdgeCollider2D obj, IProperty<System.Boolean> property)
            => BindUseAdjacentEndPoint(obj, Bindings2._scope, property);
        public static void BindUseAdjacentEndPoint(this EdgeCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useAdjacentEndPoint = func());
        public static void BindUseAdjacentEndPoint(this EdgeCollider2D obj, Func<System.Boolean> func)
            => BindUseAdjacentEndPoint(obj, Bindings2._scope, func);
        public static void BindUseAdjacentEndPointInterval(this EdgeCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useAdjacentEndPoint = func());
        public static void BindUseAdjacentEndPointInterval(this EdgeCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindUseAdjacentEndPointInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #endif


        #if UNITY_GUI
        public static void BindFirstSelectedGameObject(this UnityEngine.EventSystems.EventSystem obj, Bindings2 bindings, IProperty<UnityEngine.GameObject> property)
            => bindings.Bind(property, v => obj.firstSelectedGameObject = v);
        public static void BindFirstSelectedGameObject(this UnityEngine.EventSystems.EventSystem obj, IProperty<UnityEngine.GameObject> property)
            => BindFirstSelectedGameObject(obj, Bindings2._scope, property);
        public static void BindFirstSelectedGameObject(this UnityEngine.EventSystems.EventSystem obj, Bindings2 bindings, Func<UnityEngine.GameObject> func)
            => bindings.BindUpdate(() => obj.firstSelectedGameObject = func());
        public static void BindFirstSelectedGameObject(this UnityEngine.EventSystems.EventSystem obj, Func<UnityEngine.GameObject> func)
            => BindFirstSelectedGameObject(obj, Bindings2._scope, func);
        public static void BindFirstSelectedGameObjectInterval(this UnityEngine.EventSystems.EventSystem obj, Bindings2 bindings, float seconds, Func<UnityEngine.GameObject> func)
            => bindings.BindInterval(seconds, () => obj.firstSelectedGameObject = func());
        public static void BindFirstSelectedGameObjectInterval(this UnityEngine.EventSystems.EventSystem obj, float seconds, Func<UnityEngine.GameObject> func)
            => BindFirstSelectedGameObjectInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSendNavigationEvents(this UnityEngine.EventSystems.EventSystem obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.sendNavigationEvents = v);
        public static void BindSendNavigationEvents(this UnityEngine.EventSystems.EventSystem obj, IProperty<System.Boolean> property)
            => BindSendNavigationEvents(obj, Bindings2._scope, property);
        public static void BindSendNavigationEvents(this UnityEngine.EventSystems.EventSystem obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.sendNavigationEvents = func());
        public static void BindSendNavigationEvents(this UnityEngine.EventSystems.EventSystem obj, Func<System.Boolean> func)
            => BindSendNavigationEvents(obj, Bindings2._scope, func);
        public static void BindSendNavigationEventsInterval(this UnityEngine.EventSystems.EventSystem obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.sendNavigationEvents = func());
        public static void BindSendNavigationEventsInterval(this UnityEngine.EventSystems.EventSystem obj, float seconds, Func<System.Boolean> func)
            => BindSendNavigationEventsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPixelDragThreshold(this UnityEngine.EventSystems.EventSystem obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.pixelDragThreshold = v);
        public static void BindPixelDragThreshold(this UnityEngine.EventSystems.EventSystem obj, IProperty<System.Int32> property)
            => BindPixelDragThreshold(obj, Bindings2._scope, property);
        public static void BindPixelDragThreshold(this UnityEngine.EventSystems.EventSystem obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.pixelDragThreshold = func());
        public static void BindPixelDragThreshold(this UnityEngine.EventSystems.EventSystem obj, Func<System.Int32> func)
            => BindPixelDragThreshold(obj, Bindings2._scope, func);
        public static void BindPixelDragThresholdInterval(this UnityEngine.EventSystems.EventSystem obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.pixelDragThreshold = func());
        public static void BindPixelDragThresholdInterval(this UnityEngine.EventSystems.EventSystem obj, float seconds, Func<System.Int32> func)
            => BindPixelDragThresholdInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindEnableCollision(this FixedJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enableCollision = v);
        public static void BindEnableCollision(this FixedJoint2D obj, IProperty<System.Boolean> property)
            => BindEnableCollision(obj, Bindings2._scope, property);
        public static void BindEnableCollision(this FixedJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enableCollision = func());
        public static void BindEnableCollision(this FixedJoint2D obj, Func<System.Boolean> func)
            => BindEnableCollision(obj, Bindings2._scope, func);
        public static void BindEnableCollisionInterval(this FixedJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enableCollision = func());
        public static void BindEnableCollisionInterval(this FixedJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindEnableCollisionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedBody(this FixedJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Rigidbody2D> property)
            => bindings.Bind(property, v => obj.connectedBody = v);
        public static void BindConnectedBody(this FixedJoint2D obj, IProperty<UnityEngine.Rigidbody2D> property)
            => BindConnectedBody(obj, Bindings2._scope, property);
        public static void BindConnectedBody(this FixedJoint2D obj, Bindings2 bindings, Func<UnityEngine.Rigidbody2D> func)
            => bindings.BindUpdate(() => obj.connectedBody = func());
        public static void BindConnectedBody(this FixedJoint2D obj, Func<UnityEngine.Rigidbody2D> func)
            => BindConnectedBody(obj, Bindings2._scope, func);
        public static void BindConnectedBodyInterval(this FixedJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rigidbody2D> func)
            => bindings.BindInterval(seconds, () => obj.connectedBody = func());
        public static void BindConnectedBodyInterval(this FixedJoint2D obj, float seconds, Func<UnityEngine.Rigidbody2D> func)
            => BindConnectedBodyInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoConfigureConnectedAnchor(this FixedJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoConfigureConnectedAnchor = v);
        public static void BindAutoConfigureConnectedAnchor(this FixedJoint2D obj, IProperty<System.Boolean> property)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindAutoConfigureConnectedAnchor(this FixedJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchor(this FixedJoint2D obj, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindAutoConfigureConnectedAnchorInterval(this FixedJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchorInterval(this FixedJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAnchor(this FixedJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.anchor = v);
        public static void BindAnchor(this FixedJoint2D obj, IProperty<UnityEngine.Vector2> property)
            => BindAnchor(obj, Bindings2._scope, property);
        public static void BindAnchor(this FixedJoint2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.anchor = func());
        public static void BindAnchor(this FixedJoint2D obj, Func<UnityEngine.Vector2> func)
            => BindAnchor(obj, Bindings2._scope, func);
        public static void BindAnchorInterval(this FixedJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.anchor = func());
        public static void BindAnchorInterval(this FixedJoint2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedAnchor(this FixedJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.connectedAnchor = v);
        public static void BindConnectedAnchor(this FixedJoint2D obj, IProperty<UnityEngine.Vector2> property)
            => BindConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindConnectedAnchor(this FixedJoint2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = func());
        public static void BindConnectedAnchor(this FixedJoint2D obj, Func<UnityEngine.Vector2> func)
            => BindConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindConnectedAnchorInterval(this FixedJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.connectedAnchor = func());
        public static void BindConnectedAnchorInterval(this FixedJoint2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDampingRatio(this FixedJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.dampingRatio = v);
        public static void BindDampingRatio(this FixedJoint2D obj, IProperty<System.Single> property)
            => BindDampingRatio(obj, Bindings2._scope, property);
        public static void BindDampingRatio(this FixedJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.dampingRatio = func());
        public static void BindDampingRatio(this FixedJoint2D obj, Func<System.Single> func)
            => BindDampingRatio(obj, Bindings2._scope, func);
        public static void BindDampingRatioInterval(this FixedJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.dampingRatio = func());
        public static void BindDampingRatioInterval(this FixedJoint2D obj, float seconds, Func<System.Single> func)
            => BindDampingRatioInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFrequency(this FixedJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.frequency = v);
        public static void BindFrequency(this FixedJoint2D obj, IProperty<System.Single> property)
            => BindFrequency(obj, Bindings2._scope, property);
        public static void BindFrequency(this FixedJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.frequency = func());
        public static void BindFrequency(this FixedJoint2D obj, Func<System.Single> func)
            => BindFrequency(obj, Bindings2._scope, func);
        public static void BindFrequencyInterval(this FixedJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.frequency = func());
        public static void BindFrequencyInterval(this FixedJoint2D obj, float seconds, Func<System.Single> func)
            => BindFrequencyInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakForce(this FixedJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakForce = v);
        public static void BindBreakForce(this FixedJoint2D obj, IProperty<System.Single> property)
            => BindBreakForce(obj, Bindings2._scope, property);
        public static void BindBreakForce(this FixedJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakForce = func());
        public static void BindBreakForce(this FixedJoint2D obj, Func<System.Single> func)
            => BindBreakForce(obj, Bindings2._scope, func);
        public static void BindBreakForceInterval(this FixedJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakForce = func());
        public static void BindBreakForceInterval(this FixedJoint2D obj, float seconds, Func<System.Single> func)
            => BindBreakForceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakTorque(this FixedJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakTorque = v);
        public static void BindBreakTorque(this FixedJoint2D obj, IProperty<System.Single> property)
            => BindBreakTorque(obj, Bindings2._scope, property);
        public static void BindBreakTorque(this FixedJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakTorque = func());
        public static void BindBreakTorque(this FixedJoint2D obj, Func<System.Single> func)
            => BindBreakTorque(obj, Bindings2._scope, func);
        public static void BindBreakTorqueInterval(this FixedJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakTorque = func());
        public static void BindBreakTorqueInterval(this FixedJoint2D obj, float seconds, Func<System.Single> func)
            => BindBreakTorqueInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindEnableCollision(this FrictionJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enableCollision = v);
        public static void BindEnableCollision(this FrictionJoint2D obj, IProperty<System.Boolean> property)
            => BindEnableCollision(obj, Bindings2._scope, property);
        public static void BindEnableCollision(this FrictionJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enableCollision = func());
        public static void BindEnableCollision(this FrictionJoint2D obj, Func<System.Boolean> func)
            => BindEnableCollision(obj, Bindings2._scope, func);
        public static void BindEnableCollisionInterval(this FrictionJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enableCollision = func());
        public static void BindEnableCollisionInterval(this FrictionJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindEnableCollisionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedBody(this FrictionJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Rigidbody2D> property)
            => bindings.Bind(property, v => obj.connectedBody = v);
        public static void BindConnectedBody(this FrictionJoint2D obj, IProperty<UnityEngine.Rigidbody2D> property)
            => BindConnectedBody(obj, Bindings2._scope, property);
        public static void BindConnectedBody(this FrictionJoint2D obj, Bindings2 bindings, Func<UnityEngine.Rigidbody2D> func)
            => bindings.BindUpdate(() => obj.connectedBody = func());
        public static void BindConnectedBody(this FrictionJoint2D obj, Func<UnityEngine.Rigidbody2D> func)
            => BindConnectedBody(obj, Bindings2._scope, func);
        public static void BindConnectedBodyInterval(this FrictionJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rigidbody2D> func)
            => bindings.BindInterval(seconds, () => obj.connectedBody = func());
        public static void BindConnectedBodyInterval(this FrictionJoint2D obj, float seconds, Func<UnityEngine.Rigidbody2D> func)
            => BindConnectedBodyInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoConfigureConnectedAnchor(this FrictionJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoConfigureConnectedAnchor = v);
        public static void BindAutoConfigureConnectedAnchor(this FrictionJoint2D obj, IProperty<System.Boolean> property)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindAutoConfigureConnectedAnchor(this FrictionJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchor(this FrictionJoint2D obj, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindAutoConfigureConnectedAnchorInterval(this FrictionJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchorInterval(this FrictionJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAnchor(this FrictionJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.anchor = v);
        public static void BindAnchor(this FrictionJoint2D obj, IProperty<UnityEngine.Vector2> property)
            => BindAnchor(obj, Bindings2._scope, property);
        public static void BindAnchor(this FrictionJoint2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.anchor = func());
        public static void BindAnchor(this FrictionJoint2D obj, Func<UnityEngine.Vector2> func)
            => BindAnchor(obj, Bindings2._scope, func);
        public static void BindAnchorInterval(this FrictionJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.anchor = func());
        public static void BindAnchorInterval(this FrictionJoint2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedAnchor(this FrictionJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.connectedAnchor = v);
        public static void BindConnectedAnchor(this FrictionJoint2D obj, IProperty<UnityEngine.Vector2> property)
            => BindConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindConnectedAnchor(this FrictionJoint2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = func());
        public static void BindConnectedAnchor(this FrictionJoint2D obj, Func<UnityEngine.Vector2> func)
            => BindConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindConnectedAnchorInterval(this FrictionJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.connectedAnchor = func());
        public static void BindConnectedAnchorInterval(this FrictionJoint2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMaxForce(this FrictionJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.maxForce = v);
        public static void BindMaxForce(this FrictionJoint2D obj, IProperty<System.Single> property)
            => BindMaxForce(obj, Bindings2._scope, property);
        public static void BindMaxForce(this FrictionJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.maxForce = func());
        public static void BindMaxForce(this FrictionJoint2D obj, Func<System.Single> func)
            => BindMaxForce(obj, Bindings2._scope, func);
        public static void BindMaxForceInterval(this FrictionJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.maxForce = func());
        public static void BindMaxForceInterval(this FrictionJoint2D obj, float seconds, Func<System.Single> func)
            => BindMaxForceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMaxTorque(this FrictionJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.maxTorque = v);
        public static void BindMaxTorque(this FrictionJoint2D obj, IProperty<System.Single> property)
            => BindMaxTorque(obj, Bindings2._scope, property);
        public static void BindMaxTorque(this FrictionJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.maxTorque = func());
        public static void BindMaxTorque(this FrictionJoint2D obj, Func<System.Single> func)
            => BindMaxTorque(obj, Bindings2._scope, func);
        public static void BindMaxTorqueInterval(this FrictionJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.maxTorque = func());
        public static void BindMaxTorqueInterval(this FrictionJoint2D obj, float seconds, Func<System.Single> func)
            => BindMaxTorqueInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakForce(this FrictionJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakForce = v);
        public static void BindBreakForce(this FrictionJoint2D obj, IProperty<System.Single> property)
            => BindBreakForce(obj, Bindings2._scope, property);
        public static void BindBreakForce(this FrictionJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakForce = func());
        public static void BindBreakForce(this FrictionJoint2D obj, Func<System.Single> func)
            => BindBreakForce(obj, Bindings2._scope, func);
        public static void BindBreakForceInterval(this FrictionJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakForce = func());
        public static void BindBreakForceInterval(this FrictionJoint2D obj, float seconds, Func<System.Single> func)
            => BindBreakForceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakTorque(this FrictionJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakTorque = v);
        public static void BindBreakTorque(this FrictionJoint2D obj, IProperty<System.Single> property)
            => BindBreakTorque(obj, Bindings2._scope, property);
        public static void BindBreakTorque(this FrictionJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakTorque = func());
        public static void BindBreakTorque(this FrictionJoint2D obj, Func<System.Single> func)
            => BindBreakTorque(obj, Bindings2._scope, func);
        public static void BindBreakTorqueInterval(this FrictionJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakTorque = func());
        public static void BindBreakTorqueInterval(this FrictionJoint2D obj, float seconds, Func<System.Single> func)
            => BindBreakTorqueInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindIgnoreReversedGraphics(this UnityEngine.UI.GraphicRaycaster obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.ignoreReversedGraphics = v);
        public static void BindIgnoreReversedGraphics(this UnityEngine.UI.GraphicRaycaster obj, IProperty<System.Boolean> property)
            => BindIgnoreReversedGraphics(obj, Bindings2._scope, property);
        public static void BindIgnoreReversedGraphics(this UnityEngine.UI.GraphicRaycaster obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.ignoreReversedGraphics = func());
        public static void BindIgnoreReversedGraphics(this UnityEngine.UI.GraphicRaycaster obj, Func<System.Boolean> func)
            => BindIgnoreReversedGraphics(obj, Bindings2._scope, func);
        public static void BindIgnoreReversedGraphicsInterval(this UnityEngine.UI.GraphicRaycaster obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.ignoreReversedGraphics = func());
        public static void BindIgnoreReversedGraphicsInterval(this UnityEngine.UI.GraphicRaycaster obj, float seconds, Func<System.Boolean> func)
            => BindIgnoreReversedGraphicsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBlockingObjects(this UnityEngine.UI.GraphicRaycaster obj, Bindings2 bindings, IProperty<UnityEngine.UI.GraphicRaycaster.BlockingObjects> property)
            => bindings.Bind(property, v => obj.blockingObjects = v);
        public static void BindBlockingObjects(this UnityEngine.UI.GraphicRaycaster obj, IProperty<UnityEngine.UI.GraphicRaycaster.BlockingObjects> property)
            => BindBlockingObjects(obj, Bindings2._scope, property);
        public static void BindBlockingObjects(this UnityEngine.UI.GraphicRaycaster obj, Bindings2 bindings, Func<UnityEngine.UI.GraphicRaycaster.BlockingObjects> func)
            => bindings.BindUpdate(() => obj.blockingObjects = func());
        public static void BindBlockingObjects(this UnityEngine.UI.GraphicRaycaster obj, Func<UnityEngine.UI.GraphicRaycaster.BlockingObjects> func)
            => BindBlockingObjects(obj, Bindings2._scope, func);
        public static void BindBlockingObjectsInterval(this UnityEngine.UI.GraphicRaycaster obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.GraphicRaycaster.BlockingObjects> func)
            => bindings.BindInterval(seconds, () => obj.blockingObjects = func());
        public static void BindBlockingObjectsInterval(this UnityEngine.UI.GraphicRaycaster obj, float seconds, Func<UnityEngine.UI.GraphicRaycaster.BlockingObjects> func)
            => BindBlockingObjectsInterval(obj, Bindings2._scope, seconds, func);
        #if UNITY_2020_2_OR_NEWER
        public static void BindBlockingMask(this UnityEngine.UI.GraphicRaycaster obj, Bindings2 bindings, IProperty<UnityEngine.LayerMask> property)
            => bindings.Bind(property, v => obj.blockingMask = v);
        public static void BindBlockingMask(this UnityEngine.UI.GraphicRaycaster obj, IProperty<UnityEngine.LayerMask> property)
            => BindBlockingMask(obj, Bindings2._scope, property);
        public static void BindBlockingMask(this UnityEngine.UI.GraphicRaycaster obj, Bindings2 bindings, Func<UnityEngine.LayerMask> func)
            => bindings.BindUpdate(() => obj.blockingMask = func());
        public static void BindBlockingMask(this UnityEngine.UI.GraphicRaycaster obj, Func<UnityEngine.LayerMask> func)
            => BindBlockingMask(obj, Bindings2._scope, func);
        public static void BindBlockingMaskInterval(this UnityEngine.UI.GraphicRaycaster obj, Bindings2 bindings, float seconds, Func<UnityEngine.LayerMask> func)
            => bindings.BindInterval(seconds, () => obj.blockingMask = func());
        public static void BindBlockingMaskInterval(this UnityEngine.UI.GraphicRaycaster obj, float seconds, Func<UnityEngine.LayerMask> func)
            => BindBlockingMaskInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #endif


        public static void BindCellSize(this Grid obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.cellSize = v);
        public static void BindCellSize(this Grid obj, IProperty<UnityEngine.Vector3> property)
            => BindCellSize(obj, Bindings2._scope, property);
        public static void BindCellSize(this Grid obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.cellSize = func());
        public static void BindCellSize(this Grid obj, Func<UnityEngine.Vector3> func)
            => BindCellSize(obj, Bindings2._scope, func);
        public static void BindCellSizeInterval(this Grid obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.cellSize = func());
        public static void BindCellSizeInterval(this Grid obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindCellSizeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCellSizeLerp(this Grid obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.cellSize = Vector3.Lerp(obj.cellSize, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCellSizeLerp(this Grid obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCellSizeLerp(obj, Bindings2._scope, speed, property);
        public static void BindCellSizeLerp(this Grid obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.cellSize = Vector3.Lerp(obj.cellSize, func(), speed * Time.smoothDeltaTime));
        public static void BindCellSizeLerp(this Grid obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCellSizeLerp(obj, Bindings2._scope, speed, func);
        public static void BindCellSizeTowards(this Grid obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.cellSize = Vector3.MoveTowards(obj.cellSize, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCellSizeTowards(this Grid obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCellSizeTowards(obj, Bindings2._scope, speed, property);
        public static void BindCellSizeTowards(this Grid obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.cellSize = Vector3.MoveTowards(obj.cellSize, func(), speed * Time.smoothDeltaTime));
        public static void BindCellSizeTowards(this Grid obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCellSizeTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateCellSize(this Grid obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.cellSize = Vector3.Lerp(start, end, t));
        public static void AnimateCellSize(this Grid obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCellSize(obj, Bindings2._scope, start, end, curve);
        public static void AnimateCellSize(this Grid obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCellSize(obj, Bindings2._scope, obj.cellSize, end, curve);
        public static void AnimateCellSize(this Grid obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCellSize(obj, Bindings2._scope, end, curve);
        public static void BindCellGap(this Grid obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.cellGap = v);
        public static void BindCellGap(this Grid obj, IProperty<UnityEngine.Vector3> property)
            => BindCellGap(obj, Bindings2._scope, property);
        public static void BindCellGap(this Grid obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.cellGap = func());
        public static void BindCellGap(this Grid obj, Func<UnityEngine.Vector3> func)
            => BindCellGap(obj, Bindings2._scope, func);
        public static void BindCellGapInterval(this Grid obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.cellGap = func());
        public static void BindCellGapInterval(this Grid obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindCellGapInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCellGapLerp(this Grid obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.cellGap = Vector3.Lerp(obj.cellGap, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCellGapLerp(this Grid obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCellGapLerp(obj, Bindings2._scope, speed, property);
        public static void BindCellGapLerp(this Grid obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.cellGap = Vector3.Lerp(obj.cellGap, func(), speed * Time.smoothDeltaTime));
        public static void BindCellGapLerp(this Grid obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCellGapLerp(obj, Bindings2._scope, speed, func);
        public static void BindCellGapTowards(this Grid obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.cellGap = Vector3.MoveTowards(obj.cellGap, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCellGapTowards(this Grid obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCellGapTowards(obj, Bindings2._scope, speed, property);
        public static void BindCellGapTowards(this Grid obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.cellGap = Vector3.MoveTowards(obj.cellGap, func(), speed * Time.smoothDeltaTime));
        public static void BindCellGapTowards(this Grid obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCellGapTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateCellGap(this Grid obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.cellGap = Vector3.Lerp(start, end, t));
        public static void AnimateCellGap(this Grid obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCellGap(obj, Bindings2._scope, start, end, curve);
        public static void AnimateCellGap(this Grid obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCellGap(obj, Bindings2._scope, obj.cellGap, end, curve);
        public static void AnimateCellGap(this Grid obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCellGap(obj, Bindings2._scope, end, curve);
        public static void BindCellLayout(this Grid obj, Bindings2 bindings, IProperty<UnityEngine.GridLayout.CellLayout> property)
            => bindings.Bind(property, v => obj.cellLayout = v);
        public static void BindCellLayout(this Grid obj, IProperty<UnityEngine.GridLayout.CellLayout> property)
            => BindCellLayout(obj, Bindings2._scope, property);
        public static void BindCellLayout(this Grid obj, Bindings2 bindings, Func<UnityEngine.GridLayout.CellLayout> func)
            => bindings.BindUpdate(() => obj.cellLayout = func());
        public static void BindCellLayout(this Grid obj, Func<UnityEngine.GridLayout.CellLayout> func)
            => BindCellLayout(obj, Bindings2._scope, func);
        public static void BindCellLayoutInterval(this Grid obj, Bindings2 bindings, float seconds, Func<UnityEngine.GridLayout.CellLayout> func)
            => bindings.BindInterval(seconds, () => obj.cellLayout = func());
        public static void BindCellLayoutInterval(this Grid obj, float seconds, Func<UnityEngine.GridLayout.CellLayout> func)
            => BindCellLayoutInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCellSwizzle(this Grid obj, Bindings2 bindings, IProperty<UnityEngine.GridLayout.CellSwizzle> property)
            => bindings.Bind(property, v => obj.cellSwizzle = v);
        public static void BindCellSwizzle(this Grid obj, IProperty<UnityEngine.GridLayout.CellSwizzle> property)
            => BindCellSwizzle(obj, Bindings2._scope, property);
        public static void BindCellSwizzle(this Grid obj, Bindings2 bindings, Func<UnityEngine.GridLayout.CellSwizzle> func)
            => bindings.BindUpdate(() => obj.cellSwizzle = func());
        public static void BindCellSwizzle(this Grid obj, Func<UnityEngine.GridLayout.CellSwizzle> func)
            => BindCellSwizzle(obj, Bindings2._scope, func);
        public static void BindCellSwizzleInterval(this Grid obj, Bindings2 bindings, float seconds, Func<UnityEngine.GridLayout.CellSwizzle> func)
            => bindings.BindInterval(seconds, () => obj.cellSwizzle = func());
        public static void BindCellSwizzleInterval(this Grid obj, float seconds, Func<UnityEngine.GridLayout.CellSwizzle> func)
            => BindCellSwizzleInterval(obj, Bindings2._scope, seconds, func);


        #if UNITY_GUI
        public static void BindPadding(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, IProperty<UnityEngine.RectOffset> property)
            => bindings.Bind(property, v => obj.padding = v);
        public static void BindPadding(this UnityEngine.UI.GridLayoutGroup obj, IProperty<UnityEngine.RectOffset> property)
            => BindPadding(obj, Bindings2._scope, property);
        public static void BindPadding(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, Func<UnityEngine.RectOffset> func)
            => bindings.BindUpdate(() => obj.padding = func());
        public static void BindPadding(this UnityEngine.UI.GridLayoutGroup obj, Func<UnityEngine.RectOffset> func)
            => BindPadding(obj, Bindings2._scope, func);
        public static void BindPaddingInterval(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, float seconds, Func<UnityEngine.RectOffset> func)
            => bindings.BindInterval(seconds, () => obj.padding = func());
        public static void BindPaddingInterval(this UnityEngine.UI.GridLayoutGroup obj, float seconds, Func<UnityEngine.RectOffset> func)
            => BindPaddingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCellSize(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.cellSize = v);
        public static void BindCellSize(this UnityEngine.UI.GridLayoutGroup obj, IProperty<UnityEngine.Vector2> property)
            => BindCellSize(obj, Bindings2._scope, property);
        public static void BindCellSize(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.cellSize = func());
        public static void BindCellSize(this UnityEngine.UI.GridLayoutGroup obj, Func<UnityEngine.Vector2> func)
            => BindCellSize(obj, Bindings2._scope, func);
        public static void BindCellSizeInterval(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.cellSize = func());
        public static void BindCellSizeInterval(this UnityEngine.UI.GridLayoutGroup obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindCellSizeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSpacing(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.spacing = v);
        public static void BindSpacing(this UnityEngine.UI.GridLayoutGroup obj, IProperty<UnityEngine.Vector2> property)
            => BindSpacing(obj, Bindings2._scope, property);
        public static void BindSpacing(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.spacing = func());
        public static void BindSpacing(this UnityEngine.UI.GridLayoutGroup obj, Func<UnityEngine.Vector2> func)
            => BindSpacing(obj, Bindings2._scope, func);
        public static void BindSpacingInterval(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.spacing = func());
        public static void BindSpacingInterval(this UnityEngine.UI.GridLayoutGroup obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindSpacingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindStartCorner(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, IProperty<UnityEngine.UI.GridLayoutGroup.Corner> property)
            => bindings.Bind(property, v => obj.startCorner = v);
        public static void BindStartCorner(this UnityEngine.UI.GridLayoutGroup obj, IProperty<UnityEngine.UI.GridLayoutGroup.Corner> property)
            => BindStartCorner(obj, Bindings2._scope, property);
        public static void BindStartCorner(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, Func<UnityEngine.UI.GridLayoutGroup.Corner> func)
            => bindings.BindUpdate(() => obj.startCorner = func());
        public static void BindStartCorner(this UnityEngine.UI.GridLayoutGroup obj, Func<UnityEngine.UI.GridLayoutGroup.Corner> func)
            => BindStartCorner(obj, Bindings2._scope, func);
        public static void BindStartCornerInterval(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.GridLayoutGroup.Corner> func)
            => bindings.BindInterval(seconds, () => obj.startCorner = func());
        public static void BindStartCornerInterval(this UnityEngine.UI.GridLayoutGroup obj, float seconds, Func<UnityEngine.UI.GridLayoutGroup.Corner> func)
            => BindStartCornerInterval(obj, Bindings2._scope, seconds, func);
        public static void BindStartAxis(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, IProperty<UnityEngine.UI.GridLayoutGroup.Axis> property)
            => bindings.Bind(property, v => obj.startAxis = v);
        public static void BindStartAxis(this UnityEngine.UI.GridLayoutGroup obj, IProperty<UnityEngine.UI.GridLayoutGroup.Axis> property)
            => BindStartAxis(obj, Bindings2._scope, property);
        public static void BindStartAxis(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, Func<UnityEngine.UI.GridLayoutGroup.Axis> func)
            => bindings.BindUpdate(() => obj.startAxis = func());
        public static void BindStartAxis(this UnityEngine.UI.GridLayoutGroup obj, Func<UnityEngine.UI.GridLayoutGroup.Axis> func)
            => BindStartAxis(obj, Bindings2._scope, func);
        public static void BindStartAxisInterval(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.GridLayoutGroup.Axis> func)
            => bindings.BindInterval(seconds, () => obj.startAxis = func());
        public static void BindStartAxisInterval(this UnityEngine.UI.GridLayoutGroup obj, float seconds, Func<UnityEngine.UI.GridLayoutGroup.Axis> func)
            => BindStartAxisInterval(obj, Bindings2._scope, seconds, func);
        public static void BindChildAlignment(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, IProperty<UnityEngine.TextAnchor> property)
            => bindings.Bind(property, v => obj.childAlignment = v);
        public static void BindChildAlignment(this UnityEngine.UI.GridLayoutGroup obj, IProperty<UnityEngine.TextAnchor> property)
            => BindChildAlignment(obj, Bindings2._scope, property);
        public static void BindChildAlignment(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, Func<UnityEngine.TextAnchor> func)
            => bindings.BindUpdate(() => obj.childAlignment = func());
        public static void BindChildAlignment(this UnityEngine.UI.GridLayoutGroup obj, Func<UnityEngine.TextAnchor> func)
            => BindChildAlignment(obj, Bindings2._scope, func);
        public static void BindChildAlignmentInterval(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, float seconds, Func<UnityEngine.TextAnchor> func)
            => bindings.BindInterval(seconds, () => obj.childAlignment = func());
        public static void BindChildAlignmentInterval(this UnityEngine.UI.GridLayoutGroup obj, float seconds, Func<UnityEngine.TextAnchor> func)
            => BindChildAlignmentInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConstraint(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, IProperty<UnityEngine.UI.GridLayoutGroup.Constraint> property)
            => bindings.Bind(property, v => obj.constraint = v);
        public static void BindConstraint(this UnityEngine.UI.GridLayoutGroup obj, IProperty<UnityEngine.UI.GridLayoutGroup.Constraint> property)
            => BindConstraint(obj, Bindings2._scope, property);
        public static void BindConstraint(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, Func<UnityEngine.UI.GridLayoutGroup.Constraint> func)
            => bindings.BindUpdate(() => obj.constraint = func());
        public static void BindConstraint(this UnityEngine.UI.GridLayoutGroup obj, Func<UnityEngine.UI.GridLayoutGroup.Constraint> func)
            => BindConstraint(obj, Bindings2._scope, func);
        public static void BindConstraintInterval(this UnityEngine.UI.GridLayoutGroup obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.GridLayoutGroup.Constraint> func)
            => bindings.BindInterval(seconds, () => obj.constraint = func());
        public static void BindConstraintInterval(this UnityEngine.UI.GridLayoutGroup obj, float seconds, Func<UnityEngine.UI.GridLayoutGroup.Constraint> func)
            => BindConstraintInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS
        public static void BindConnectedBody(this HingeJoint obj, Bindings2 bindings, IProperty<UnityEngine.Rigidbody> property)
            => bindings.Bind(property, v => obj.connectedBody = v);
        public static void BindConnectedBody(this HingeJoint obj, IProperty<UnityEngine.Rigidbody> property)
            => BindConnectedBody(obj, Bindings2._scope, property);
        public static void BindConnectedBody(this HingeJoint obj, Bindings2 bindings, Func<UnityEngine.Rigidbody> func)
            => bindings.BindUpdate(() => obj.connectedBody = func());
        public static void BindConnectedBody(this HingeJoint obj, Func<UnityEngine.Rigidbody> func)
            => BindConnectedBody(obj, Bindings2._scope, func);
        public static void BindConnectedBodyInterval(this HingeJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rigidbody> func)
            => bindings.BindInterval(seconds, () => obj.connectedBody = func());
        public static void BindConnectedBodyInterval(this HingeJoint obj, float seconds, Func<UnityEngine.Rigidbody> func)
            => BindConnectedBodyInterval(obj, Bindings2._scope, seconds, func);
        #if UNITY_2020_2_OR_NEWER
        public static void BindConnectedArticulationBody(this HingeJoint obj, Bindings2 bindings, IProperty<UnityEngine.ArticulationBody> property)
            => bindings.Bind(property, v => obj.connectedArticulationBody = v);
        public static void BindConnectedArticulationBody(this HingeJoint obj, IProperty<UnityEngine.ArticulationBody> property)
            => BindConnectedArticulationBody(obj, Bindings2._scope, property);
        public static void BindConnectedArticulationBody(this HingeJoint obj, Bindings2 bindings, Func<UnityEngine.ArticulationBody> func)
            => bindings.BindUpdate(() => obj.connectedArticulationBody = func());
        public static void BindConnectedArticulationBody(this HingeJoint obj, Func<UnityEngine.ArticulationBody> func)
            => BindConnectedArticulationBody(obj, Bindings2._scope, func);
        public static void BindConnectedArticulationBodyInterval(this HingeJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.ArticulationBody> func)
            => bindings.BindInterval(seconds, () => obj.connectedArticulationBody = func());
        public static void BindConnectedArticulationBodyInterval(this HingeJoint obj, float seconds, Func<UnityEngine.ArticulationBody> func)
            => BindConnectedArticulationBodyInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindAnchor(this HingeJoint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.anchor = v);
        public static void BindAnchor(this HingeJoint obj, IProperty<UnityEngine.Vector3> property)
            => BindAnchor(obj, Bindings2._scope, property);
        public static void BindAnchor(this HingeJoint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.anchor = func());
        public static void BindAnchor(this HingeJoint obj, Func<UnityEngine.Vector3> func)
            => BindAnchor(obj, Bindings2._scope, func);
        public static void BindAnchorInterval(this HingeJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.anchor = func());
        public static void BindAnchorInterval(this HingeJoint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAnchorLerp(this HingeJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.anchor = Vector3.Lerp(obj.anchor, property.Value, speed * Time.smoothDeltaTime));
        public static void BindAnchorLerp(this HingeJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindAnchorLerp(obj, Bindings2._scope, speed, property);
        public static void BindAnchorLerp(this HingeJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.anchor = Vector3.Lerp(obj.anchor, func(), speed * Time.smoothDeltaTime));
        public static void BindAnchorLerp(this HingeJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindAnchorLerp(obj, Bindings2._scope, speed, func);
        public static void BindAnchorTowards(this HingeJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.anchor = Vector3.MoveTowards(obj.anchor, property.Value, speed * Time.smoothDeltaTime));
        public static void BindAnchorTowards(this HingeJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindAnchorTowards(obj, Bindings2._scope, speed, property);
        public static void BindAnchorTowards(this HingeJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.anchor = Vector3.MoveTowards(obj.anchor, func(), speed * Time.smoothDeltaTime));
        public static void BindAnchorTowards(this HingeJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindAnchorTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateAnchor(this HingeJoint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.anchor = Vector3.Lerp(start, end, t));
        public static void AnimateAnchor(this HingeJoint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAnchor(obj, Bindings2._scope, start, end, curve);
        public static void AnimateAnchor(this HingeJoint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAnchor(obj, Bindings2._scope, obj.anchor, end, curve);
        public static void AnimateAnchor(this HingeJoint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAnchor(obj, Bindings2._scope, end, curve);
        public static void BindAxis(this HingeJoint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.axis = v);
        public static void BindAxis(this HingeJoint obj, IProperty<UnityEngine.Vector3> property)
            => BindAxis(obj, Bindings2._scope, property);
        public static void BindAxis(this HingeJoint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.axis = func());
        public static void BindAxis(this HingeJoint obj, Func<UnityEngine.Vector3> func)
            => BindAxis(obj, Bindings2._scope, func);
        public static void BindAxisInterval(this HingeJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.axis = func());
        public static void BindAxisInterval(this HingeJoint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindAxisInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAxisLerp(this HingeJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.axis = Vector3.Lerp(obj.axis, property.Value, speed * Time.smoothDeltaTime));
        public static void BindAxisLerp(this HingeJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindAxisLerp(obj, Bindings2._scope, speed, property);
        public static void BindAxisLerp(this HingeJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.axis = Vector3.Lerp(obj.axis, func(), speed * Time.smoothDeltaTime));
        public static void BindAxisLerp(this HingeJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindAxisLerp(obj, Bindings2._scope, speed, func);
        public static void BindAxisTowards(this HingeJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.axis = Vector3.MoveTowards(obj.axis, property.Value, speed * Time.smoothDeltaTime));
        public static void BindAxisTowards(this HingeJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindAxisTowards(obj, Bindings2._scope, speed, property);
        public static void BindAxisTowards(this HingeJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.axis = Vector3.MoveTowards(obj.axis, func(), speed * Time.smoothDeltaTime));
        public static void BindAxisTowards(this HingeJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindAxisTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateAxis(this HingeJoint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.axis = Vector3.Lerp(start, end, t));
        public static void AnimateAxis(this HingeJoint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAxis(obj, Bindings2._scope, start, end, curve);
        public static void AnimateAxis(this HingeJoint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAxis(obj, Bindings2._scope, obj.axis, end, curve);
        public static void AnimateAxis(this HingeJoint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAxis(obj, Bindings2._scope, end, curve);
        public static void BindAutoConfigureConnectedAnchor(this HingeJoint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoConfigureConnectedAnchor = v);
        public static void BindAutoConfigureConnectedAnchor(this HingeJoint obj, IProperty<System.Boolean> property)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindAutoConfigureConnectedAnchor(this HingeJoint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchor(this HingeJoint obj, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindAutoConfigureConnectedAnchorInterval(this HingeJoint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchorInterval(this HingeJoint obj, float seconds, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedAnchor(this HingeJoint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.connectedAnchor = v);
        public static void BindConnectedAnchor(this HingeJoint obj, IProperty<UnityEngine.Vector3> property)
            => BindConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindConnectedAnchor(this HingeJoint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = func());
        public static void BindConnectedAnchor(this HingeJoint obj, Func<UnityEngine.Vector3> func)
            => BindConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindConnectedAnchorInterval(this HingeJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.connectedAnchor = func());
        public static void BindConnectedAnchorInterval(this HingeJoint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedAnchorLerp(this HingeJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.connectedAnchor = Vector3.Lerp(obj.connectedAnchor, property.Value, speed * Time.smoothDeltaTime));
        public static void BindConnectedAnchorLerp(this HingeJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindConnectedAnchorLerp(obj, Bindings2._scope, speed, property);
        public static void BindConnectedAnchorLerp(this HingeJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = Vector3.Lerp(obj.connectedAnchor, func(), speed * Time.smoothDeltaTime));
        public static void BindConnectedAnchorLerp(this HingeJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindConnectedAnchorLerp(obj, Bindings2._scope, speed, func);
        public static void BindConnectedAnchorTowards(this HingeJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.connectedAnchor = Vector3.MoveTowards(obj.connectedAnchor, property.Value, speed * Time.smoothDeltaTime));
        public static void BindConnectedAnchorTowards(this HingeJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindConnectedAnchorTowards(obj, Bindings2._scope, speed, property);
        public static void BindConnectedAnchorTowards(this HingeJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = Vector3.MoveTowards(obj.connectedAnchor, func(), speed * Time.smoothDeltaTime));
        public static void BindConnectedAnchorTowards(this HingeJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindConnectedAnchorTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateConnectedAnchor(this HingeJoint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.connectedAnchor = Vector3.Lerp(start, end, t));
        public static void AnimateConnectedAnchor(this HingeJoint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateConnectedAnchor(obj, Bindings2._scope, start, end, curve);
        public static void AnimateConnectedAnchor(this HingeJoint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateConnectedAnchor(obj, Bindings2._scope, obj.connectedAnchor, end, curve);
        public static void AnimateConnectedAnchor(this HingeJoint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateConnectedAnchor(obj, Bindings2._scope, end, curve);
        public static void BindUseSpring(this HingeJoint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useSpring = v);
        public static void BindUseSpring(this HingeJoint obj, IProperty<System.Boolean> property)
            => BindUseSpring(obj, Bindings2._scope, property);
        public static void BindUseSpring(this HingeJoint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useSpring = func());
        public static void BindUseSpring(this HingeJoint obj, Func<System.Boolean> func)
            => BindUseSpring(obj, Bindings2._scope, func);
        public static void BindUseSpringInterval(this HingeJoint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useSpring = func());
        public static void BindUseSpringInterval(this HingeJoint obj, float seconds, Func<System.Boolean> func)
            => BindUseSpringInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSpring(this HingeJoint obj, Bindings2 bindings, IProperty<UnityEngine.JointSpring> property)
            => bindings.Bind(property, v => obj.spring = v);
        public static void BindSpring(this HingeJoint obj, IProperty<UnityEngine.JointSpring> property)
            => BindSpring(obj, Bindings2._scope, property);
        public static void BindSpring(this HingeJoint obj, Bindings2 bindings, Func<UnityEngine.JointSpring> func)
            => bindings.BindUpdate(() => obj.spring = func());
        public static void BindSpring(this HingeJoint obj, Func<UnityEngine.JointSpring> func)
            => BindSpring(obj, Bindings2._scope, func);
        public static void BindSpringInterval(this HingeJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.JointSpring> func)
            => bindings.BindInterval(seconds, () => obj.spring = func());
        public static void BindSpringInterval(this HingeJoint obj, float seconds, Func<UnityEngine.JointSpring> func)
            => BindSpringInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseMotor(this HingeJoint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useMotor = v);
        public static void BindUseMotor(this HingeJoint obj, IProperty<System.Boolean> property)
            => BindUseMotor(obj, Bindings2._scope, property);
        public static void BindUseMotor(this HingeJoint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useMotor = func());
        public static void BindUseMotor(this HingeJoint obj, Func<System.Boolean> func)
            => BindUseMotor(obj, Bindings2._scope, func);
        public static void BindUseMotorInterval(this HingeJoint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useMotor = func());
        public static void BindUseMotorInterval(this HingeJoint obj, float seconds, Func<System.Boolean> func)
            => BindUseMotorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMotor(this HingeJoint obj, Bindings2 bindings, IProperty<UnityEngine.JointMotor> property)
            => bindings.Bind(property, v => obj.motor = v);
        public static void BindMotor(this HingeJoint obj, IProperty<UnityEngine.JointMotor> property)
            => BindMotor(obj, Bindings2._scope, property);
        public static void BindMotor(this HingeJoint obj, Bindings2 bindings, Func<UnityEngine.JointMotor> func)
            => bindings.BindUpdate(() => obj.motor = func());
        public static void BindMotor(this HingeJoint obj, Func<UnityEngine.JointMotor> func)
            => BindMotor(obj, Bindings2._scope, func);
        public static void BindMotorInterval(this HingeJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.JointMotor> func)
            => bindings.BindInterval(seconds, () => obj.motor = func());
        public static void BindMotorInterval(this HingeJoint obj, float seconds, Func<UnityEngine.JointMotor> func)
            => BindMotorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseLimits(this HingeJoint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useLimits = v);
        public static void BindUseLimits(this HingeJoint obj, IProperty<System.Boolean> property)
            => BindUseLimits(obj, Bindings2._scope, property);
        public static void BindUseLimits(this HingeJoint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useLimits = func());
        public static void BindUseLimits(this HingeJoint obj, Func<System.Boolean> func)
            => BindUseLimits(obj, Bindings2._scope, func);
        public static void BindUseLimitsInterval(this HingeJoint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useLimits = func());
        public static void BindUseLimitsInterval(this HingeJoint obj, float seconds, Func<System.Boolean> func)
            => BindUseLimitsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLimits(this HingeJoint obj, Bindings2 bindings, IProperty<UnityEngine.JointLimits> property)
            => bindings.Bind(property, v => obj.limits = v);
        public static void BindLimits(this HingeJoint obj, IProperty<UnityEngine.JointLimits> property)
            => BindLimits(obj, Bindings2._scope, property);
        public static void BindLimits(this HingeJoint obj, Bindings2 bindings, Func<UnityEngine.JointLimits> func)
            => bindings.BindUpdate(() => obj.limits = func());
        public static void BindLimits(this HingeJoint obj, Func<UnityEngine.JointLimits> func)
            => BindLimits(obj, Bindings2._scope, func);
        public static void BindLimitsInterval(this HingeJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.JointLimits> func)
            => bindings.BindInterval(seconds, () => obj.limits = func());
        public static void BindLimitsInterval(this HingeJoint obj, float seconds, Func<UnityEngine.JointLimits> func)
            => BindLimitsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakForce(this HingeJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakForce = v);
        public static void BindBreakForce(this HingeJoint obj, IProperty<System.Single> property)
            => BindBreakForce(obj, Bindings2._scope, property);
        public static void BindBreakForce(this HingeJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakForce = func());
        public static void BindBreakForce(this HingeJoint obj, Func<System.Single> func)
            => BindBreakForce(obj, Bindings2._scope, func);
        public static void BindBreakForceInterval(this HingeJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakForce = func());
        public static void BindBreakForceInterval(this HingeJoint obj, float seconds, Func<System.Single> func)
            => BindBreakForceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakTorque(this HingeJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakTorque = v);
        public static void BindBreakTorque(this HingeJoint obj, IProperty<System.Single> property)
            => BindBreakTorque(obj, Bindings2._scope, property);
        public static void BindBreakTorque(this HingeJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakTorque = func());
        public static void BindBreakTorque(this HingeJoint obj, Func<System.Single> func)
            => BindBreakTorque(obj, Bindings2._scope, func);
        public static void BindBreakTorqueInterval(this HingeJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakTorque = func());
        public static void BindBreakTorqueInterval(this HingeJoint obj, float seconds, Func<System.Single> func)
            => BindBreakTorqueInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEnableCollision(this HingeJoint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enableCollision = v);
        public static void BindEnableCollision(this HingeJoint obj, IProperty<System.Boolean> property)
            => BindEnableCollision(obj, Bindings2._scope, property);
        public static void BindEnableCollision(this HingeJoint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enableCollision = func());
        public static void BindEnableCollision(this HingeJoint obj, Func<System.Boolean> func)
            => BindEnableCollision(obj, Bindings2._scope, func);
        public static void BindEnableCollisionInterval(this HingeJoint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enableCollision = func());
        public static void BindEnableCollisionInterval(this HingeJoint obj, float seconds, Func<System.Boolean> func)
            => BindEnableCollisionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEnablePreprocessing(this HingeJoint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enablePreprocessing = v);
        public static void BindEnablePreprocessing(this HingeJoint obj, IProperty<System.Boolean> property)
            => BindEnablePreprocessing(obj, Bindings2._scope, property);
        public static void BindEnablePreprocessing(this HingeJoint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enablePreprocessing = func());
        public static void BindEnablePreprocessing(this HingeJoint obj, Func<System.Boolean> func)
            => BindEnablePreprocessing(obj, Bindings2._scope, func);
        public static void BindEnablePreprocessingInterval(this HingeJoint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enablePreprocessing = func());
        public static void BindEnablePreprocessingInterval(this HingeJoint obj, float seconds, Func<System.Boolean> func)
            => BindEnablePreprocessingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMassScale(this HingeJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.massScale = v);
        public static void BindMassScale(this HingeJoint obj, IProperty<System.Single> property)
            => BindMassScale(obj, Bindings2._scope, property);
        public static void BindMassScale(this HingeJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.massScale = func());
        public static void BindMassScale(this HingeJoint obj, Func<System.Single> func)
            => BindMassScale(obj, Bindings2._scope, func);
        public static void BindMassScaleInterval(this HingeJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.massScale = func());
        public static void BindMassScaleInterval(this HingeJoint obj, float seconds, Func<System.Single> func)
            => BindMassScaleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedMassScale(this HingeJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.connectedMassScale = v);
        public static void BindConnectedMassScale(this HingeJoint obj, IProperty<System.Single> property)
            => BindConnectedMassScale(obj, Bindings2._scope, property);
        public static void BindConnectedMassScale(this HingeJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.connectedMassScale = func());
        public static void BindConnectedMassScale(this HingeJoint obj, Func<System.Single> func)
            => BindConnectedMassScale(obj, Bindings2._scope, func);
        public static void BindConnectedMassScaleInterval(this HingeJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.connectedMassScale = func());
        public static void BindConnectedMassScaleInterval(this HingeJoint obj, float seconds, Func<System.Single> func)
            => BindConnectedMassScaleInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindEnableCollision(this HingeJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enableCollision = v);
        public static void BindEnableCollision(this HingeJoint2D obj, IProperty<System.Boolean> property)
            => BindEnableCollision(obj, Bindings2._scope, property);
        public static void BindEnableCollision(this HingeJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enableCollision = func());
        public static void BindEnableCollision(this HingeJoint2D obj, Func<System.Boolean> func)
            => BindEnableCollision(obj, Bindings2._scope, func);
        public static void BindEnableCollisionInterval(this HingeJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enableCollision = func());
        public static void BindEnableCollisionInterval(this HingeJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindEnableCollisionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedBody(this HingeJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Rigidbody2D> property)
            => bindings.Bind(property, v => obj.connectedBody = v);
        public static void BindConnectedBody(this HingeJoint2D obj, IProperty<UnityEngine.Rigidbody2D> property)
            => BindConnectedBody(obj, Bindings2._scope, property);
        public static void BindConnectedBody(this HingeJoint2D obj, Bindings2 bindings, Func<UnityEngine.Rigidbody2D> func)
            => bindings.BindUpdate(() => obj.connectedBody = func());
        public static void BindConnectedBody(this HingeJoint2D obj, Func<UnityEngine.Rigidbody2D> func)
            => BindConnectedBody(obj, Bindings2._scope, func);
        public static void BindConnectedBodyInterval(this HingeJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rigidbody2D> func)
            => bindings.BindInterval(seconds, () => obj.connectedBody = func());
        public static void BindConnectedBodyInterval(this HingeJoint2D obj, float seconds, Func<UnityEngine.Rigidbody2D> func)
            => BindConnectedBodyInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoConfigureConnectedAnchor(this HingeJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoConfigureConnectedAnchor = v);
        public static void BindAutoConfigureConnectedAnchor(this HingeJoint2D obj, IProperty<System.Boolean> property)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindAutoConfigureConnectedAnchor(this HingeJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchor(this HingeJoint2D obj, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindAutoConfigureConnectedAnchorInterval(this HingeJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchorInterval(this HingeJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAnchor(this HingeJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.anchor = v);
        public static void BindAnchor(this HingeJoint2D obj, IProperty<UnityEngine.Vector2> property)
            => BindAnchor(obj, Bindings2._scope, property);
        public static void BindAnchor(this HingeJoint2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.anchor = func());
        public static void BindAnchor(this HingeJoint2D obj, Func<UnityEngine.Vector2> func)
            => BindAnchor(obj, Bindings2._scope, func);
        public static void BindAnchorInterval(this HingeJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.anchor = func());
        public static void BindAnchorInterval(this HingeJoint2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedAnchor(this HingeJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.connectedAnchor = v);
        public static void BindConnectedAnchor(this HingeJoint2D obj, IProperty<UnityEngine.Vector2> property)
            => BindConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindConnectedAnchor(this HingeJoint2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = func());
        public static void BindConnectedAnchor(this HingeJoint2D obj, Func<UnityEngine.Vector2> func)
            => BindConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindConnectedAnchorInterval(this HingeJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.connectedAnchor = func());
        public static void BindConnectedAnchorInterval(this HingeJoint2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseMotor(this HingeJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useMotor = v);
        public static void BindUseMotor(this HingeJoint2D obj, IProperty<System.Boolean> property)
            => BindUseMotor(obj, Bindings2._scope, property);
        public static void BindUseMotor(this HingeJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useMotor = func());
        public static void BindUseMotor(this HingeJoint2D obj, Func<System.Boolean> func)
            => BindUseMotor(obj, Bindings2._scope, func);
        public static void BindUseMotorInterval(this HingeJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useMotor = func());
        public static void BindUseMotorInterval(this HingeJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindUseMotorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMotor(this HingeJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.JointMotor2D> property)
            => bindings.Bind(property, v => obj.motor = v);
        public static void BindMotor(this HingeJoint2D obj, IProperty<UnityEngine.JointMotor2D> property)
            => BindMotor(obj, Bindings2._scope, property);
        public static void BindMotor(this HingeJoint2D obj, Bindings2 bindings, Func<UnityEngine.JointMotor2D> func)
            => bindings.BindUpdate(() => obj.motor = func());
        public static void BindMotor(this HingeJoint2D obj, Func<UnityEngine.JointMotor2D> func)
            => BindMotor(obj, Bindings2._scope, func);
        public static void BindMotorInterval(this HingeJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.JointMotor2D> func)
            => bindings.BindInterval(seconds, () => obj.motor = func());
        public static void BindMotorInterval(this HingeJoint2D obj, float seconds, Func<UnityEngine.JointMotor2D> func)
            => BindMotorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseLimits(this HingeJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useLimits = v);
        public static void BindUseLimits(this HingeJoint2D obj, IProperty<System.Boolean> property)
            => BindUseLimits(obj, Bindings2._scope, property);
        public static void BindUseLimits(this HingeJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useLimits = func());
        public static void BindUseLimits(this HingeJoint2D obj, Func<System.Boolean> func)
            => BindUseLimits(obj, Bindings2._scope, func);
        public static void BindUseLimitsInterval(this HingeJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useLimits = func());
        public static void BindUseLimitsInterval(this HingeJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindUseLimitsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLimits(this HingeJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.JointAngleLimits2D> property)
            => bindings.Bind(property, v => obj.limits = v);
        public static void BindLimits(this HingeJoint2D obj, IProperty<UnityEngine.JointAngleLimits2D> property)
            => BindLimits(obj, Bindings2._scope, property);
        public static void BindLimits(this HingeJoint2D obj, Bindings2 bindings, Func<UnityEngine.JointAngleLimits2D> func)
            => bindings.BindUpdate(() => obj.limits = func());
        public static void BindLimits(this HingeJoint2D obj, Func<UnityEngine.JointAngleLimits2D> func)
            => BindLimits(obj, Bindings2._scope, func);
        public static void BindLimitsInterval(this HingeJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.JointAngleLimits2D> func)
            => bindings.BindInterval(seconds, () => obj.limits = func());
        public static void BindLimitsInterval(this HingeJoint2D obj, float seconds, Func<UnityEngine.JointAngleLimits2D> func)
            => BindLimitsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakForce(this HingeJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakForce = v);
        public static void BindBreakForce(this HingeJoint2D obj, IProperty<System.Single> property)
            => BindBreakForce(obj, Bindings2._scope, property);
        public static void BindBreakForce(this HingeJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakForce = func());
        public static void BindBreakForce(this HingeJoint2D obj, Func<System.Single> func)
            => BindBreakForce(obj, Bindings2._scope, func);
        public static void BindBreakForceInterval(this HingeJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakForce = func());
        public static void BindBreakForceInterval(this HingeJoint2D obj, float seconds, Func<System.Single> func)
            => BindBreakForceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakTorque(this HingeJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakTorque = v);
        public static void BindBreakTorque(this HingeJoint2D obj, IProperty<System.Single> property)
            => BindBreakTorque(obj, Bindings2._scope, property);
        public static void BindBreakTorque(this HingeJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakTorque = func());
        public static void BindBreakTorque(this HingeJoint2D obj, Func<System.Single> func)
            => BindBreakTorque(obj, Bindings2._scope, func);
        public static void BindBreakTorqueInterval(this HingeJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakTorque = func());
        public static void BindBreakTorqueInterval(this HingeJoint2D obj, float seconds, Func<System.Single> func)
            => BindBreakTorqueInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindPadding(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, IProperty<UnityEngine.RectOffset> property)
            => bindings.Bind(property, v => obj.padding = v);
        public static void BindPadding(this UnityEngine.UI.HorizontalLayoutGroup obj, IProperty<UnityEngine.RectOffset> property)
            => BindPadding(obj, Bindings2._scope, property);
        public static void BindPadding(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, Func<UnityEngine.RectOffset> func)
            => bindings.BindUpdate(() => obj.padding = func());
        public static void BindPadding(this UnityEngine.UI.HorizontalLayoutGroup obj, Func<UnityEngine.RectOffset> func)
            => BindPadding(obj, Bindings2._scope, func);
        public static void BindPaddingInterval(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, float seconds, Func<UnityEngine.RectOffset> func)
            => bindings.BindInterval(seconds, () => obj.padding = func());
        public static void BindPaddingInterval(this UnityEngine.UI.HorizontalLayoutGroup obj, float seconds, Func<UnityEngine.RectOffset> func)
            => BindPaddingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSpacing(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.spacing = v);
        public static void BindSpacing(this UnityEngine.UI.HorizontalLayoutGroup obj, IProperty<System.Single> property)
            => BindSpacing(obj, Bindings2._scope, property);
        public static void BindSpacing(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.spacing = func());
        public static void BindSpacing(this UnityEngine.UI.HorizontalLayoutGroup obj, Func<System.Single> func)
            => BindSpacing(obj, Bindings2._scope, func);
        public static void BindSpacingInterval(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.spacing = func());
        public static void BindSpacingInterval(this UnityEngine.UI.HorizontalLayoutGroup obj, float seconds, Func<System.Single> func)
            => BindSpacingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindChildAlignment(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, IProperty<UnityEngine.TextAnchor> property)
            => bindings.Bind(property, v => obj.childAlignment = v);
        public static void BindChildAlignment(this UnityEngine.UI.HorizontalLayoutGroup obj, IProperty<UnityEngine.TextAnchor> property)
            => BindChildAlignment(obj, Bindings2._scope, property);
        public static void BindChildAlignment(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, Func<UnityEngine.TextAnchor> func)
            => bindings.BindUpdate(() => obj.childAlignment = func());
        public static void BindChildAlignment(this UnityEngine.UI.HorizontalLayoutGroup obj, Func<UnityEngine.TextAnchor> func)
            => BindChildAlignment(obj, Bindings2._scope, func);
        public static void BindChildAlignmentInterval(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, float seconds, Func<UnityEngine.TextAnchor> func)
            => bindings.BindInterval(seconds, () => obj.childAlignment = func());
        public static void BindChildAlignmentInterval(this UnityEngine.UI.HorizontalLayoutGroup obj, float seconds, Func<UnityEngine.TextAnchor> func)
            => BindChildAlignmentInterval(obj, Bindings2._scope, seconds, func);
        public static void BindChildControlWidth(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.childControlWidth = v);
        public static void BindChildControlWidth(this UnityEngine.UI.HorizontalLayoutGroup obj, IProperty<System.Boolean> property)
            => BindChildControlWidth(obj, Bindings2._scope, property);
        public static void BindChildControlWidth(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.childControlWidth = func());
        public static void BindChildControlWidth(this UnityEngine.UI.HorizontalLayoutGroup obj, Func<System.Boolean> func)
            => BindChildControlWidth(obj, Bindings2._scope, func);
        public static void BindChildControlWidthInterval(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.childControlWidth = func());
        public static void BindChildControlWidthInterval(this UnityEngine.UI.HorizontalLayoutGroup obj, float seconds, Func<System.Boolean> func)
            => BindChildControlWidthInterval(obj, Bindings2._scope, seconds, func);
        public static void BindChildControlHeight(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.childControlHeight = v);
        public static void BindChildControlHeight(this UnityEngine.UI.HorizontalLayoutGroup obj, IProperty<System.Boolean> property)
            => BindChildControlHeight(obj, Bindings2._scope, property);
        public static void BindChildControlHeight(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.childControlHeight = func());
        public static void BindChildControlHeight(this UnityEngine.UI.HorizontalLayoutGroup obj, Func<System.Boolean> func)
            => BindChildControlHeight(obj, Bindings2._scope, func);
        public static void BindChildControlHeightInterval(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.childControlHeight = func());
        public static void BindChildControlHeightInterval(this UnityEngine.UI.HorizontalLayoutGroup obj, float seconds, Func<System.Boolean> func)
            => BindChildControlHeightInterval(obj, Bindings2._scope, seconds, func);
        public static void BindChildScaleWidth(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.childScaleWidth = v);
        public static void BindChildScaleWidth(this UnityEngine.UI.HorizontalLayoutGroup obj, IProperty<System.Boolean> property)
            => BindChildScaleWidth(obj, Bindings2._scope, property);
        public static void BindChildScaleWidth(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.childScaleWidth = func());
        public static void BindChildScaleWidth(this UnityEngine.UI.HorizontalLayoutGroup obj, Func<System.Boolean> func)
            => BindChildScaleWidth(obj, Bindings2._scope, func);
        public static void BindChildScaleWidthInterval(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.childScaleWidth = func());
        public static void BindChildScaleWidthInterval(this UnityEngine.UI.HorizontalLayoutGroup obj, float seconds, Func<System.Boolean> func)
            => BindChildScaleWidthInterval(obj, Bindings2._scope, seconds, func);
        public static void BindChildScaleHeight(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.childScaleHeight = v);
        public static void BindChildScaleHeight(this UnityEngine.UI.HorizontalLayoutGroup obj, IProperty<System.Boolean> property)
            => BindChildScaleHeight(obj, Bindings2._scope, property);
        public static void BindChildScaleHeight(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.childScaleHeight = func());
        public static void BindChildScaleHeight(this UnityEngine.UI.HorizontalLayoutGroup obj, Func<System.Boolean> func)
            => BindChildScaleHeight(obj, Bindings2._scope, func);
        public static void BindChildScaleHeightInterval(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.childScaleHeight = func());
        public static void BindChildScaleHeightInterval(this UnityEngine.UI.HorizontalLayoutGroup obj, float seconds, Func<System.Boolean> func)
            => BindChildScaleHeightInterval(obj, Bindings2._scope, seconds, func);
        public static void BindChildForceExpandWidth(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.childForceExpandWidth = v);
        public static void BindChildForceExpandWidth(this UnityEngine.UI.HorizontalLayoutGroup obj, IProperty<System.Boolean> property)
            => BindChildForceExpandWidth(obj, Bindings2._scope, property);
        public static void BindChildForceExpandWidth(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.childForceExpandWidth = func());
        public static void BindChildForceExpandWidth(this UnityEngine.UI.HorizontalLayoutGroup obj, Func<System.Boolean> func)
            => BindChildForceExpandWidth(obj, Bindings2._scope, func);
        public static void BindChildForceExpandWidthInterval(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.childForceExpandWidth = func());
        public static void BindChildForceExpandWidthInterval(this UnityEngine.UI.HorizontalLayoutGroup obj, float seconds, Func<System.Boolean> func)
            => BindChildForceExpandWidthInterval(obj, Bindings2._scope, seconds, func);
        public static void BindChildForceExpandHeight(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.childForceExpandHeight = v);
        public static void BindChildForceExpandHeight(this UnityEngine.UI.HorizontalLayoutGroup obj, IProperty<System.Boolean> property)
            => BindChildForceExpandHeight(obj, Bindings2._scope, property);
        public static void BindChildForceExpandHeight(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.childForceExpandHeight = func());
        public static void BindChildForceExpandHeight(this UnityEngine.UI.HorizontalLayoutGroup obj, Func<System.Boolean> func)
            => BindChildForceExpandHeight(obj, Bindings2._scope, func);
        public static void BindChildForceExpandHeightInterval(this UnityEngine.UI.HorizontalLayoutGroup obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.childForceExpandHeight = func());
        public static void BindChildForceExpandHeightInterval(this UnityEngine.UI.HorizontalLayoutGroup obj, float seconds, Func<System.Boolean> func)
            => BindChildForceExpandHeightInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindPadding(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, IProperty<UnityEngine.RectOffset> property)
            => bindings.Bind(property, v => obj.padding = v);
        public static void BindPadding(this UnityEngine.UI.VerticalLayoutGroup obj, IProperty<UnityEngine.RectOffset> property)
            => BindPadding(obj, Bindings2._scope, property);
        public static void BindPadding(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, Func<UnityEngine.RectOffset> func)
            => bindings.BindUpdate(() => obj.padding = func());
        public static void BindPadding(this UnityEngine.UI.VerticalLayoutGroup obj, Func<UnityEngine.RectOffset> func)
            => BindPadding(obj, Bindings2._scope, func);
        public static void BindPaddingInterval(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, float seconds, Func<UnityEngine.RectOffset> func)
            => bindings.BindInterval(seconds, () => obj.padding = func());
        public static void BindPaddingInterval(this UnityEngine.UI.VerticalLayoutGroup obj, float seconds, Func<UnityEngine.RectOffset> func)
            => BindPaddingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSpacing(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.spacing = v);
        public static void BindSpacing(this UnityEngine.UI.VerticalLayoutGroup obj, IProperty<System.Single> property)
            => BindSpacing(obj, Bindings2._scope, property);
        public static void BindSpacing(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.spacing = func());
        public static void BindSpacing(this UnityEngine.UI.VerticalLayoutGroup obj, Func<System.Single> func)
            => BindSpacing(obj, Bindings2._scope, func);
        public static void BindSpacingInterval(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.spacing = func());
        public static void BindSpacingInterval(this UnityEngine.UI.VerticalLayoutGroup obj, float seconds, Func<System.Single> func)
            => BindSpacingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindChildAlignment(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, IProperty<UnityEngine.TextAnchor> property)
            => bindings.Bind(property, v => obj.childAlignment = v);
        public static void BindChildAlignment(this UnityEngine.UI.VerticalLayoutGroup obj, IProperty<UnityEngine.TextAnchor> property)
            => BindChildAlignment(obj, Bindings2._scope, property);
        public static void BindChildAlignment(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, Func<UnityEngine.TextAnchor> func)
            => bindings.BindUpdate(() => obj.childAlignment = func());
        public static void BindChildAlignment(this UnityEngine.UI.VerticalLayoutGroup obj, Func<UnityEngine.TextAnchor> func)
            => BindChildAlignment(obj, Bindings2._scope, func);
        public static void BindChildAlignmentInterval(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, float seconds, Func<UnityEngine.TextAnchor> func)
            => bindings.BindInterval(seconds, () => obj.childAlignment = func());
        public static void BindChildAlignmentInterval(this UnityEngine.UI.VerticalLayoutGroup obj, float seconds, Func<UnityEngine.TextAnchor> func)
            => BindChildAlignmentInterval(obj, Bindings2._scope, seconds, func);
        public static void BindChildControlWidth(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.childControlWidth = v);
        public static void BindChildControlWidth(this UnityEngine.UI.VerticalLayoutGroup obj, IProperty<System.Boolean> property)
            => BindChildControlWidth(obj, Bindings2._scope, property);
        public static void BindChildControlWidth(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.childControlWidth = func());
        public static void BindChildControlWidth(this UnityEngine.UI.VerticalLayoutGroup obj, Func<System.Boolean> func)
            => BindChildControlWidth(obj, Bindings2._scope, func);
        public static void BindChildControlWidthInterval(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.childControlWidth = func());
        public static void BindChildControlWidthInterval(this UnityEngine.UI.VerticalLayoutGroup obj, float seconds, Func<System.Boolean> func)
            => BindChildControlWidthInterval(obj, Bindings2._scope, seconds, func);
        public static void BindChildControlHeight(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.childControlHeight = v);
        public static void BindChildControlHeight(this UnityEngine.UI.VerticalLayoutGroup obj, IProperty<System.Boolean> property)
            => BindChildControlHeight(obj, Bindings2._scope, property);
        public static void BindChildControlHeight(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.childControlHeight = func());
        public static void BindChildControlHeight(this UnityEngine.UI.VerticalLayoutGroup obj, Func<System.Boolean> func)
            => BindChildControlHeight(obj, Bindings2._scope, func);
        public static void BindChildControlHeightInterval(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.childControlHeight = func());
        public static void BindChildControlHeightInterval(this UnityEngine.UI.VerticalLayoutGroup obj, float seconds, Func<System.Boolean> func)
            => BindChildControlHeightInterval(obj, Bindings2._scope, seconds, func);
        public static void BindChildScaleWidth(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.childScaleWidth = v);
        public static void BindChildScaleWidth(this UnityEngine.UI.VerticalLayoutGroup obj, IProperty<System.Boolean> property)
            => BindChildScaleWidth(obj, Bindings2._scope, property);
        public static void BindChildScaleWidth(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.childScaleWidth = func());
        public static void BindChildScaleWidth(this UnityEngine.UI.VerticalLayoutGroup obj, Func<System.Boolean> func)
            => BindChildScaleWidth(obj, Bindings2._scope, func);
        public static void BindChildScaleWidthInterval(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.childScaleWidth = func());
        public static void BindChildScaleWidthInterval(this UnityEngine.UI.VerticalLayoutGroup obj, float seconds, Func<System.Boolean> func)
            => BindChildScaleWidthInterval(obj, Bindings2._scope, seconds, func);
        public static void BindChildScaleHeight(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.childScaleHeight = v);
        public static void BindChildScaleHeight(this UnityEngine.UI.VerticalLayoutGroup obj, IProperty<System.Boolean> property)
            => BindChildScaleHeight(obj, Bindings2._scope, property);
        public static void BindChildScaleHeight(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.childScaleHeight = func());
        public static void BindChildScaleHeight(this UnityEngine.UI.VerticalLayoutGroup obj, Func<System.Boolean> func)
            => BindChildScaleHeight(obj, Bindings2._scope, func);
        public static void BindChildScaleHeightInterval(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.childScaleHeight = func());
        public static void BindChildScaleHeightInterval(this UnityEngine.UI.VerticalLayoutGroup obj, float seconds, Func<System.Boolean> func)
            => BindChildScaleHeightInterval(obj, Bindings2._scope, seconds, func);
        public static void BindChildForceExpandWidth(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.childForceExpandWidth = v);
        public static void BindChildForceExpandWidth(this UnityEngine.UI.VerticalLayoutGroup obj, IProperty<System.Boolean> property)
            => BindChildForceExpandWidth(obj, Bindings2._scope, property);
        public static void BindChildForceExpandWidth(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.childForceExpandWidth = func());
        public static void BindChildForceExpandWidth(this UnityEngine.UI.VerticalLayoutGroup obj, Func<System.Boolean> func)
            => BindChildForceExpandWidth(obj, Bindings2._scope, func);
        public static void BindChildForceExpandWidthInterval(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.childForceExpandWidth = func());
        public static void BindChildForceExpandWidthInterval(this UnityEngine.UI.VerticalLayoutGroup obj, float seconds, Func<System.Boolean> func)
            => BindChildForceExpandWidthInterval(obj, Bindings2._scope, seconds, func);
        public static void BindChildForceExpandHeight(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.childForceExpandHeight = v);
        public static void BindChildForceExpandHeight(this UnityEngine.UI.VerticalLayoutGroup obj, IProperty<System.Boolean> property)
            => BindChildForceExpandHeight(obj, Bindings2._scope, property);
        public static void BindChildForceExpandHeight(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.childForceExpandHeight = func());
        public static void BindChildForceExpandHeight(this UnityEngine.UI.VerticalLayoutGroup obj, Func<System.Boolean> func)
            => BindChildForceExpandHeight(obj, Bindings2._scope, func);
        public static void BindChildForceExpandHeightInterval(this UnityEngine.UI.VerticalLayoutGroup obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.childForceExpandHeight = func());
        public static void BindChildForceExpandHeightInterval(this UnityEngine.UI.VerticalLayoutGroup obj, float seconds, Func<System.Boolean> func)
            => BindChildForceExpandHeightInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindSprite(this UnityEngine.UI.Image obj, Bindings2 bindings, IProperty<UnityEngine.Sprite> property)
            => bindings.Bind(property, v => obj.sprite = v);
        public static void BindSprite(this UnityEngine.UI.Image obj, IProperty<UnityEngine.Sprite> property)
            => BindSprite(obj, Bindings2._scope, property);
        public static void BindSprite(this UnityEngine.UI.Image obj, Bindings2 bindings, Func<UnityEngine.Sprite> func)
            => bindings.BindUpdate(() => obj.sprite = func());
        public static void BindSprite(this UnityEngine.UI.Image obj, Func<UnityEngine.Sprite> func)
            => BindSprite(obj, Bindings2._scope, func);
        public static void BindSpriteInterval(this UnityEngine.UI.Image obj, Bindings2 bindings, float seconds, Func<UnityEngine.Sprite> func)
            => bindings.BindInterval(seconds, () => obj.sprite = func());
        public static void BindSpriteInterval(this UnityEngine.UI.Image obj, float seconds, Func<UnityEngine.Sprite> func)
            => BindSpriteInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMaterial(this UnityEngine.UI.Image obj, Bindings2 bindings, IProperty<UnityEngine.Material> property)
            => bindings.Bind(property, v => obj.material = v);
        public static void BindMaterial(this UnityEngine.UI.Image obj, IProperty<UnityEngine.Material> property)
            => BindMaterial(obj, Bindings2._scope, property);
        public static void BindMaterial(this UnityEngine.UI.Image obj, Bindings2 bindings, Func<UnityEngine.Material> func)
            => bindings.BindUpdate(() => obj.material = func());
        public static void BindMaterial(this UnityEngine.UI.Image obj, Func<UnityEngine.Material> func)
            => BindMaterial(obj, Bindings2._scope, func);
        public static void BindMaterialInterval(this UnityEngine.UI.Image obj, Bindings2 bindings, float seconds, Func<UnityEngine.Material> func)
            => bindings.BindInterval(seconds, () => obj.material = func());
        public static void BindMaterialInterval(this UnityEngine.UI.Image obj, float seconds, Func<UnityEngine.Material> func)
            => BindMaterialInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColor(this UnityEngine.UI.Image obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.color = v);
        public static void BindColor(this UnityEngine.UI.Image obj, IProperty<UnityEngine.Color> property)
            => BindColor(obj, Bindings2._scope, property);
        public static void BindColor(this UnityEngine.UI.Image obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.color = func());
        public static void BindColor(this UnityEngine.UI.Image obj, Func<UnityEngine.Color> func)
            => BindColor(obj, Bindings2._scope, func);
        public static void BindColorInterval(this UnityEngine.UI.Image obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.color = func());
        public static void BindColorInterval(this UnityEngine.UI.Image obj, float seconds, Func<UnityEngine.Color> func)
            => BindColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRaycastTarget(this UnityEngine.UI.Image obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.raycastTarget = v);
        public static void BindRaycastTarget(this UnityEngine.UI.Image obj, IProperty<System.Boolean> property)
            => BindRaycastTarget(obj, Bindings2._scope, property);
        public static void BindRaycastTarget(this UnityEngine.UI.Image obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.raycastTarget = func());
        public static void BindRaycastTarget(this UnityEngine.UI.Image obj, Func<System.Boolean> func)
            => BindRaycastTarget(obj, Bindings2._scope, func);
        public static void BindRaycastTargetInterval(this UnityEngine.UI.Image obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.raycastTarget = func());
        public static void BindRaycastTargetInterval(this UnityEngine.UI.Image obj, float seconds, Func<System.Boolean> func)
            => BindRaycastTargetInterval(obj, Bindings2._scope, seconds, func);
        #if UNITY_2020_1_OR_NEWER
        public static void BindRaycastPadding(this UnityEngine.UI.Image obj, Bindings2 bindings, IProperty<UnityEngine.Vector4> property)
            => bindings.Bind(property, v => obj.raycastPadding = v);
        public static void BindRaycastPadding(this UnityEngine.UI.Image obj, IProperty<UnityEngine.Vector4> property)
            => BindRaycastPadding(obj, Bindings2._scope, property);
        public static void BindRaycastPadding(this UnityEngine.UI.Image obj, Bindings2 bindings, Func<UnityEngine.Vector4> func)
            => bindings.BindUpdate(() => obj.raycastPadding = func());
        public static void BindRaycastPadding(this UnityEngine.UI.Image obj, Func<UnityEngine.Vector4> func)
            => BindRaycastPadding(obj, Bindings2._scope, func);
        public static void BindRaycastPaddingInterval(this UnityEngine.UI.Image obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector4> func)
            => bindings.BindInterval(seconds, () => obj.raycastPadding = func());
        public static void BindRaycastPaddingInterval(this UnityEngine.UI.Image obj, float seconds, Func<UnityEngine.Vector4> func)
            => BindRaycastPaddingInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindMaskable(this UnityEngine.UI.Image obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.maskable = v);
        public static void BindMaskable(this UnityEngine.UI.Image obj, IProperty<System.Boolean> property)
            => BindMaskable(obj, Bindings2._scope, property);
        public static void BindMaskable(this UnityEngine.UI.Image obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.maskable = func());
        public static void BindMaskable(this UnityEngine.UI.Image obj, Func<System.Boolean> func)
            => BindMaskable(obj, Bindings2._scope, func);
        public static void BindMaskableInterval(this UnityEngine.UI.Image obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.maskable = func());
        public static void BindMaskableInterval(this UnityEngine.UI.Image obj, float seconds, Func<System.Boolean> func)
            => BindMaskableInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindInteractable(this UnityEngine.UI.InputField obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.interactable = v);
        public static void BindInteractable(this UnityEngine.UI.InputField obj, IProperty<System.Boolean> property)
            => BindInteractable(obj, Bindings2._scope, property);
        public static void BindInteractable(this UnityEngine.UI.InputField obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.interactable = func());
        public static void BindInteractable(this UnityEngine.UI.InputField obj, Func<System.Boolean> func)
            => BindInteractable(obj, Bindings2._scope, func);
        public static void BindInteractableInterval(this UnityEngine.UI.InputField obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.interactable = func());
        public static void BindInteractableInterval(this UnityEngine.UI.InputField obj, float seconds, Func<System.Boolean> func)
            => BindInteractableInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTransition(this UnityEngine.UI.InputField obj, Bindings2 bindings, IProperty<UnityEngine.UI.Selectable.Transition> property)
            => bindings.Bind(property, v => obj.transition = v);
        public static void BindTransition(this UnityEngine.UI.InputField obj, IProperty<UnityEngine.UI.Selectable.Transition> property)
            => BindTransition(obj, Bindings2._scope, property);
        public static void BindTransition(this UnityEngine.UI.InputField obj, Bindings2 bindings, Func<UnityEngine.UI.Selectable.Transition> func)
            => bindings.BindUpdate(() => obj.transition = func());
        public static void BindTransition(this UnityEngine.UI.InputField obj, Func<UnityEngine.UI.Selectable.Transition> func)
            => BindTransition(obj, Bindings2._scope, func);
        public static void BindTransitionInterval(this UnityEngine.UI.InputField obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Selectable.Transition> func)
            => bindings.BindInterval(seconds, () => obj.transition = func());
        public static void BindTransitionInterval(this UnityEngine.UI.InputField obj, float seconds, Func<UnityEngine.UI.Selectable.Transition> func)
            => BindTransitionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetGraphic(this UnityEngine.UI.InputField obj, Bindings2 bindings, IProperty<UnityEngine.UI.Graphic> property)
            => bindings.Bind(property, v => obj.targetGraphic = v);
        public static void BindTargetGraphic(this UnityEngine.UI.InputField obj, IProperty<UnityEngine.UI.Graphic> property)
            => BindTargetGraphic(obj, Bindings2._scope, property);
        public static void BindTargetGraphic(this UnityEngine.UI.InputField obj, Bindings2 bindings, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindUpdate(() => obj.targetGraphic = func());
        public static void BindTargetGraphic(this UnityEngine.UI.InputField obj, Func<UnityEngine.UI.Graphic> func)
            => BindTargetGraphic(obj, Bindings2._scope, func);
        public static void BindTargetGraphicInterval(this UnityEngine.UI.InputField obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindInterval(seconds, () => obj.targetGraphic = func());
        public static void BindTargetGraphicInterval(this UnityEngine.UI.InputField obj, float seconds, Func<UnityEngine.UI.Graphic> func)
            => BindTargetGraphicInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColors(this UnityEngine.UI.InputField obj, Bindings2 bindings, IProperty<UnityEngine.UI.ColorBlock> property)
            => bindings.Bind(property, v => obj.colors = v);
        public static void BindColors(this UnityEngine.UI.InputField obj, IProperty<UnityEngine.UI.ColorBlock> property)
            => BindColors(obj, Bindings2._scope, property);
        public static void BindColors(this UnityEngine.UI.InputField obj, Bindings2 bindings, Func<UnityEngine.UI.ColorBlock> func)
            => bindings.BindUpdate(() => obj.colors = func());
        public static void BindColors(this UnityEngine.UI.InputField obj, Func<UnityEngine.UI.ColorBlock> func)
            => BindColors(obj, Bindings2._scope, func);
        public static void BindColorsInterval(this UnityEngine.UI.InputField obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.ColorBlock> func)
            => bindings.BindInterval(seconds, () => obj.colors = func());
        public static void BindColorsInterval(this UnityEngine.UI.InputField obj, float seconds, Func<UnityEngine.UI.ColorBlock> func)
            => BindColorsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindNavigation(this UnityEngine.UI.InputField obj, Bindings2 bindings, IProperty<UnityEngine.UI.Navigation> property)
            => bindings.Bind(property, v => obj.navigation = v);
        public static void BindNavigation(this UnityEngine.UI.InputField obj, IProperty<UnityEngine.UI.Navigation> property)
            => BindNavigation(obj, Bindings2._scope, property);
        public static void BindNavigation(this UnityEngine.UI.InputField obj, Bindings2 bindings, Func<UnityEngine.UI.Navigation> func)
            => bindings.BindUpdate(() => obj.navigation = func());
        public static void BindNavigation(this UnityEngine.UI.InputField obj, Func<UnityEngine.UI.Navigation> func)
            => BindNavigation(obj, Bindings2._scope, func);
        public static void BindNavigationInterval(this UnityEngine.UI.InputField obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Navigation> func)
            => bindings.BindInterval(seconds, () => obj.navigation = func());
        public static void BindNavigationInterval(this UnityEngine.UI.InputField obj, float seconds, Func<UnityEngine.UI.Navigation> func)
            => BindNavigationInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTextComponent(this UnityEngine.UI.InputField obj, Bindings2 bindings, IProperty<UnityEngine.UI.Text> property)
            => bindings.Bind(property, v => obj.textComponent = v);
        public static void BindTextComponent(this UnityEngine.UI.InputField obj, IProperty<UnityEngine.UI.Text> property)
            => BindTextComponent(obj, Bindings2._scope, property);
        public static void BindTextComponent(this UnityEngine.UI.InputField obj, Bindings2 bindings, Func<UnityEngine.UI.Text> func)
            => bindings.BindUpdate(() => obj.textComponent = func());
        public static void BindTextComponent(this UnityEngine.UI.InputField obj, Func<UnityEngine.UI.Text> func)
            => BindTextComponent(obj, Bindings2._scope, func);
        public static void BindTextComponentInterval(this UnityEngine.UI.InputField obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Text> func)
            => bindings.BindInterval(seconds, () => obj.textComponent = func());
        public static void BindTextComponentInterval(this UnityEngine.UI.InputField obj, float seconds, Func<UnityEngine.UI.Text> func)
            => BindTextComponentInterval(obj, Bindings2._scope, seconds, func);
        public static void BindText<T>(this UnityEngine.UI.InputField obj, Bindings2 bindings, IProperty<T> property)
            => bindings.Bind(property, v => obj.text = v.ToString());
        public static void BindText<T>(this UnityEngine.UI.InputField obj, IProperty<T> property)
            => BindText(obj, Bindings2._scope, property);
        public static void BindText<T>(this UnityEngine.UI.InputField obj, Bindings2 bindings, Func<T> func)
            => bindings.BindUpdate(() => obj.text = func().ToString());
        public static void BindText<T>(this UnityEngine.UI.InputField obj, Func<T> func)
            => BindText(obj, Bindings2._scope, func);
        public static void BindTextInterval<T>(this UnityEngine.UI.InputField obj, Bindings2 bindings, float seconds, Func<T> func)
            => bindings.BindInterval(seconds, () => obj.text = func().ToString());
        public static void BindTextInterval<T>(this UnityEngine.UI.InputField obj, float seconds, Func<T> func)
            => BindTextInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCharacterLimit(this UnityEngine.UI.InputField obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.characterLimit = v);
        public static void BindCharacterLimit(this UnityEngine.UI.InputField obj, IProperty<System.Int32> property)
            => BindCharacterLimit(obj, Bindings2._scope, property);
        public static void BindCharacterLimit(this UnityEngine.UI.InputField obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.characterLimit = func());
        public static void BindCharacterLimit(this UnityEngine.UI.InputField obj, Func<System.Int32> func)
            => BindCharacterLimit(obj, Bindings2._scope, func);
        public static void BindCharacterLimitInterval(this UnityEngine.UI.InputField obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.characterLimit = func());
        public static void BindCharacterLimitInterval(this UnityEngine.UI.InputField obj, float seconds, Func<System.Int32> func)
            => BindCharacterLimitInterval(obj, Bindings2._scope, seconds, func);
        public static void BindContentType(this UnityEngine.UI.InputField obj, Bindings2 bindings, IProperty<UnityEngine.UI.InputField.ContentType> property)
            => bindings.Bind(property, v => obj.contentType = v);
        public static void BindContentType(this UnityEngine.UI.InputField obj, IProperty<UnityEngine.UI.InputField.ContentType> property)
            => BindContentType(obj, Bindings2._scope, property);
        public static void BindContentType(this UnityEngine.UI.InputField obj, Bindings2 bindings, Func<UnityEngine.UI.InputField.ContentType> func)
            => bindings.BindUpdate(() => obj.contentType = func());
        public static void BindContentType(this UnityEngine.UI.InputField obj, Func<UnityEngine.UI.InputField.ContentType> func)
            => BindContentType(obj, Bindings2._scope, func);
        public static void BindContentTypeInterval(this UnityEngine.UI.InputField obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.InputField.ContentType> func)
            => bindings.BindInterval(seconds, () => obj.contentType = func());
        public static void BindContentTypeInterval(this UnityEngine.UI.InputField obj, float seconds, Func<UnityEngine.UI.InputField.ContentType> func)
            => BindContentTypeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLineType(this UnityEngine.UI.InputField obj, Bindings2 bindings, IProperty<UnityEngine.UI.InputField.LineType> property)
            => bindings.Bind(property, v => obj.lineType = v);
        public static void BindLineType(this UnityEngine.UI.InputField obj, IProperty<UnityEngine.UI.InputField.LineType> property)
            => BindLineType(obj, Bindings2._scope, property);
        public static void BindLineType(this UnityEngine.UI.InputField obj, Bindings2 bindings, Func<UnityEngine.UI.InputField.LineType> func)
            => bindings.BindUpdate(() => obj.lineType = func());
        public static void BindLineType(this UnityEngine.UI.InputField obj, Func<UnityEngine.UI.InputField.LineType> func)
            => BindLineType(obj, Bindings2._scope, func);
        public static void BindLineTypeInterval(this UnityEngine.UI.InputField obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.InputField.LineType> func)
            => bindings.BindInterval(seconds, () => obj.lineType = func());
        public static void BindLineTypeInterval(this UnityEngine.UI.InputField obj, float seconds, Func<UnityEngine.UI.InputField.LineType> func)
            => BindLineTypeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPlaceholder(this UnityEngine.UI.InputField obj, Bindings2 bindings, IProperty<UnityEngine.UI.Graphic> property)
            => bindings.Bind(property, v => obj.placeholder = v);
        public static void BindPlaceholder(this UnityEngine.UI.InputField obj, IProperty<UnityEngine.UI.Graphic> property)
            => BindPlaceholder(obj, Bindings2._scope, property);
        public static void BindPlaceholder(this UnityEngine.UI.InputField obj, Bindings2 bindings, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindUpdate(() => obj.placeholder = func());
        public static void BindPlaceholder(this UnityEngine.UI.InputField obj, Func<UnityEngine.UI.Graphic> func)
            => BindPlaceholder(obj, Bindings2._scope, func);
        public static void BindPlaceholderInterval(this UnityEngine.UI.InputField obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindInterval(seconds, () => obj.placeholder = func());
        public static void BindPlaceholderInterval(this UnityEngine.UI.InputField obj, float seconds, Func<UnityEngine.UI.Graphic> func)
            => BindPlaceholderInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCaretBlinkRate(this UnityEngine.UI.InputField obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.caretBlinkRate = v);
        public static void BindCaretBlinkRate(this UnityEngine.UI.InputField obj, IProperty<System.Single> property)
            => BindCaretBlinkRate(obj, Bindings2._scope, property);
        public static void BindCaretBlinkRate(this UnityEngine.UI.InputField obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.caretBlinkRate = func());
        public static void BindCaretBlinkRate(this UnityEngine.UI.InputField obj, Func<System.Single> func)
            => BindCaretBlinkRate(obj, Bindings2._scope, func);
        public static void BindCaretBlinkRateInterval(this UnityEngine.UI.InputField obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.caretBlinkRate = func());
        public static void BindCaretBlinkRateInterval(this UnityEngine.UI.InputField obj, float seconds, Func<System.Single> func)
            => BindCaretBlinkRateInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCaretWidth(this UnityEngine.UI.InputField obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.caretWidth = v);
        public static void BindCaretWidth(this UnityEngine.UI.InputField obj, IProperty<System.Int32> property)
            => BindCaretWidth(obj, Bindings2._scope, property);
        public static void BindCaretWidth(this UnityEngine.UI.InputField obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.caretWidth = func());
        public static void BindCaretWidth(this UnityEngine.UI.InputField obj, Func<System.Int32> func)
            => BindCaretWidth(obj, Bindings2._scope, func);
        public static void BindCaretWidthInterval(this UnityEngine.UI.InputField obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.caretWidth = func());
        public static void BindCaretWidthInterval(this UnityEngine.UI.InputField obj, float seconds, Func<System.Int32> func)
            => BindCaretWidthInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCustomCaretColor(this UnityEngine.UI.InputField obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.customCaretColor = v);
        public static void BindCustomCaretColor(this UnityEngine.UI.InputField obj, IProperty<System.Boolean> property)
            => BindCustomCaretColor(obj, Bindings2._scope, property);
        public static void BindCustomCaretColor(this UnityEngine.UI.InputField obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.customCaretColor = func());
        public static void BindCustomCaretColor(this UnityEngine.UI.InputField obj, Func<System.Boolean> func)
            => BindCustomCaretColor(obj, Bindings2._scope, func);
        public static void BindCustomCaretColorInterval(this UnityEngine.UI.InputField obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.customCaretColor = func());
        public static void BindCustomCaretColorInterval(this UnityEngine.UI.InputField obj, float seconds, Func<System.Boolean> func)
            => BindCustomCaretColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSelectionColor(this UnityEngine.UI.InputField obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.selectionColor = v);
        public static void BindSelectionColor(this UnityEngine.UI.InputField obj, IProperty<UnityEngine.Color> property)
            => BindSelectionColor(obj, Bindings2._scope, property);
        public static void BindSelectionColor(this UnityEngine.UI.InputField obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.selectionColor = func());
        public static void BindSelectionColor(this UnityEngine.UI.InputField obj, Func<UnityEngine.Color> func)
            => BindSelectionColor(obj, Bindings2._scope, func);
        public static void BindSelectionColorInterval(this UnityEngine.UI.InputField obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.selectionColor = func());
        public static void BindSelectionColorInterval(this UnityEngine.UI.InputField obj, float seconds, Func<UnityEngine.Color> func)
            => BindSelectionColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindShouldHideMobileInput(this UnityEngine.UI.InputField obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.shouldHideMobileInput = v);
        public static void BindShouldHideMobileInput(this UnityEngine.UI.InputField obj, IProperty<System.Boolean> property)
            => BindShouldHideMobileInput(obj, Bindings2._scope, property);
        public static void BindShouldHideMobileInput(this UnityEngine.UI.InputField obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.shouldHideMobileInput = func());
        public static void BindShouldHideMobileInput(this UnityEngine.UI.InputField obj, Func<System.Boolean> func)
            => BindShouldHideMobileInput(obj, Bindings2._scope, func);
        public static void BindShouldHideMobileInputInterval(this UnityEngine.UI.InputField obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.shouldHideMobileInput = func());
        public static void BindShouldHideMobileInputInterval(this UnityEngine.UI.InputField obj, float seconds, Func<System.Boolean> func)
            => BindShouldHideMobileInputInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReadOnly(this UnityEngine.UI.InputField obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.readOnly = v);
        public static void BindReadOnly(this UnityEngine.UI.InputField obj, IProperty<System.Boolean> property)
            => BindReadOnly(obj, Bindings2._scope, property);
        public static void BindReadOnly(this UnityEngine.UI.InputField obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.readOnly = func());
        public static void BindReadOnly(this UnityEngine.UI.InputField obj, Func<System.Boolean> func)
            => BindReadOnly(obj, Bindings2._scope, func);
        public static void BindReadOnlyInterval(this UnityEngine.UI.InputField obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.readOnly = func());
        public static void BindReadOnlyInterval(this UnityEngine.UI.InputField obj, float seconds, Func<System.Boolean> func)
            => BindReadOnlyInterval(obj, Bindings2._scope, seconds, func);
        #if UNITY_2020_3_OR_NEWER
        public static void BindShouldActivateOnSelect(this UnityEngine.UI.InputField obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.shouldActivateOnSelect = v);
        public static void BindShouldActivateOnSelect(this UnityEngine.UI.InputField obj, IProperty<System.Boolean> property)
            => BindShouldActivateOnSelect(obj, Bindings2._scope, property);
        public static void BindShouldActivateOnSelect(this UnityEngine.UI.InputField obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.shouldActivateOnSelect = func());
        public static void BindShouldActivateOnSelect(this UnityEngine.UI.InputField obj, Func<System.Boolean> func)
            => BindShouldActivateOnSelect(obj, Bindings2._scope, func);
        public static void BindShouldActivateOnSelectInterval(this UnityEngine.UI.InputField obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.shouldActivateOnSelect = func());
        public static void BindShouldActivateOnSelectInterval(this UnityEngine.UI.InputField obj, float seconds, Func<System.Boolean> func)
            => BindShouldActivateOnSelectInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #endif


        #if UNITY_GUI
        public static void BindIgnoreLayout(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.ignoreLayout = v);
        public static void BindIgnoreLayout(this UnityEngine.UI.LayoutElement obj, IProperty<System.Boolean> property)
            => BindIgnoreLayout(obj, Bindings2._scope, property);
        public static void BindIgnoreLayout(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.ignoreLayout = func());
        public static void BindIgnoreLayout(this UnityEngine.UI.LayoutElement obj, Func<System.Boolean> func)
            => BindIgnoreLayout(obj, Bindings2._scope, func);
        public static void BindIgnoreLayoutInterval(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.ignoreLayout = func());
        public static void BindIgnoreLayoutInterval(this UnityEngine.UI.LayoutElement obj, float seconds, Func<System.Boolean> func)
            => BindIgnoreLayoutInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMinWidth(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.minWidth = v);
        public static void BindMinWidth(this UnityEngine.UI.LayoutElement obj, IProperty<System.Single> property)
            => BindMinWidth(obj, Bindings2._scope, property);
        public static void BindMinWidth(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.minWidth = func());
        public static void BindMinWidth(this UnityEngine.UI.LayoutElement obj, Func<System.Single> func)
            => BindMinWidth(obj, Bindings2._scope, func);
        public static void BindMinWidthInterval(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.minWidth = func());
        public static void BindMinWidthInterval(this UnityEngine.UI.LayoutElement obj, float seconds, Func<System.Single> func)
            => BindMinWidthInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMinHeight(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.minHeight = v);
        public static void BindMinHeight(this UnityEngine.UI.LayoutElement obj, IProperty<System.Single> property)
            => BindMinHeight(obj, Bindings2._scope, property);
        public static void BindMinHeight(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.minHeight = func());
        public static void BindMinHeight(this UnityEngine.UI.LayoutElement obj, Func<System.Single> func)
            => BindMinHeight(obj, Bindings2._scope, func);
        public static void BindMinHeightInterval(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.minHeight = func());
        public static void BindMinHeightInterval(this UnityEngine.UI.LayoutElement obj, float seconds, Func<System.Single> func)
            => BindMinHeightInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPreferredWidth(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.preferredWidth = v);
        public static void BindPreferredWidth(this UnityEngine.UI.LayoutElement obj, IProperty<System.Single> property)
            => BindPreferredWidth(obj, Bindings2._scope, property);
        public static void BindPreferredWidth(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.preferredWidth = func());
        public static void BindPreferredWidth(this UnityEngine.UI.LayoutElement obj, Func<System.Single> func)
            => BindPreferredWidth(obj, Bindings2._scope, func);
        public static void BindPreferredWidthInterval(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.preferredWidth = func());
        public static void BindPreferredWidthInterval(this UnityEngine.UI.LayoutElement obj, float seconds, Func<System.Single> func)
            => BindPreferredWidthInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPreferredHeight(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.preferredHeight = v);
        public static void BindPreferredHeight(this UnityEngine.UI.LayoutElement obj, IProperty<System.Single> property)
            => BindPreferredHeight(obj, Bindings2._scope, property);
        public static void BindPreferredHeight(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.preferredHeight = func());
        public static void BindPreferredHeight(this UnityEngine.UI.LayoutElement obj, Func<System.Single> func)
            => BindPreferredHeight(obj, Bindings2._scope, func);
        public static void BindPreferredHeightInterval(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.preferredHeight = func());
        public static void BindPreferredHeightInterval(this UnityEngine.UI.LayoutElement obj, float seconds, Func<System.Single> func)
            => BindPreferredHeightInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFlexibleWidth(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.flexibleWidth = v);
        public static void BindFlexibleWidth(this UnityEngine.UI.LayoutElement obj, IProperty<System.Single> property)
            => BindFlexibleWidth(obj, Bindings2._scope, property);
        public static void BindFlexibleWidth(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.flexibleWidth = func());
        public static void BindFlexibleWidth(this UnityEngine.UI.LayoutElement obj, Func<System.Single> func)
            => BindFlexibleWidth(obj, Bindings2._scope, func);
        public static void BindFlexibleWidthInterval(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.flexibleWidth = func());
        public static void BindFlexibleWidthInterval(this UnityEngine.UI.LayoutElement obj, float seconds, Func<System.Single> func)
            => BindFlexibleWidthInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFlexibleHeight(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.flexibleHeight = v);
        public static void BindFlexibleHeight(this UnityEngine.UI.LayoutElement obj, IProperty<System.Single> property)
            => BindFlexibleHeight(obj, Bindings2._scope, property);
        public static void BindFlexibleHeight(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.flexibleHeight = func());
        public static void BindFlexibleHeight(this UnityEngine.UI.LayoutElement obj, Func<System.Single> func)
            => BindFlexibleHeight(obj, Bindings2._scope, func);
        public static void BindFlexibleHeightInterval(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.flexibleHeight = func());
        public static void BindFlexibleHeightInterval(this UnityEngine.UI.LayoutElement obj, float seconds, Func<System.Single> func)
            => BindFlexibleHeightInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLayoutPriority(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.layoutPriority = v);
        public static void BindLayoutPriority(this UnityEngine.UI.LayoutElement obj, IProperty<System.Int32> property)
            => BindLayoutPriority(obj, Bindings2._scope, property);
        public static void BindLayoutPriority(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.layoutPriority = func());
        public static void BindLayoutPriority(this UnityEngine.UI.LayoutElement obj, Func<System.Int32> func)
            => BindLayoutPriority(obj, Bindings2._scope, func);
        public static void BindLayoutPriorityInterval(this UnityEngine.UI.LayoutElement obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.layoutPriority = func());
        public static void BindLayoutPriorityInterval(this UnityEngine.UI.LayoutElement obj, float seconds, Func<System.Int32> func)
            => BindLayoutPriorityInterval(obj, Bindings2._scope, seconds, func);
        #endif


        public static void BindFlare(this LensFlare obj, Bindings2 bindings, IProperty<UnityEngine.Flare> property)
            => bindings.Bind(property, v => obj.flare = v);
        public static void BindFlare(this LensFlare obj, IProperty<UnityEngine.Flare> property)
            => BindFlare(obj, Bindings2._scope, property);
        public static void BindFlare(this LensFlare obj, Bindings2 bindings, Func<UnityEngine.Flare> func)
            => bindings.BindUpdate(() => obj.flare = func());
        public static void BindFlare(this LensFlare obj, Func<UnityEngine.Flare> func)
            => BindFlare(obj, Bindings2._scope, func);
        public static void BindFlareInterval(this LensFlare obj, Bindings2 bindings, float seconds, Func<UnityEngine.Flare> func)
            => bindings.BindInterval(seconds, () => obj.flare = func());
        public static void BindFlareInterval(this LensFlare obj, float seconds, Func<UnityEngine.Flare> func)
            => BindFlareInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColor(this LensFlare obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.color = v);
        public static void BindColor(this LensFlare obj, IProperty<UnityEngine.Color> property)
            => BindColor(obj, Bindings2._scope, property);
        public static void BindColor(this LensFlare obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.color = func());
        public static void BindColor(this LensFlare obj, Func<UnityEngine.Color> func)
            => BindColor(obj, Bindings2._scope, func);
        public static void BindColorInterval(this LensFlare obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.color = func());
        public static void BindColorInterval(this LensFlare obj, float seconds, Func<UnityEngine.Color> func)
            => BindColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBrightness(this LensFlare obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.brightness = v);
        public static void BindBrightness(this LensFlare obj, IProperty<System.Single> property)
            => BindBrightness(obj, Bindings2._scope, property);
        public static void BindBrightness(this LensFlare obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.brightness = func());
        public static void BindBrightness(this LensFlare obj, Func<System.Single> func)
            => BindBrightness(obj, Bindings2._scope, func);
        public static void BindBrightnessInterval(this LensFlare obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.brightness = func());
        public static void BindBrightnessInterval(this LensFlare obj, float seconds, Func<System.Single> func)
            => BindBrightnessInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFadeSpeed(this LensFlare obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.fadeSpeed = v);
        public static void BindFadeSpeed(this LensFlare obj, IProperty<System.Single> property)
            => BindFadeSpeed(obj, Bindings2._scope, property);
        public static void BindFadeSpeed(this LensFlare obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.fadeSpeed = func());
        public static void BindFadeSpeed(this LensFlare obj, Func<System.Single> func)
            => BindFadeSpeed(obj, Bindings2._scope, func);
        public static void BindFadeSpeedInterval(this LensFlare obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.fadeSpeed = func());
        public static void BindFadeSpeedInterval(this LensFlare obj, float seconds, Func<System.Single> func)
            => BindFadeSpeedInterval(obj, Bindings2._scope, seconds, func);


        public static void BindType(this Light obj, Bindings2 bindings, IProperty<UnityEngine.LightType> property)
            => bindings.Bind(property, v => obj.type = v);
        public static void BindType(this Light obj, IProperty<UnityEngine.LightType> property)
            => BindType(obj, Bindings2._scope, property);
        public static void BindType(this Light obj, Bindings2 bindings, Func<UnityEngine.LightType> func)
            => bindings.BindUpdate(() => obj.type = func());
        public static void BindType(this Light obj, Func<UnityEngine.LightType> func)
            => BindType(obj, Bindings2._scope, func);
        public static void BindTypeInterval(this Light obj, Bindings2 bindings, float seconds, Func<UnityEngine.LightType> func)
            => bindings.BindInterval(seconds, () => obj.type = func());
        public static void BindTypeInterval(this Light obj, float seconds, Func<UnityEngine.LightType> func)
            => BindTypeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRange(this Light obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.range = v);
        public static void BindRange(this Light obj, IProperty<System.Single> property)
            => BindRange(obj, Bindings2._scope, property);
        public static void BindRange(this Light obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.range = func());
        public static void BindRange(this Light obj, Func<System.Single> func)
            => BindRange(obj, Bindings2._scope, func);
        public static void BindRangeInterval(this Light obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.range = func());
        public static void BindRangeInterval(this Light obj, float seconds, Func<System.Single> func)
            => BindRangeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSpotAngle(this Light obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.spotAngle = v);
        public static void BindSpotAngle(this Light obj, IProperty<System.Single> property)
            => BindSpotAngle(obj, Bindings2._scope, property);
        public static void BindSpotAngle(this Light obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.spotAngle = func());
        public static void BindSpotAngle(this Light obj, Func<System.Single> func)
            => BindSpotAngle(obj, Bindings2._scope, func);
        public static void BindSpotAngleInterval(this Light obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.spotAngle = func());
        public static void BindSpotAngleInterval(this Light obj, float seconds, Func<System.Single> func)
            => BindSpotAngleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColor(this Light obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.color = v);
        public static void BindColor(this Light obj, IProperty<UnityEngine.Color> property)
            => BindColor(obj, Bindings2._scope, property);
        public static void BindColor(this Light obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.color = func());
        public static void BindColor(this Light obj, Func<UnityEngine.Color> func)
            => BindColor(obj, Bindings2._scope, func);
        public static void BindColorInterval(this Light obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.color = func());
        public static void BindColorInterval(this Light obj, float seconds, Func<UnityEngine.Color> func)
            => BindColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIntensity(this Light obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.intensity = v);
        public static void BindIntensity(this Light obj, IProperty<System.Single> property)
            => BindIntensity(obj, Bindings2._scope, property);
        public static void BindIntensity(this Light obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.intensity = func());
        public static void BindIntensity(this Light obj, Func<System.Single> func)
            => BindIntensity(obj, Bindings2._scope, func);
        public static void BindIntensityInterval(this Light obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.intensity = func());
        public static void BindIntensityInterval(this Light obj, float seconds, Func<System.Single> func)
            => BindIntensityInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBounceIntensity(this Light obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.bounceIntensity = v);
        public static void BindBounceIntensity(this Light obj, IProperty<System.Single> property)
            => BindBounceIntensity(obj, Bindings2._scope, property);
        public static void BindBounceIntensity(this Light obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.bounceIntensity = func());
        public static void BindBounceIntensity(this Light obj, Func<System.Single> func)
            => BindBounceIntensity(obj, Bindings2._scope, func);
        public static void BindBounceIntensityInterval(this Light obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.bounceIntensity = func());
        public static void BindBounceIntensityInterval(this Light obj, float seconds, Func<System.Single> func)
            => BindBounceIntensityInterval(obj, Bindings2._scope, seconds, func);
        public static void BindShadows(this Light obj, Bindings2 bindings, IProperty<UnityEngine.LightShadows> property)
            => bindings.Bind(property, v => obj.shadows = v);
        public static void BindShadows(this Light obj, IProperty<UnityEngine.LightShadows> property)
            => BindShadows(obj, Bindings2._scope, property);
        public static void BindShadows(this Light obj, Bindings2 bindings, Func<UnityEngine.LightShadows> func)
            => bindings.BindUpdate(() => obj.shadows = func());
        public static void BindShadows(this Light obj, Func<UnityEngine.LightShadows> func)
            => BindShadows(obj, Bindings2._scope, func);
        public static void BindShadowsInterval(this Light obj, Bindings2 bindings, float seconds, Func<UnityEngine.LightShadows> func)
            => bindings.BindInterval(seconds, () => obj.shadows = func());
        public static void BindShadowsInterval(this Light obj, float seconds, Func<UnityEngine.LightShadows> func)
            => BindShadowsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCookie(this Light obj, Bindings2 bindings, IProperty<UnityEngine.Texture> property)
            => bindings.Bind(property, v => obj.cookie = v);
        public static void BindCookie(this Light obj, IProperty<UnityEngine.Texture> property)
            => BindCookie(obj, Bindings2._scope, property);
        public static void BindCookie(this Light obj, Bindings2 bindings, Func<UnityEngine.Texture> func)
            => bindings.BindUpdate(() => obj.cookie = func());
        public static void BindCookie(this Light obj, Func<UnityEngine.Texture> func)
            => BindCookie(obj, Bindings2._scope, func);
        public static void BindCookieInterval(this Light obj, Bindings2 bindings, float seconds, Func<UnityEngine.Texture> func)
            => bindings.BindInterval(seconds, () => obj.cookie = func());
        public static void BindCookieInterval(this Light obj, float seconds, Func<UnityEngine.Texture> func)
            => BindCookieInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFlare(this Light obj, Bindings2 bindings, IProperty<UnityEngine.Flare> property)
            => bindings.Bind(property, v => obj.flare = v);
        public static void BindFlare(this Light obj, IProperty<UnityEngine.Flare> property)
            => BindFlare(obj, Bindings2._scope, property);
        public static void BindFlare(this Light obj, Bindings2 bindings, Func<UnityEngine.Flare> func)
            => bindings.BindUpdate(() => obj.flare = func());
        public static void BindFlare(this Light obj, Func<UnityEngine.Flare> func)
            => BindFlare(obj, Bindings2._scope, func);
        public static void BindFlareInterval(this Light obj, Bindings2 bindings, float seconds, Func<UnityEngine.Flare> func)
            => bindings.BindInterval(seconds, () => obj.flare = func());
        public static void BindFlareInterval(this Light obj, float seconds, Func<UnityEngine.Flare> func)
            => BindFlareInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRenderMode(this Light obj, Bindings2 bindings, IProperty<UnityEngine.LightRenderMode> property)
            => bindings.Bind(property, v => obj.renderMode = v);
        public static void BindRenderMode(this Light obj, IProperty<UnityEngine.LightRenderMode> property)
            => BindRenderMode(obj, Bindings2._scope, property);
        public static void BindRenderMode(this Light obj, Bindings2 bindings, Func<UnityEngine.LightRenderMode> func)
            => bindings.BindUpdate(() => obj.renderMode = func());
        public static void BindRenderMode(this Light obj, Func<UnityEngine.LightRenderMode> func)
            => BindRenderMode(obj, Bindings2._scope, func);
        public static void BindRenderModeInterval(this Light obj, Bindings2 bindings, float seconds, Func<UnityEngine.LightRenderMode> func)
            => bindings.BindInterval(seconds, () => obj.renderMode = func());
        public static void BindRenderModeInterval(this Light obj, float seconds, Func<UnityEngine.LightRenderMode> func)
            => BindRenderModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCullingMask(this Light obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.cullingMask = v);
        public static void BindCullingMask(this Light obj, IProperty<System.Int32> property)
            => BindCullingMask(obj, Bindings2._scope, property);
        public static void BindCullingMask(this Light obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.cullingMask = func());
        public static void BindCullingMask(this Light obj, Func<System.Int32> func)
            => BindCullingMask(obj, Bindings2._scope, func);
        public static void BindCullingMaskInterval(this Light obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.cullingMask = func());
        public static void BindCullingMaskInterval(this Light obj, float seconds, Func<System.Int32> func)
            => BindCullingMaskInterval(obj, Bindings2._scope, seconds, func);


        public static void BindRefreshMode(this LightProbeProxyVolume obj, Bindings2 bindings, IProperty<UnityEngine.LightProbeProxyVolume.RefreshMode> property)
            => bindings.Bind(property, v => obj.refreshMode = v);
        public static void BindRefreshMode(this LightProbeProxyVolume obj, IProperty<UnityEngine.LightProbeProxyVolume.RefreshMode> property)
            => BindRefreshMode(obj, Bindings2._scope, property);
        public static void BindRefreshMode(this LightProbeProxyVolume obj, Bindings2 bindings, Func<UnityEngine.LightProbeProxyVolume.RefreshMode> func)
            => bindings.BindUpdate(() => obj.refreshMode = func());
        public static void BindRefreshMode(this LightProbeProxyVolume obj, Func<UnityEngine.LightProbeProxyVolume.RefreshMode> func)
            => BindRefreshMode(obj, Bindings2._scope, func);
        public static void BindRefreshModeInterval(this LightProbeProxyVolume obj, Bindings2 bindings, float seconds, Func<UnityEngine.LightProbeProxyVolume.RefreshMode> func)
            => bindings.BindInterval(seconds, () => obj.refreshMode = func());
        public static void BindRefreshModeInterval(this LightProbeProxyVolume obj, float seconds, Func<UnityEngine.LightProbeProxyVolume.RefreshMode> func)
            => BindRefreshModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindQualityMode(this LightProbeProxyVolume obj, Bindings2 bindings, IProperty<UnityEngine.LightProbeProxyVolume.QualityMode> property)
            => bindings.Bind(property, v => obj.qualityMode = v);
        public static void BindQualityMode(this LightProbeProxyVolume obj, IProperty<UnityEngine.LightProbeProxyVolume.QualityMode> property)
            => BindQualityMode(obj, Bindings2._scope, property);
        public static void BindQualityMode(this LightProbeProxyVolume obj, Bindings2 bindings, Func<UnityEngine.LightProbeProxyVolume.QualityMode> func)
            => bindings.BindUpdate(() => obj.qualityMode = func());
        public static void BindQualityMode(this LightProbeProxyVolume obj, Func<UnityEngine.LightProbeProxyVolume.QualityMode> func)
            => BindQualityMode(obj, Bindings2._scope, func);
        public static void BindQualityModeInterval(this LightProbeProxyVolume obj, Bindings2 bindings, float seconds, Func<UnityEngine.LightProbeProxyVolume.QualityMode> func)
            => bindings.BindInterval(seconds, () => obj.qualityMode = func());
        public static void BindQualityModeInterval(this LightProbeProxyVolume obj, float seconds, Func<UnityEngine.LightProbeProxyVolume.QualityMode> func)
            => BindQualityModeInterval(obj, Bindings2._scope, seconds, func);
        #if UNITY_2020_2_OR_NEWER
        public static void BindDataFormat(this LightProbeProxyVolume obj, Bindings2 bindings, IProperty<UnityEngine.LightProbeProxyVolume.DataFormat> property)
            => bindings.Bind(property, v => obj.dataFormat = v);
        public static void BindDataFormat(this LightProbeProxyVolume obj, IProperty<UnityEngine.LightProbeProxyVolume.DataFormat> property)
            => BindDataFormat(obj, Bindings2._scope, property);
        public static void BindDataFormat(this LightProbeProxyVolume obj, Bindings2 bindings, Func<UnityEngine.LightProbeProxyVolume.DataFormat> func)
            => bindings.BindUpdate(() => obj.dataFormat = func());
        public static void BindDataFormat(this LightProbeProxyVolume obj, Func<UnityEngine.LightProbeProxyVolume.DataFormat> func)
            => BindDataFormat(obj, Bindings2._scope, func);
        public static void BindDataFormatInterval(this LightProbeProxyVolume obj, Bindings2 bindings, float seconds, Func<UnityEngine.LightProbeProxyVolume.DataFormat> func)
            => bindings.BindInterval(seconds, () => obj.dataFormat = func());
        public static void BindDataFormatInterval(this LightProbeProxyVolume obj, float seconds, Func<UnityEngine.LightProbeProxyVolume.DataFormat> func)
            => BindDataFormatInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindBoundingBoxMode(this LightProbeProxyVolume obj, Bindings2 bindings, IProperty<UnityEngine.LightProbeProxyVolume.BoundingBoxMode> property)
            => bindings.Bind(property, v => obj.boundingBoxMode = v);
        public static void BindBoundingBoxMode(this LightProbeProxyVolume obj, IProperty<UnityEngine.LightProbeProxyVolume.BoundingBoxMode> property)
            => BindBoundingBoxMode(obj, Bindings2._scope, property);
        public static void BindBoundingBoxMode(this LightProbeProxyVolume obj, Bindings2 bindings, Func<UnityEngine.LightProbeProxyVolume.BoundingBoxMode> func)
            => bindings.BindUpdate(() => obj.boundingBoxMode = func());
        public static void BindBoundingBoxMode(this LightProbeProxyVolume obj, Func<UnityEngine.LightProbeProxyVolume.BoundingBoxMode> func)
            => BindBoundingBoxMode(obj, Bindings2._scope, func);
        public static void BindBoundingBoxModeInterval(this LightProbeProxyVolume obj, Bindings2 bindings, float seconds, Func<UnityEngine.LightProbeProxyVolume.BoundingBoxMode> func)
            => bindings.BindInterval(seconds, () => obj.boundingBoxMode = func());
        public static void BindBoundingBoxModeInterval(this LightProbeProxyVolume obj, float seconds, Func<UnityEngine.LightProbeProxyVolume.BoundingBoxMode> func)
            => BindBoundingBoxModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindResolutionMode(this LightProbeProxyVolume obj, Bindings2 bindings, IProperty<UnityEngine.LightProbeProxyVolume.ResolutionMode> property)
            => bindings.Bind(property, v => obj.resolutionMode = v);
        public static void BindResolutionMode(this LightProbeProxyVolume obj, IProperty<UnityEngine.LightProbeProxyVolume.ResolutionMode> property)
            => BindResolutionMode(obj, Bindings2._scope, property);
        public static void BindResolutionMode(this LightProbeProxyVolume obj, Bindings2 bindings, Func<UnityEngine.LightProbeProxyVolume.ResolutionMode> func)
            => bindings.BindUpdate(() => obj.resolutionMode = func());
        public static void BindResolutionMode(this LightProbeProxyVolume obj, Func<UnityEngine.LightProbeProxyVolume.ResolutionMode> func)
            => BindResolutionMode(obj, Bindings2._scope, func);
        public static void BindResolutionModeInterval(this LightProbeProxyVolume obj, Bindings2 bindings, float seconds, Func<UnityEngine.LightProbeProxyVolume.ResolutionMode> func)
            => bindings.BindInterval(seconds, () => obj.resolutionMode = func());
        public static void BindResolutionModeInterval(this LightProbeProxyVolume obj, float seconds, Func<UnityEngine.LightProbeProxyVolume.ResolutionMode> func)
            => BindResolutionModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindProbeDensity(this LightProbeProxyVolume obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.probeDensity = v);
        public static void BindProbeDensity(this LightProbeProxyVolume obj, IProperty<System.Single> property)
            => BindProbeDensity(obj, Bindings2._scope, property);
        public static void BindProbeDensity(this LightProbeProxyVolume obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.probeDensity = func());
        public static void BindProbeDensity(this LightProbeProxyVolume obj, Func<System.Single> func)
            => BindProbeDensity(obj, Bindings2._scope, func);
        public static void BindProbeDensityInterval(this LightProbeProxyVolume obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.probeDensity = func());
        public static void BindProbeDensityInterval(this LightProbeProxyVolume obj, float seconds, Func<System.Single> func)
            => BindProbeDensityInterval(obj, Bindings2._scope, seconds, func);
        public static void BindProbePositionMode(this LightProbeProxyVolume obj, Bindings2 bindings, IProperty<UnityEngine.LightProbeProxyVolume.ProbePositionMode> property)
            => bindings.Bind(property, v => obj.probePositionMode = v);
        public static void BindProbePositionMode(this LightProbeProxyVolume obj, IProperty<UnityEngine.LightProbeProxyVolume.ProbePositionMode> property)
            => BindProbePositionMode(obj, Bindings2._scope, property);
        public static void BindProbePositionMode(this LightProbeProxyVolume obj, Bindings2 bindings, Func<UnityEngine.LightProbeProxyVolume.ProbePositionMode> func)
            => bindings.BindUpdate(() => obj.probePositionMode = func());
        public static void BindProbePositionMode(this LightProbeProxyVolume obj, Func<UnityEngine.LightProbeProxyVolume.ProbePositionMode> func)
            => BindProbePositionMode(obj, Bindings2._scope, func);
        public static void BindProbePositionModeInterval(this LightProbeProxyVolume obj, Bindings2 bindings, float seconds, Func<UnityEngine.LightProbeProxyVolume.ProbePositionMode> func)
            => bindings.BindInterval(seconds, () => obj.probePositionMode = func());
        public static void BindProbePositionModeInterval(this LightProbeProxyVolume obj, float seconds, Func<UnityEngine.LightProbeProxyVolume.ProbePositionMode> func)
            => BindProbePositionModeInterval(obj, Bindings2._scope, seconds, func);


        public static void BindLoop(this LineRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.loop = v);
        public static void BindLoop(this LineRenderer obj, IProperty<System.Boolean> property)
            => BindLoop(obj, Bindings2._scope, property);
        public static void BindLoop(this LineRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.loop = func());
        public static void BindLoop(this LineRenderer obj, Func<System.Boolean> func)
            => BindLoop(obj, Bindings2._scope, func);
        public static void BindLoopInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.loop = func());
        public static void BindLoopInterval(this LineRenderer obj, float seconds, Func<System.Boolean> func)
            => BindLoopInterval(obj, Bindings2._scope, seconds, func);
        public static void BindStartColor(this LineRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.startColor = v);
        public static void BindStartColor(this LineRenderer obj, IProperty<UnityEngine.Color> property)
            => BindStartColor(obj, Bindings2._scope, property);
        public static void BindStartColor(this LineRenderer obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.startColor = func());
        public static void BindStartColor(this LineRenderer obj, Func<UnityEngine.Color> func)
            => BindStartColor(obj, Bindings2._scope, func);
        public static void BindStartColorInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.startColor = func());
        public static void BindStartColorInterval(this LineRenderer obj, float seconds, Func<UnityEngine.Color> func)
            => BindStartColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEndColor(this LineRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.endColor = v);
        public static void BindEndColor(this LineRenderer obj, IProperty<UnityEngine.Color> property)
            => BindEndColor(obj, Bindings2._scope, property);
        public static void BindEndColor(this LineRenderer obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.endColor = func());
        public static void BindEndColor(this LineRenderer obj, Func<UnityEngine.Color> func)
            => BindEndColor(obj, Bindings2._scope, func);
        public static void BindEndColorInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.endColor = func());
        public static void BindEndColorInterval(this LineRenderer obj, float seconds, Func<UnityEngine.Color> func)
            => BindEndColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindNumCornerVertices(this LineRenderer obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.numCornerVertices = v);
        public static void BindNumCornerVertices(this LineRenderer obj, IProperty<System.Int32> property)
            => BindNumCornerVertices(obj, Bindings2._scope, property);
        public static void BindNumCornerVertices(this LineRenderer obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.numCornerVertices = func());
        public static void BindNumCornerVertices(this LineRenderer obj, Func<System.Int32> func)
            => BindNumCornerVertices(obj, Bindings2._scope, func);
        public static void BindNumCornerVerticesInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.numCornerVertices = func());
        public static void BindNumCornerVerticesInterval(this LineRenderer obj, float seconds, Func<System.Int32> func)
            => BindNumCornerVerticesInterval(obj, Bindings2._scope, seconds, func);
        public static void BindNumCapVertices(this LineRenderer obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.numCapVertices = v);
        public static void BindNumCapVertices(this LineRenderer obj, IProperty<System.Int32> property)
            => BindNumCapVertices(obj, Bindings2._scope, property);
        public static void BindNumCapVertices(this LineRenderer obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.numCapVertices = func());
        public static void BindNumCapVertices(this LineRenderer obj, Func<System.Int32> func)
            => BindNumCapVertices(obj, Bindings2._scope, func);
        public static void BindNumCapVerticesInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.numCapVertices = func());
        public static void BindNumCapVerticesInterval(this LineRenderer obj, float seconds, Func<System.Int32> func)
            => BindNumCapVerticesInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAlignment(this LineRenderer obj, Bindings2 bindings, IProperty<UnityEngine.LineAlignment> property)
            => bindings.Bind(property, v => obj.alignment = v);
        public static void BindAlignment(this LineRenderer obj, IProperty<UnityEngine.LineAlignment> property)
            => BindAlignment(obj, Bindings2._scope, property);
        public static void BindAlignment(this LineRenderer obj, Bindings2 bindings, Func<UnityEngine.LineAlignment> func)
            => bindings.BindUpdate(() => obj.alignment = func());
        public static void BindAlignment(this LineRenderer obj, Func<UnityEngine.LineAlignment> func)
            => BindAlignment(obj, Bindings2._scope, func);
        public static void BindAlignmentInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.LineAlignment> func)
            => bindings.BindInterval(seconds, () => obj.alignment = func());
        public static void BindAlignmentInterval(this LineRenderer obj, float seconds, Func<UnityEngine.LineAlignment> func)
            => BindAlignmentInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTextureMode(this LineRenderer obj, Bindings2 bindings, IProperty<UnityEngine.LineTextureMode> property)
            => bindings.Bind(property, v => obj.textureMode = v);
        public static void BindTextureMode(this LineRenderer obj, IProperty<UnityEngine.LineTextureMode> property)
            => BindTextureMode(obj, Bindings2._scope, property);
        public static void BindTextureMode(this LineRenderer obj, Bindings2 bindings, Func<UnityEngine.LineTextureMode> func)
            => bindings.BindUpdate(() => obj.textureMode = func());
        public static void BindTextureMode(this LineRenderer obj, Func<UnityEngine.LineTextureMode> func)
            => BindTextureMode(obj, Bindings2._scope, func);
        public static void BindTextureModeInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.LineTextureMode> func)
            => bindings.BindInterval(seconds, () => obj.textureMode = func());
        public static void BindTextureModeInterval(this LineRenderer obj, float seconds, Func<UnityEngine.LineTextureMode> func)
            => BindTextureModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindShadowBias(this LineRenderer obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.shadowBias = v);
        public static void BindShadowBias(this LineRenderer obj, IProperty<System.Single> property)
            => BindShadowBias(obj, Bindings2._scope, property);
        public static void BindShadowBias(this LineRenderer obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.shadowBias = func());
        public static void BindShadowBias(this LineRenderer obj, Func<System.Single> func)
            => BindShadowBias(obj, Bindings2._scope, func);
        public static void BindShadowBiasInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.shadowBias = func());
        public static void BindShadowBiasInterval(this LineRenderer obj, float seconds, Func<System.Single> func)
            => BindShadowBiasInterval(obj, Bindings2._scope, seconds, func);
        public static void BindGenerateLightingData(this LineRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.generateLightingData = v);
        public static void BindGenerateLightingData(this LineRenderer obj, IProperty<System.Boolean> property)
            => BindGenerateLightingData(obj, Bindings2._scope, property);
        public static void BindGenerateLightingData(this LineRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.generateLightingData = func());
        public static void BindGenerateLightingData(this LineRenderer obj, Func<System.Boolean> func)
            => BindGenerateLightingData(obj, Bindings2._scope, func);
        public static void BindGenerateLightingDataInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.generateLightingData = func());
        public static void BindGenerateLightingDataInterval(this LineRenderer obj, float seconds, Func<System.Boolean> func)
            => BindGenerateLightingDataInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseWorldSpace(this LineRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useWorldSpace = v);
        public static void BindUseWorldSpace(this LineRenderer obj, IProperty<System.Boolean> property)
            => BindUseWorldSpace(obj, Bindings2._scope, property);
        public static void BindUseWorldSpace(this LineRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useWorldSpace = func());
        public static void BindUseWorldSpace(this LineRenderer obj, Func<System.Boolean> func)
            => BindUseWorldSpace(obj, Bindings2._scope, func);
        public static void BindUseWorldSpaceInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useWorldSpace = func());
        public static void BindUseWorldSpaceInterval(this LineRenderer obj, float seconds, Func<System.Boolean> func)
            => BindUseWorldSpaceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSharedMaterials(this LineRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Material[]> property)
            => bindings.Bind(property, v => obj.sharedMaterials = v);
        public static void BindSharedMaterials(this LineRenderer obj, IProperty<UnityEngine.Material[]> property)
            => BindSharedMaterials(obj, Bindings2._scope, property);
        public static void BindSharedMaterials(this LineRenderer obj, Bindings2 bindings, Func<UnityEngine.Material[]> func)
            => bindings.BindUpdate(() => obj.sharedMaterials = func());
        public static void BindSharedMaterials(this LineRenderer obj, Func<UnityEngine.Material[]> func)
            => BindSharedMaterials(obj, Bindings2._scope, func);
        public static void BindSharedMaterialsInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Material[]> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterials = func());
        public static void BindSharedMaterialsInterval(this LineRenderer obj, float seconds, Func<UnityEngine.Material[]> func)
            => BindSharedMaterialsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindShadowCastingMode(this LineRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Rendering.ShadowCastingMode> property)
            => bindings.Bind(property, v => obj.shadowCastingMode = v);
        public static void BindShadowCastingMode(this LineRenderer obj, IProperty<UnityEngine.Rendering.ShadowCastingMode> property)
            => BindShadowCastingMode(obj, Bindings2._scope, property);
        public static void BindShadowCastingMode(this LineRenderer obj, Bindings2 bindings, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => bindings.BindUpdate(() => obj.shadowCastingMode = func());
        public static void BindShadowCastingMode(this LineRenderer obj, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => BindShadowCastingMode(obj, Bindings2._scope, func);
        public static void BindShadowCastingModeInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => bindings.BindInterval(seconds, () => obj.shadowCastingMode = func());
        public static void BindShadowCastingModeInterval(this LineRenderer obj, float seconds, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => BindShadowCastingModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReceiveShadows(this LineRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.receiveShadows = v);
        public static void BindReceiveShadows(this LineRenderer obj, IProperty<System.Boolean> property)
            => BindReceiveShadows(obj, Bindings2._scope, property);
        public static void BindReceiveShadows(this LineRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.receiveShadows = func());
        public static void BindReceiveShadows(this LineRenderer obj, Func<System.Boolean> func)
            => BindReceiveShadows(obj, Bindings2._scope, func);
        public static void BindReceiveShadowsInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.receiveShadows = func());
        public static void BindReceiveShadowsInterval(this LineRenderer obj, float seconds, Func<System.Boolean> func)
            => BindReceiveShadowsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLightProbeUsage(this LineRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Rendering.LightProbeUsage> property)
            => bindings.Bind(property, v => obj.lightProbeUsage = v);
        public static void BindLightProbeUsage(this LineRenderer obj, IProperty<UnityEngine.Rendering.LightProbeUsage> property)
            => BindLightProbeUsage(obj, Bindings2._scope, property);
        public static void BindLightProbeUsage(this LineRenderer obj, Bindings2 bindings, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => bindings.BindUpdate(() => obj.lightProbeUsage = func());
        public static void BindLightProbeUsage(this LineRenderer obj, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => BindLightProbeUsage(obj, Bindings2._scope, func);
        public static void BindLightProbeUsageInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => bindings.BindInterval(seconds, () => obj.lightProbeUsage = func());
        public static void BindLightProbeUsageInterval(this LineRenderer obj, float seconds, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => BindLightProbeUsageInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReflectionProbeUsage(this LineRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Rendering.ReflectionProbeUsage> property)
            => bindings.Bind(property, v => obj.reflectionProbeUsage = v);
        public static void BindReflectionProbeUsage(this LineRenderer obj, IProperty<UnityEngine.Rendering.ReflectionProbeUsage> property)
            => BindReflectionProbeUsage(obj, Bindings2._scope, property);
        public static void BindReflectionProbeUsage(this LineRenderer obj, Bindings2 bindings, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => bindings.BindUpdate(() => obj.reflectionProbeUsage = func());
        public static void BindReflectionProbeUsage(this LineRenderer obj, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => BindReflectionProbeUsage(obj, Bindings2._scope, func);
        public static void BindReflectionProbeUsageInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => bindings.BindInterval(seconds, () => obj.reflectionProbeUsage = func());
        public static void BindReflectionProbeUsageInterval(this LineRenderer obj, float seconds, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => BindReflectionProbeUsageInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMotionVectorGenerationMode(this LineRenderer obj, Bindings2 bindings, IProperty<UnityEngine.MotionVectorGenerationMode> property)
            => bindings.Bind(property, v => obj.motionVectorGenerationMode = v);
        public static void BindMotionVectorGenerationMode(this LineRenderer obj, IProperty<UnityEngine.MotionVectorGenerationMode> property)
            => BindMotionVectorGenerationMode(obj, Bindings2._scope, property);
        public static void BindMotionVectorGenerationMode(this LineRenderer obj, Bindings2 bindings, Func<UnityEngine.MotionVectorGenerationMode> func)
            => bindings.BindUpdate(() => obj.motionVectorGenerationMode = func());
        public static void BindMotionVectorGenerationMode(this LineRenderer obj, Func<UnityEngine.MotionVectorGenerationMode> func)
            => BindMotionVectorGenerationMode(obj, Bindings2._scope, func);
        public static void BindMotionVectorGenerationModeInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.MotionVectorGenerationMode> func)
            => bindings.BindInterval(seconds, () => obj.motionVectorGenerationMode = func());
        public static void BindMotionVectorGenerationModeInterval(this LineRenderer obj, float seconds, Func<UnityEngine.MotionVectorGenerationMode> func)
            => BindMotionVectorGenerationModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAllowOcclusionWhenDynamic(this LineRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.allowOcclusionWhenDynamic = v);
        public static void BindAllowOcclusionWhenDynamic(this LineRenderer obj, IProperty<System.Boolean> property)
            => BindAllowOcclusionWhenDynamic(obj, Bindings2._scope, property);
        public static void BindAllowOcclusionWhenDynamic(this LineRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.allowOcclusionWhenDynamic = func());
        public static void BindAllowOcclusionWhenDynamic(this LineRenderer obj, Func<System.Boolean> func)
            => BindAllowOcclusionWhenDynamic(obj, Bindings2._scope, func);
        public static void BindAllowOcclusionWhenDynamicInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.allowOcclusionWhenDynamic = func());
        public static void BindAllowOcclusionWhenDynamicInterval(this LineRenderer obj, float seconds, Func<System.Boolean> func)
            => BindAllowOcclusionWhenDynamicInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSortingLayerID(this LineRenderer obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.sortingLayerID = v);
        public static void BindSortingLayerID(this LineRenderer obj, IProperty<System.Int32> property)
            => BindSortingLayerID(obj, Bindings2._scope, property);
        public static void BindSortingLayerID(this LineRenderer obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.sortingLayerID = func());
        public static void BindSortingLayerID(this LineRenderer obj, Func<System.Int32> func)
            => BindSortingLayerID(obj, Bindings2._scope, func);
        public static void BindSortingLayerIDInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.sortingLayerID = func());
        public static void BindSortingLayerIDInterval(this LineRenderer obj, float seconds, Func<System.Int32> func)
            => BindSortingLayerIDInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSortingOrder(this LineRenderer obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.sortingOrder = v);
        public static void BindSortingOrder(this LineRenderer obj, IProperty<System.Int32> property)
            => BindSortingOrder(obj, Bindings2._scope, property);
        public static void BindSortingOrder(this LineRenderer obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.sortingOrder = func());
        public static void BindSortingOrder(this LineRenderer obj, Func<System.Int32> func)
            => BindSortingOrder(obj, Bindings2._scope, func);
        public static void BindSortingOrderInterval(this LineRenderer obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.sortingOrder = func());
        public static void BindSortingOrderInterval(this LineRenderer obj, float seconds, Func<System.Int32> func)
            => BindSortingOrderInterval(obj, Bindings2._scope, seconds, func);


        #if UNITY_ANIMATION
        public static void BindConstraintActive(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.constraintActive = v);
        public static void BindConstraintActive(this UnityEngine.Animations.LookAtConstraint obj, IProperty<System.Boolean> property)
            => BindConstraintActive(obj, Bindings2._scope, property);
        public static void BindConstraintActive(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.constraintActive = func());
        public static void BindConstraintActive(this UnityEngine.Animations.LookAtConstraint obj, Func<System.Boolean> func)
            => BindConstraintActive(obj, Bindings2._scope, func);
        public static void BindConstraintActiveInterval(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.constraintActive = func());
        public static void BindConstraintActiveInterval(this UnityEngine.Animations.LookAtConstraint obj, float seconds, Func<System.Boolean> func)
            => BindConstraintActiveInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWeight(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.weight = v);
        public static void BindWeight(this UnityEngine.Animations.LookAtConstraint obj, IProperty<System.Single> property)
            => BindWeight(obj, Bindings2._scope, property);
        public static void BindWeight(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.weight = func());
        public static void BindWeight(this UnityEngine.Animations.LookAtConstraint obj, Func<System.Single> func)
            => BindWeight(obj, Bindings2._scope, func);
        public static void BindWeightInterval(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.weight = func());
        public static void BindWeightInterval(this UnityEngine.Animations.LookAtConstraint obj, float seconds, Func<System.Single> func)
            => BindWeightInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseUpObject(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useUpObject = v);
        public static void BindUseUpObject(this UnityEngine.Animations.LookAtConstraint obj, IProperty<System.Boolean> property)
            => BindUseUpObject(obj, Bindings2._scope, property);
        public static void BindUseUpObject(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useUpObject = func());
        public static void BindUseUpObject(this UnityEngine.Animations.LookAtConstraint obj, Func<System.Boolean> func)
            => BindUseUpObject(obj, Bindings2._scope, func);
        public static void BindUseUpObjectInterval(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useUpObject = func());
        public static void BindUseUpObjectInterval(this UnityEngine.Animations.LookAtConstraint obj, float seconds, Func<System.Boolean> func)
            => BindUseUpObjectInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRoll(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.roll = v);
        public static void BindRoll(this UnityEngine.Animations.LookAtConstraint obj, IProperty<System.Single> property)
            => BindRoll(obj, Bindings2._scope, property);
        public static void BindRoll(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.roll = func());
        public static void BindRoll(this UnityEngine.Animations.LookAtConstraint obj, Func<System.Single> func)
            => BindRoll(obj, Bindings2._scope, func);
        public static void BindRollInterval(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.roll = func());
        public static void BindRollInterval(this UnityEngine.Animations.LookAtConstraint obj, float seconds, Func<System.Single> func)
            => BindRollInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWorldUpObject(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Transform> property)
            => bindings.Bind(property, v => obj.worldUpObject = v);
        public static void BindWorldUpObject(this UnityEngine.Animations.LookAtConstraint obj, IProperty<UnityEngine.Transform> property)
            => BindWorldUpObject(obj, Bindings2._scope, property);
        public static void BindWorldUpObject(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, Func<UnityEngine.Transform> func)
            => bindings.BindUpdate(() => obj.worldUpObject = func());
        public static void BindWorldUpObject(this UnityEngine.Animations.LookAtConstraint obj, Func<UnityEngine.Transform> func)
            => BindWorldUpObject(obj, Bindings2._scope, func);
        public static void BindWorldUpObjectInterval(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Transform> func)
            => bindings.BindInterval(seconds, () => obj.worldUpObject = func());
        public static void BindWorldUpObjectInterval(this UnityEngine.Animations.LookAtConstraint obj, float seconds, Func<UnityEngine.Transform> func)
            => BindWorldUpObjectInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLocked(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.locked = v);
        public static void BindLocked(this UnityEngine.Animations.LookAtConstraint obj, IProperty<System.Boolean> property)
            => BindLocked(obj, Bindings2._scope, property);
        public static void BindLocked(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.locked = func());
        public static void BindLocked(this UnityEngine.Animations.LookAtConstraint obj, Func<System.Boolean> func)
            => BindLocked(obj, Bindings2._scope, func);
        public static void BindLockedInterval(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.locked = func());
        public static void BindLockedInterval(this UnityEngine.Animations.LookAtConstraint obj, float seconds, Func<System.Boolean> func)
            => BindLockedInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRotationAtRest(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.rotationAtRest = v);
        public static void BindRotationAtRest(this UnityEngine.Animations.LookAtConstraint obj, IProperty<UnityEngine.Vector3> property)
            => BindRotationAtRest(obj, Bindings2._scope, property);
        public static void BindRotationAtRest(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationAtRest = func());
        public static void BindRotationAtRest(this UnityEngine.Animations.LookAtConstraint obj, Func<UnityEngine.Vector3> func)
            => BindRotationAtRest(obj, Bindings2._scope, func);
        public static void BindRotationAtRestInterval(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.rotationAtRest = func());
        public static void BindRotationAtRestInterval(this UnityEngine.Animations.LookAtConstraint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindRotationAtRestInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRotationAtRestLerp(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.rotationAtRest = Vector3.Lerp(obj.rotationAtRest, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRotationAtRestLerp(this UnityEngine.Animations.LookAtConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRotationAtRestLerp(obj, Bindings2._scope, speed, property);
        public static void BindRotationAtRestLerp(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationAtRest = Vector3.Lerp(obj.rotationAtRest, func(), speed * Time.smoothDeltaTime));
        public static void BindRotationAtRestLerp(this UnityEngine.Animations.LookAtConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRotationAtRestLerp(obj, Bindings2._scope, speed, func);
        public static void BindRotationAtRestTowards(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.rotationAtRest = Vector3.MoveTowards(obj.rotationAtRest, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRotationAtRestTowards(this UnityEngine.Animations.LookAtConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRotationAtRestTowards(obj, Bindings2._scope, speed, property);
        public static void BindRotationAtRestTowards(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationAtRest = Vector3.MoveTowards(obj.rotationAtRest, func(), speed * Time.smoothDeltaTime));
        public static void BindRotationAtRestTowards(this UnityEngine.Animations.LookAtConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRotationAtRestTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateRotationAtRest(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.rotationAtRest = Vector3.Lerp(start, end, t));
        public static void AnimateRotationAtRest(this UnityEngine.Animations.LookAtConstraint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationAtRest(obj, Bindings2._scope, start, end, curve);
        public static void AnimateRotationAtRest(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationAtRest(obj, Bindings2._scope, obj.rotationAtRest, end, curve);
        public static void AnimateRotationAtRest(this UnityEngine.Animations.LookAtConstraint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationAtRest(obj, Bindings2._scope, end, curve);
        public static void BindRotationOffset(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.rotationOffset = v);
        public static void BindRotationOffset(this UnityEngine.Animations.LookAtConstraint obj, IProperty<UnityEngine.Vector3> property)
            => BindRotationOffset(obj, Bindings2._scope, property);
        public static void BindRotationOffset(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationOffset = func());
        public static void BindRotationOffset(this UnityEngine.Animations.LookAtConstraint obj, Func<UnityEngine.Vector3> func)
            => BindRotationOffset(obj, Bindings2._scope, func);
        public static void BindRotationOffsetInterval(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.rotationOffset = func());
        public static void BindRotationOffsetInterval(this UnityEngine.Animations.LookAtConstraint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindRotationOffsetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRotationOffsetLerp(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.rotationOffset = Vector3.Lerp(obj.rotationOffset, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRotationOffsetLerp(this UnityEngine.Animations.LookAtConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRotationOffsetLerp(obj, Bindings2._scope, speed, property);
        public static void BindRotationOffsetLerp(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationOffset = Vector3.Lerp(obj.rotationOffset, func(), speed * Time.smoothDeltaTime));
        public static void BindRotationOffsetLerp(this UnityEngine.Animations.LookAtConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRotationOffsetLerp(obj, Bindings2._scope, speed, func);
        public static void BindRotationOffsetTowards(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.rotationOffset = Vector3.MoveTowards(obj.rotationOffset, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRotationOffsetTowards(this UnityEngine.Animations.LookAtConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRotationOffsetTowards(obj, Bindings2._scope, speed, property);
        public static void BindRotationOffsetTowards(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationOffset = Vector3.MoveTowards(obj.rotationOffset, func(), speed * Time.smoothDeltaTime));
        public static void BindRotationOffsetTowards(this UnityEngine.Animations.LookAtConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRotationOffsetTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateRotationOffset(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.rotationOffset = Vector3.Lerp(start, end, t));
        public static void AnimateRotationOffset(this UnityEngine.Animations.LookAtConstraint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationOffset(obj, Bindings2._scope, start, end, curve);
        public static void AnimateRotationOffset(this UnityEngine.Animations.LookAtConstraint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationOffset(obj, Bindings2._scope, obj.rotationOffset, end, curve);
        public static void AnimateRotationOffset(this UnityEngine.Animations.LookAtConstraint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationOffset(obj, Bindings2._scope, end, curve);
        #endif


        #if UNITY_GUI
        public static void BindShowMaskGraphic(this UnityEngine.UI.Mask obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.showMaskGraphic = v);
        public static void BindShowMaskGraphic(this UnityEngine.UI.Mask obj, IProperty<System.Boolean> property)
            => BindShowMaskGraphic(obj, Bindings2._scope, property);
        public static void BindShowMaskGraphic(this UnityEngine.UI.Mask obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.showMaskGraphic = func());
        public static void BindShowMaskGraphic(this UnityEngine.UI.Mask obj, Func<System.Boolean> func)
            => BindShowMaskGraphic(obj, Bindings2._scope, func);
        public static void BindShowMaskGraphicInterval(this UnityEngine.UI.Mask obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.showMaskGraphic = func());
        public static void BindShowMaskGraphicInterval(this UnityEngine.UI.Mask obj, float seconds, Func<System.Boolean> func)
            => BindShowMaskGraphicInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS
        public static void BindConvex(this MeshCollider obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.convex = v);
        public static void BindConvex(this MeshCollider obj, IProperty<System.Boolean> property)
            => BindConvex(obj, Bindings2._scope, property);
        public static void BindConvex(this MeshCollider obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.convex = func());
        public static void BindConvex(this MeshCollider obj, Func<System.Boolean> func)
            => BindConvex(obj, Bindings2._scope, func);
        public static void BindConvexInterval(this MeshCollider obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.convex = func());
        public static void BindConvexInterval(this MeshCollider obj, float seconds, Func<System.Boolean> func)
            => BindConvexInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIsTrigger(this MeshCollider obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isTrigger = v);
        public static void BindIsTrigger(this MeshCollider obj, IProperty<System.Boolean> property)
            => BindIsTrigger(obj, Bindings2._scope, property);
        public static void BindIsTrigger(this MeshCollider obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isTrigger = func());
        public static void BindIsTrigger(this MeshCollider obj, Func<System.Boolean> func)
            => BindIsTrigger(obj, Bindings2._scope, func);
        public static void BindIsTriggerInterval(this MeshCollider obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isTrigger = func());
        public static void BindIsTriggerInterval(this MeshCollider obj, float seconds, Func<System.Boolean> func)
            => BindIsTriggerInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCookingOptions(this MeshCollider obj, Bindings2 bindings, IProperty<UnityEngine.MeshColliderCookingOptions> property)
            => bindings.Bind(property, v => obj.cookingOptions = v);
        public static void BindCookingOptions(this MeshCollider obj, IProperty<UnityEngine.MeshColliderCookingOptions> property)
            => BindCookingOptions(obj, Bindings2._scope, property);
        public static void BindCookingOptions(this MeshCollider obj, Bindings2 bindings, Func<UnityEngine.MeshColliderCookingOptions> func)
            => bindings.BindUpdate(() => obj.cookingOptions = func());
        public static void BindCookingOptions(this MeshCollider obj, Func<UnityEngine.MeshColliderCookingOptions> func)
            => BindCookingOptions(obj, Bindings2._scope, func);
        public static void BindCookingOptionsInterval(this MeshCollider obj, Bindings2 bindings, float seconds, Func<UnityEngine.MeshColliderCookingOptions> func)
            => bindings.BindInterval(seconds, () => obj.cookingOptions = func());
        public static void BindCookingOptionsInterval(this MeshCollider obj, float seconds, Func<UnityEngine.MeshColliderCookingOptions> func)
            => BindCookingOptionsInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_6000_0_OR_NEWER
        public static void BindSharedMaterial(this MeshCollider obj, Bindings2 bindings, IProperty<PhysicMaterial> property)
            => bindings.Bind(property, v => obj.sharedMaterial = v);
        public static void BindSharedMaterial(this MeshCollider obj, IProperty<PhysicMaterial> property)
            => BindSharedMaterial(obj, Bindings2._scope, property);
        public static void BindSharedMaterial(this MeshCollider obj, Bindings2 bindings, Func<PhysicMaterial> func)
            => bindings.BindUpdate(() => obj.sharedMaterial = func());
        public static void BindSharedMaterial(this MeshCollider obj, Func<PhysicMaterial> func)
            => BindSharedMaterial(obj, Bindings2._scope, func);
        public static void BindSharedMaterialInterval(this MeshCollider obj, Bindings2 bindings, float seconds, Func<PhysicMaterial> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterial = func());
        public static void BindSharedMaterialInterval(this MeshCollider obj, float seconds, Func<PhysicMaterial> func)
            => BindSharedMaterialInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_6000_0_OR_NEWER
        public static void BindSharedMaterial(this MeshCollider obj, Bindings2 bindings, IProperty<PhysicsMaterial> property)
            => bindings.Bind(property, v => obj.sharedMaterial = v);
        public static void BindSharedMaterial(this MeshCollider obj, IProperty<PhysicsMaterial> property)
            => BindSharedMaterial(obj, Bindings2._scope, property);
        public static void BindSharedMaterial(this MeshCollider obj, Bindings2 bindings, Func<PhysicsMaterial> func)
            => bindings.BindUpdate(() => obj.sharedMaterial = func());
        public static void BindSharedMaterial(this MeshCollider obj, Func<PhysicsMaterial> func)
            => BindSharedMaterial(obj, Bindings2._scope, func);
        public static void BindSharedMaterialInterval(this MeshCollider obj, Bindings2 bindings, float seconds, Func<PhysicsMaterial> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterial = func());
        public static void BindSharedMaterialInterval(this MeshCollider obj, float seconds, Func<PhysicsMaterial> func)
            => BindSharedMaterialInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindSharedMesh(this MeshCollider obj, Bindings2 bindings, IProperty<UnityEngine.Mesh> property)
            => bindings.Bind(property, v => obj.sharedMesh = v);
        public static void BindSharedMesh(this MeshCollider obj, IProperty<UnityEngine.Mesh> property)
            => BindSharedMesh(obj, Bindings2._scope, property);
        public static void BindSharedMesh(this MeshCollider obj, Bindings2 bindings, Func<UnityEngine.Mesh> func)
            => bindings.BindUpdate(() => obj.sharedMesh = func());
        public static void BindSharedMesh(this MeshCollider obj, Func<UnityEngine.Mesh> func)
            => BindSharedMesh(obj, Bindings2._scope, func);
        public static void BindSharedMeshInterval(this MeshCollider obj, Bindings2 bindings, float seconds, Func<UnityEngine.Mesh> func)
            => bindings.BindInterval(seconds, () => obj.sharedMesh = func());
        public static void BindSharedMeshInterval(this MeshCollider obj, float seconds, Func<UnityEngine.Mesh> func)
            => BindSharedMeshInterval(obj, Bindings2._scope, seconds, func);
        #endif


        public static void BindSharedMesh(this MeshFilter obj, Bindings2 bindings, IProperty<UnityEngine.Mesh> property)
            => bindings.Bind(property, v => obj.sharedMesh = v);
        public static void BindSharedMesh(this MeshFilter obj, IProperty<UnityEngine.Mesh> property)
            => BindSharedMesh(obj, Bindings2._scope, property);
        public static void BindSharedMesh(this MeshFilter obj, Bindings2 bindings, Func<UnityEngine.Mesh> func)
            => bindings.BindUpdate(() => obj.sharedMesh = func());
        public static void BindSharedMesh(this MeshFilter obj, Func<UnityEngine.Mesh> func)
            => BindSharedMesh(obj, Bindings2._scope, func);
        public static void BindSharedMeshInterval(this MeshFilter obj, Bindings2 bindings, float seconds, Func<UnityEngine.Mesh> func)
            => bindings.BindInterval(seconds, () => obj.sharedMesh = func());
        public static void BindSharedMeshInterval(this MeshFilter obj, float seconds, Func<UnityEngine.Mesh> func)
            => BindSharedMeshInterval(obj, Bindings2._scope, seconds, func);


        public static void BindSharedMaterials(this MeshRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Material[]> property)
            => bindings.Bind(property, v => obj.sharedMaterials = v);
        public static void BindSharedMaterials(this MeshRenderer obj, IProperty<UnityEngine.Material[]> property)
            => BindSharedMaterials(obj, Bindings2._scope, property);
        public static void BindSharedMaterials(this MeshRenderer obj, Bindings2 bindings, Func<UnityEngine.Material[]> func)
            => bindings.BindUpdate(() => obj.sharedMaterials = func());
        public static void BindSharedMaterials(this MeshRenderer obj, Func<UnityEngine.Material[]> func)
            => BindSharedMaterials(obj, Bindings2._scope, func);
        public static void BindSharedMaterialsInterval(this MeshRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Material[]> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterials = func());
        public static void BindSharedMaterialsInterval(this MeshRenderer obj, float seconds, Func<UnityEngine.Material[]> func)
            => BindSharedMaterialsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindShadowCastingMode(this MeshRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Rendering.ShadowCastingMode> property)
            => bindings.Bind(property, v => obj.shadowCastingMode = v);
        public static void BindShadowCastingMode(this MeshRenderer obj, IProperty<UnityEngine.Rendering.ShadowCastingMode> property)
            => BindShadowCastingMode(obj, Bindings2._scope, property);
        public static void BindShadowCastingMode(this MeshRenderer obj, Bindings2 bindings, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => bindings.BindUpdate(() => obj.shadowCastingMode = func());
        public static void BindShadowCastingMode(this MeshRenderer obj, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => BindShadowCastingMode(obj, Bindings2._scope, func);
        public static void BindShadowCastingModeInterval(this MeshRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => bindings.BindInterval(seconds, () => obj.shadowCastingMode = func());
        public static void BindShadowCastingModeInterval(this MeshRenderer obj, float seconds, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => BindShadowCastingModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReceiveShadows(this MeshRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.receiveShadows = v);
        public static void BindReceiveShadows(this MeshRenderer obj, IProperty<System.Boolean> property)
            => BindReceiveShadows(obj, Bindings2._scope, property);
        public static void BindReceiveShadows(this MeshRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.receiveShadows = func());
        public static void BindReceiveShadows(this MeshRenderer obj, Func<System.Boolean> func)
            => BindReceiveShadows(obj, Bindings2._scope, func);
        public static void BindReceiveShadowsInterval(this MeshRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.receiveShadows = func());
        public static void BindReceiveShadowsInterval(this MeshRenderer obj, float seconds, Func<System.Boolean> func)
            => BindReceiveShadowsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLightProbeUsage(this MeshRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Rendering.LightProbeUsage> property)
            => bindings.Bind(property, v => obj.lightProbeUsage = v);
        public static void BindLightProbeUsage(this MeshRenderer obj, IProperty<UnityEngine.Rendering.LightProbeUsage> property)
            => BindLightProbeUsage(obj, Bindings2._scope, property);
        public static void BindLightProbeUsage(this MeshRenderer obj, Bindings2 bindings, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => bindings.BindUpdate(() => obj.lightProbeUsage = func());
        public static void BindLightProbeUsage(this MeshRenderer obj, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => BindLightProbeUsage(obj, Bindings2._scope, func);
        public static void BindLightProbeUsageInterval(this MeshRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => bindings.BindInterval(seconds, () => obj.lightProbeUsage = func());
        public static void BindLightProbeUsageInterval(this MeshRenderer obj, float seconds, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => BindLightProbeUsageInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReflectionProbeUsage(this MeshRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Rendering.ReflectionProbeUsage> property)
            => bindings.Bind(property, v => obj.reflectionProbeUsage = v);
        public static void BindReflectionProbeUsage(this MeshRenderer obj, IProperty<UnityEngine.Rendering.ReflectionProbeUsage> property)
            => BindReflectionProbeUsage(obj, Bindings2._scope, property);
        public static void BindReflectionProbeUsage(this MeshRenderer obj, Bindings2 bindings, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => bindings.BindUpdate(() => obj.reflectionProbeUsage = func());
        public static void BindReflectionProbeUsage(this MeshRenderer obj, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => BindReflectionProbeUsage(obj, Bindings2._scope, func);
        public static void BindReflectionProbeUsageInterval(this MeshRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => bindings.BindInterval(seconds, () => obj.reflectionProbeUsage = func());
        public static void BindReflectionProbeUsageInterval(this MeshRenderer obj, float seconds, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => BindReflectionProbeUsageInterval(obj, Bindings2._scope, seconds, func);
        public static void BindProbeAnchor(this MeshRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Transform> property)
            => bindings.Bind(property, v => obj.probeAnchor = v);
        public static void BindProbeAnchor(this MeshRenderer obj, IProperty<UnityEngine.Transform> property)
            => BindProbeAnchor(obj, Bindings2._scope, property);
        public static void BindProbeAnchor(this MeshRenderer obj, Bindings2 bindings, Func<UnityEngine.Transform> func)
            => bindings.BindUpdate(() => obj.probeAnchor = func());
        public static void BindProbeAnchor(this MeshRenderer obj, Func<UnityEngine.Transform> func)
            => BindProbeAnchor(obj, Bindings2._scope, func);
        public static void BindProbeAnchorInterval(this MeshRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Transform> func)
            => bindings.BindInterval(seconds, () => obj.probeAnchor = func());
        public static void BindProbeAnchorInterval(this MeshRenderer obj, float seconds, Func<UnityEngine.Transform> func)
            => BindProbeAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMotionVectorGenerationMode(this MeshRenderer obj, Bindings2 bindings, IProperty<UnityEngine.MotionVectorGenerationMode> property)
            => bindings.Bind(property, v => obj.motionVectorGenerationMode = v);
        public static void BindMotionVectorGenerationMode(this MeshRenderer obj, IProperty<UnityEngine.MotionVectorGenerationMode> property)
            => BindMotionVectorGenerationMode(obj, Bindings2._scope, property);
        public static void BindMotionVectorGenerationMode(this MeshRenderer obj, Bindings2 bindings, Func<UnityEngine.MotionVectorGenerationMode> func)
            => bindings.BindUpdate(() => obj.motionVectorGenerationMode = func());
        public static void BindMotionVectorGenerationMode(this MeshRenderer obj, Func<UnityEngine.MotionVectorGenerationMode> func)
            => BindMotionVectorGenerationMode(obj, Bindings2._scope, func);
        public static void BindMotionVectorGenerationModeInterval(this MeshRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.MotionVectorGenerationMode> func)
            => bindings.BindInterval(seconds, () => obj.motionVectorGenerationMode = func());
        public static void BindMotionVectorGenerationModeInterval(this MeshRenderer obj, float seconds, Func<UnityEngine.MotionVectorGenerationMode> func)
            => BindMotionVectorGenerationModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAllowOcclusionWhenDynamic(this MeshRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.allowOcclusionWhenDynamic = v);
        public static void BindAllowOcclusionWhenDynamic(this MeshRenderer obj, IProperty<System.Boolean> property)
            => BindAllowOcclusionWhenDynamic(obj, Bindings2._scope, property);
        public static void BindAllowOcclusionWhenDynamic(this MeshRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.allowOcclusionWhenDynamic = func());
        public static void BindAllowOcclusionWhenDynamic(this MeshRenderer obj, Func<System.Boolean> func)
            => BindAllowOcclusionWhenDynamic(obj, Bindings2._scope, func);
        public static void BindAllowOcclusionWhenDynamicInterval(this MeshRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.allowOcclusionWhenDynamic = func());
        public static void BindAllowOcclusionWhenDynamicInterval(this MeshRenderer obj, float seconds, Func<System.Boolean> func)
            => BindAllowOcclusionWhenDynamicInterval(obj, Bindings2._scope, seconds, func);


        #if UNITY_AI
        public static void BindAgentTypeID(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.agentTypeID = v);
        public static void BindAgentTypeID(this UnityEngine.AI.NavMeshAgent obj, IProperty<System.Int32> property)
            => BindAgentTypeID(obj, Bindings2._scope, property);
        public static void BindAgentTypeID(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.agentTypeID = func());
        public static void BindAgentTypeID(this UnityEngine.AI.NavMeshAgent obj, Func<System.Int32> func)
            => BindAgentTypeID(obj, Bindings2._scope, func);
        public static void BindAgentTypeIDInterval(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.agentTypeID = func());
        public static void BindAgentTypeIDInterval(this UnityEngine.AI.NavMeshAgent obj, float seconds, Func<System.Int32> func)
            => BindAgentTypeIDInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBaseOffset(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.baseOffset = v);
        public static void BindBaseOffset(this UnityEngine.AI.NavMeshAgent obj, IProperty<System.Single> property)
            => BindBaseOffset(obj, Bindings2._scope, property);
        public static void BindBaseOffset(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.baseOffset = func());
        public static void BindBaseOffset(this UnityEngine.AI.NavMeshAgent obj, Func<System.Single> func)
            => BindBaseOffset(obj, Bindings2._scope, func);
        public static void BindBaseOffsetInterval(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.baseOffset = func());
        public static void BindBaseOffsetInterval(this UnityEngine.AI.NavMeshAgent obj, float seconds, Func<System.Single> func)
            => BindBaseOffsetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSpeed(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.speed = v);
        public static void BindSpeed(this UnityEngine.AI.NavMeshAgent obj, IProperty<System.Single> property)
            => BindSpeed(obj, Bindings2._scope, property);
        public static void BindSpeed(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.speed = func());
        public static void BindSpeed(this UnityEngine.AI.NavMeshAgent obj, Func<System.Single> func)
            => BindSpeed(obj, Bindings2._scope, func);
        public static void BindSpeedInterval(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.speed = func());
        public static void BindSpeedInterval(this UnityEngine.AI.NavMeshAgent obj, float seconds, Func<System.Single> func)
            => BindSpeedInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAngularSpeed(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.angularSpeed = v);
        public static void BindAngularSpeed(this UnityEngine.AI.NavMeshAgent obj, IProperty<System.Single> property)
            => BindAngularSpeed(obj, Bindings2._scope, property);
        public static void BindAngularSpeed(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.angularSpeed = func());
        public static void BindAngularSpeed(this UnityEngine.AI.NavMeshAgent obj, Func<System.Single> func)
            => BindAngularSpeed(obj, Bindings2._scope, func);
        public static void BindAngularSpeedInterval(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.angularSpeed = func());
        public static void BindAngularSpeedInterval(this UnityEngine.AI.NavMeshAgent obj, float seconds, Func<System.Single> func)
            => BindAngularSpeedInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAcceleration(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.acceleration = v);
        public static void BindAcceleration(this UnityEngine.AI.NavMeshAgent obj, IProperty<System.Single> property)
            => BindAcceleration(obj, Bindings2._scope, property);
        public static void BindAcceleration(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.acceleration = func());
        public static void BindAcceleration(this UnityEngine.AI.NavMeshAgent obj, Func<System.Single> func)
            => BindAcceleration(obj, Bindings2._scope, func);
        public static void BindAccelerationInterval(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.acceleration = func());
        public static void BindAccelerationInterval(this UnityEngine.AI.NavMeshAgent obj, float seconds, Func<System.Single> func)
            => BindAccelerationInterval(obj, Bindings2._scope, seconds, func);
        public static void BindStoppingDistance(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.stoppingDistance = v);
        public static void BindStoppingDistance(this UnityEngine.AI.NavMeshAgent obj, IProperty<System.Single> property)
            => BindStoppingDistance(obj, Bindings2._scope, property);
        public static void BindStoppingDistance(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.stoppingDistance = func());
        public static void BindStoppingDistance(this UnityEngine.AI.NavMeshAgent obj, Func<System.Single> func)
            => BindStoppingDistance(obj, Bindings2._scope, func);
        public static void BindStoppingDistanceInterval(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.stoppingDistance = func());
        public static void BindStoppingDistanceInterval(this UnityEngine.AI.NavMeshAgent obj, float seconds, Func<System.Single> func)
            => BindStoppingDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoBraking(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoBraking = v);
        public static void BindAutoBraking(this UnityEngine.AI.NavMeshAgent obj, IProperty<System.Boolean> property)
            => BindAutoBraking(obj, Bindings2._scope, property);
        public static void BindAutoBraking(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoBraking = func());
        public static void BindAutoBraking(this UnityEngine.AI.NavMeshAgent obj, Func<System.Boolean> func)
            => BindAutoBraking(obj, Bindings2._scope, func);
        public static void BindAutoBrakingInterval(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoBraking = func());
        public static void BindAutoBrakingInterval(this UnityEngine.AI.NavMeshAgent obj, float seconds, Func<System.Boolean> func)
            => BindAutoBrakingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRadius(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.radius = v);
        public static void BindRadius(this UnityEngine.AI.NavMeshAgent obj, IProperty<System.Single> property)
            => BindRadius(obj, Bindings2._scope, property);
        public static void BindRadius(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.radius = func());
        public static void BindRadius(this UnityEngine.AI.NavMeshAgent obj, Func<System.Single> func)
            => BindRadius(obj, Bindings2._scope, func);
        public static void BindRadiusInterval(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.radius = func());
        public static void BindRadiusInterval(this UnityEngine.AI.NavMeshAgent obj, float seconds, Func<System.Single> func)
            => BindRadiusInterval(obj, Bindings2._scope, seconds, func);
        public static void BindHeight(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.height = v);
        public static void BindHeight(this UnityEngine.AI.NavMeshAgent obj, IProperty<System.Single> property)
            => BindHeight(obj, Bindings2._scope, property);
        public static void BindHeight(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.height = func());
        public static void BindHeight(this UnityEngine.AI.NavMeshAgent obj, Func<System.Single> func)
            => BindHeight(obj, Bindings2._scope, func);
        public static void BindHeightInterval(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.height = func());
        public static void BindHeightInterval(this UnityEngine.AI.NavMeshAgent obj, float seconds, Func<System.Single> func)
            => BindHeightInterval(obj, Bindings2._scope, seconds, func);
        public static void BindObstacleAvoidanceType(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, IProperty<UnityEngine.AI.ObstacleAvoidanceType> property)
            => bindings.Bind(property, v => obj.obstacleAvoidanceType = v);
        public static void BindObstacleAvoidanceType(this UnityEngine.AI.NavMeshAgent obj, IProperty<UnityEngine.AI.ObstacleAvoidanceType> property)
            => BindObstacleAvoidanceType(obj, Bindings2._scope, property);
        public static void BindObstacleAvoidanceType(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, Func<UnityEngine.AI.ObstacleAvoidanceType> func)
            => bindings.BindUpdate(() => obj.obstacleAvoidanceType = func());
        public static void BindObstacleAvoidanceType(this UnityEngine.AI.NavMeshAgent obj, Func<UnityEngine.AI.ObstacleAvoidanceType> func)
            => BindObstacleAvoidanceType(obj, Bindings2._scope, func);
        public static void BindObstacleAvoidanceTypeInterval(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, float seconds, Func<UnityEngine.AI.ObstacleAvoidanceType> func)
            => bindings.BindInterval(seconds, () => obj.obstacleAvoidanceType = func());
        public static void BindObstacleAvoidanceTypeInterval(this UnityEngine.AI.NavMeshAgent obj, float seconds, Func<UnityEngine.AI.ObstacleAvoidanceType> func)
            => BindObstacleAvoidanceTypeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAvoidancePriority(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.avoidancePriority = v);
        public static void BindAvoidancePriority(this UnityEngine.AI.NavMeshAgent obj, IProperty<System.Int32> property)
            => BindAvoidancePriority(obj, Bindings2._scope, property);
        public static void BindAvoidancePriority(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.avoidancePriority = func());
        public static void BindAvoidancePriority(this UnityEngine.AI.NavMeshAgent obj, Func<System.Int32> func)
            => BindAvoidancePriority(obj, Bindings2._scope, func);
        public static void BindAvoidancePriorityInterval(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.avoidancePriority = func());
        public static void BindAvoidancePriorityInterval(this UnityEngine.AI.NavMeshAgent obj, float seconds, Func<System.Int32> func)
            => BindAvoidancePriorityInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoTraverseOffMeshLink(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoTraverseOffMeshLink = v);
        public static void BindAutoTraverseOffMeshLink(this UnityEngine.AI.NavMeshAgent obj, IProperty<System.Boolean> property)
            => BindAutoTraverseOffMeshLink(obj, Bindings2._scope, property);
        public static void BindAutoTraverseOffMeshLink(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoTraverseOffMeshLink = func());
        public static void BindAutoTraverseOffMeshLink(this UnityEngine.AI.NavMeshAgent obj, Func<System.Boolean> func)
            => BindAutoTraverseOffMeshLink(obj, Bindings2._scope, func);
        public static void BindAutoTraverseOffMeshLinkInterval(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoTraverseOffMeshLink = func());
        public static void BindAutoTraverseOffMeshLinkInterval(this UnityEngine.AI.NavMeshAgent obj, float seconds, Func<System.Boolean> func)
            => BindAutoTraverseOffMeshLinkInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoRepath(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoRepath = v);
        public static void BindAutoRepath(this UnityEngine.AI.NavMeshAgent obj, IProperty<System.Boolean> property)
            => BindAutoRepath(obj, Bindings2._scope, property);
        public static void BindAutoRepath(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoRepath = func());
        public static void BindAutoRepath(this UnityEngine.AI.NavMeshAgent obj, Func<System.Boolean> func)
            => BindAutoRepath(obj, Bindings2._scope, func);
        public static void BindAutoRepathInterval(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoRepath = func());
        public static void BindAutoRepathInterval(this UnityEngine.AI.NavMeshAgent obj, float seconds, Func<System.Boolean> func)
            => BindAutoRepathInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAreaMask(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.areaMask = v);
        public static void BindAreaMask(this UnityEngine.AI.NavMeshAgent obj, IProperty<System.Int32> property)
            => BindAreaMask(obj, Bindings2._scope, property);
        public static void BindAreaMask(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.areaMask = func());
        public static void BindAreaMask(this UnityEngine.AI.NavMeshAgent obj, Func<System.Int32> func)
            => BindAreaMask(obj, Bindings2._scope, func);
        public static void BindAreaMaskInterval(this UnityEngine.AI.NavMeshAgent obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.areaMask = func());
        public static void BindAreaMaskInterval(this UnityEngine.AI.NavMeshAgent obj, float seconds, Func<System.Int32> func)
            => BindAreaMaskInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_AI
        public static void BindShape(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, IProperty<UnityEngine.AI.NavMeshObstacleShape> property)
            => bindings.Bind(property, v => obj.shape = v);
        public static void BindShape(this UnityEngine.AI.NavMeshObstacle obj, IProperty<UnityEngine.AI.NavMeshObstacleShape> property)
            => BindShape(obj, Bindings2._scope, property);
        public static void BindShape(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, Func<UnityEngine.AI.NavMeshObstacleShape> func)
            => bindings.BindUpdate(() => obj.shape = func());
        public static void BindShape(this UnityEngine.AI.NavMeshObstacle obj, Func<UnityEngine.AI.NavMeshObstacleShape> func)
            => BindShape(obj, Bindings2._scope, func);
        public static void BindShapeInterval(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, float seconds, Func<UnityEngine.AI.NavMeshObstacleShape> func)
            => bindings.BindInterval(seconds, () => obj.shape = func());
        public static void BindShapeInterval(this UnityEngine.AI.NavMeshObstacle obj, float seconds, Func<UnityEngine.AI.NavMeshObstacleShape> func)
            => BindShapeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCenter(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.center = v);
        public static void BindCenter(this UnityEngine.AI.NavMeshObstacle obj, IProperty<UnityEngine.Vector3> property)
            => BindCenter(obj, Bindings2._scope, property);
        public static void BindCenter(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = func());
        public static void BindCenter(this UnityEngine.AI.NavMeshObstacle obj, Func<UnityEngine.Vector3> func)
            => BindCenter(obj, Bindings2._scope, func);
        public static void BindCenterInterval(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.center = func());
        public static void BindCenterInterval(this UnityEngine.AI.NavMeshObstacle obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindCenterInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCenterLerp(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.center = Vector3.Lerp(obj.center, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCenterLerp(this UnityEngine.AI.NavMeshObstacle obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCenterLerp(obj, Bindings2._scope, speed, property);
        public static void BindCenterLerp(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = Vector3.Lerp(obj.center, func(), speed * Time.smoothDeltaTime));
        public static void BindCenterLerp(this UnityEngine.AI.NavMeshObstacle obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCenterLerp(obj, Bindings2._scope, speed, func);
        public static void BindCenterTowards(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.center = Vector3.MoveTowards(obj.center, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCenterTowards(this UnityEngine.AI.NavMeshObstacle obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCenterTowards(obj, Bindings2._scope, speed, property);
        public static void BindCenterTowards(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = Vector3.MoveTowards(obj.center, func(), speed * Time.smoothDeltaTime));
        public static void BindCenterTowards(this UnityEngine.AI.NavMeshObstacle obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCenterTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateCenter(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.center = Vector3.Lerp(start, end, t));
        public static void AnimateCenter(this UnityEngine.AI.NavMeshObstacle obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, start, end, curve);
        public static void AnimateCenter(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, obj.center, end, curve);
        public static void AnimateCenter(this UnityEngine.AI.NavMeshObstacle obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, end, curve);
        public static void BindSize(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.size = v);
        public static void BindSize(this UnityEngine.AI.NavMeshObstacle obj, IProperty<UnityEngine.Vector3> property)
            => BindSize(obj, Bindings2._scope, property);
        public static void BindSize(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.size = func());
        public static void BindSize(this UnityEngine.AI.NavMeshObstacle obj, Func<UnityEngine.Vector3> func)
            => BindSize(obj, Bindings2._scope, func);
        public static void BindSizeInterval(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.size = func());
        public static void BindSizeInterval(this UnityEngine.AI.NavMeshObstacle obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindSizeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSizeLerp(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.size = Vector3.Lerp(obj.size, property.Value, speed * Time.smoothDeltaTime));
        public static void BindSizeLerp(this UnityEngine.AI.NavMeshObstacle obj, float speed, Property<UnityEngine.Vector3> property)
            => BindSizeLerp(obj, Bindings2._scope, speed, property);
        public static void BindSizeLerp(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.size = Vector3.Lerp(obj.size, func(), speed * Time.smoothDeltaTime));
        public static void BindSizeLerp(this UnityEngine.AI.NavMeshObstacle obj, float speed, Func<UnityEngine.Vector3> func)
            => BindSizeLerp(obj, Bindings2._scope, speed, func);
        public static void BindSizeTowards(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.size = Vector3.MoveTowards(obj.size, property.Value, speed * Time.smoothDeltaTime));
        public static void BindSizeTowards(this UnityEngine.AI.NavMeshObstacle obj, float speed, Property<UnityEngine.Vector3> property)
            => BindSizeTowards(obj, Bindings2._scope, speed, property);
        public static void BindSizeTowards(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.size = Vector3.MoveTowards(obj.size, func(), speed * Time.smoothDeltaTime));
        public static void BindSizeTowards(this UnityEngine.AI.NavMeshObstacle obj, float speed, Func<UnityEngine.Vector3> func)
            => BindSizeTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateSize(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.size = Vector3.Lerp(start, end, t));
        public static void AnimateSize(this UnityEngine.AI.NavMeshObstacle obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateSize(obj, Bindings2._scope, start, end, curve);
        public static void AnimateSize(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateSize(obj, Bindings2._scope, obj.size, end, curve);
        public static void AnimateSize(this UnityEngine.AI.NavMeshObstacle obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateSize(obj, Bindings2._scope, end, curve);
        public static void BindCarving(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.carving = v);
        public static void BindCarving(this UnityEngine.AI.NavMeshObstacle obj, IProperty<System.Boolean> property)
            => BindCarving(obj, Bindings2._scope, property);
        public static void BindCarving(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.carving = func());
        public static void BindCarving(this UnityEngine.AI.NavMeshObstacle obj, Func<System.Boolean> func)
            => BindCarving(obj, Bindings2._scope, func);
        public static void BindCarvingInterval(this UnityEngine.AI.NavMeshObstacle obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.carving = func());
        public static void BindCarvingInterval(this UnityEngine.AI.NavMeshObstacle obj, float seconds, Func<System.Boolean> func)
            => BindCarvingInterval(obj, Bindings2._scope, seconds, func);
        #endif


        public static void BindSize(this OcclusionArea obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.size = v);
        public static void BindSize(this OcclusionArea obj, IProperty<UnityEngine.Vector3> property)
            => BindSize(obj, Bindings2._scope, property);
        public static void BindSize(this OcclusionArea obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.size = func());
        public static void BindSize(this OcclusionArea obj, Func<UnityEngine.Vector3> func)
            => BindSize(obj, Bindings2._scope, func);
        public static void BindSizeInterval(this OcclusionArea obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.size = func());
        public static void BindSizeInterval(this OcclusionArea obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindSizeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSizeLerp(this OcclusionArea obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.size = Vector3.Lerp(obj.size, property.Value, speed * Time.smoothDeltaTime));
        public static void BindSizeLerp(this OcclusionArea obj, float speed, Property<UnityEngine.Vector3> property)
            => BindSizeLerp(obj, Bindings2._scope, speed, property);
        public static void BindSizeLerp(this OcclusionArea obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.size = Vector3.Lerp(obj.size, func(), speed * Time.smoothDeltaTime));
        public static void BindSizeLerp(this OcclusionArea obj, float speed, Func<UnityEngine.Vector3> func)
            => BindSizeLerp(obj, Bindings2._scope, speed, func);
        public static void BindSizeTowards(this OcclusionArea obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.size = Vector3.MoveTowards(obj.size, property.Value, speed * Time.smoothDeltaTime));
        public static void BindSizeTowards(this OcclusionArea obj, float speed, Property<UnityEngine.Vector3> property)
            => BindSizeTowards(obj, Bindings2._scope, speed, property);
        public static void BindSizeTowards(this OcclusionArea obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.size = Vector3.MoveTowards(obj.size, func(), speed * Time.smoothDeltaTime));
        public static void BindSizeTowards(this OcclusionArea obj, float speed, Func<UnityEngine.Vector3> func)
            => BindSizeTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateSize(this OcclusionArea obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.size = Vector3.Lerp(start, end, t));
        public static void AnimateSize(this OcclusionArea obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateSize(obj, Bindings2._scope, start, end, curve);
        public static void AnimateSize(this OcclusionArea obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateSize(obj, Bindings2._scope, obj.size, end, curve);
        public static void AnimateSize(this OcclusionArea obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateSize(obj, Bindings2._scope, end, curve);
        public static void BindCenter(this OcclusionArea obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.center = v);
        public static void BindCenter(this OcclusionArea obj, IProperty<UnityEngine.Vector3> property)
            => BindCenter(obj, Bindings2._scope, property);
        public static void BindCenter(this OcclusionArea obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = func());
        public static void BindCenter(this OcclusionArea obj, Func<UnityEngine.Vector3> func)
            => BindCenter(obj, Bindings2._scope, func);
        public static void BindCenterInterval(this OcclusionArea obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.center = func());
        public static void BindCenterInterval(this OcclusionArea obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindCenterInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCenterLerp(this OcclusionArea obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.center = Vector3.Lerp(obj.center, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCenterLerp(this OcclusionArea obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCenterLerp(obj, Bindings2._scope, speed, property);
        public static void BindCenterLerp(this OcclusionArea obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = Vector3.Lerp(obj.center, func(), speed * Time.smoothDeltaTime));
        public static void BindCenterLerp(this OcclusionArea obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCenterLerp(obj, Bindings2._scope, speed, func);
        public static void BindCenterTowards(this OcclusionArea obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.center = Vector3.MoveTowards(obj.center, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCenterTowards(this OcclusionArea obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCenterTowards(obj, Bindings2._scope, speed, property);
        public static void BindCenterTowards(this OcclusionArea obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = Vector3.MoveTowards(obj.center, func(), speed * Time.smoothDeltaTime));
        public static void BindCenterTowards(this OcclusionArea obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCenterTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateCenter(this OcclusionArea obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.center = Vector3.Lerp(start, end, t));
        public static void AnimateCenter(this OcclusionArea obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, start, end, curve);
        public static void AnimateCenter(this OcclusionArea obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, obj.center, end, curve);
        public static void AnimateCenter(this OcclusionArea obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, end, curve);


        public static void BindOpen(this OcclusionPortal obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.open = v);
        public static void BindOpen(this OcclusionPortal obj, IProperty<System.Boolean> property)
            => BindOpen(obj, Bindings2._scope, property);
        public static void BindOpen(this OcclusionPortal obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.open = func());
        public static void BindOpen(this OcclusionPortal obj, Func<System.Boolean> func)
            => BindOpen(obj, Bindings2._scope, func);
        public static void BindOpenInterval(this OcclusionPortal obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.open = func());
        public static void BindOpenInterval(this OcclusionPortal obj, float seconds, Func<System.Boolean> func)
            => BindOpenInterval(obj, Bindings2._scope, seconds, func);


        #if UNITY_AI&&!UNITY_2023_2_OR_NEWER
        public static void BindStartTransform(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, IProperty<UnityEngine.Transform> property)
            => bindings.Bind(property, v => obj.startTransform = v);
        public static void BindStartTransform(this UnityEngine.AI.OffMeshLink obj, IProperty<UnityEngine.Transform> property)
            => BindStartTransform(obj, Bindings2._scope, property);
        public static void BindStartTransform(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, Func<UnityEngine.Transform> func)
            => bindings.BindUpdate(() => obj.startTransform = func());
        public static void BindStartTransform(this UnityEngine.AI.OffMeshLink obj, Func<UnityEngine.Transform> func)
            => BindStartTransform(obj, Bindings2._scope, func);
        public static void BindStartTransformInterval(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, float seconds, Func<UnityEngine.Transform> func)
            => bindings.BindInterval(seconds, () => obj.startTransform = func());
        public static void BindStartTransformInterval(this UnityEngine.AI.OffMeshLink obj, float seconds, Func<UnityEngine.Transform> func)
            => BindStartTransformInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEndTransform(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, IProperty<UnityEngine.Transform> property)
            => bindings.Bind(property, v => obj.endTransform = v);
        public static void BindEndTransform(this UnityEngine.AI.OffMeshLink obj, IProperty<UnityEngine.Transform> property)
            => BindEndTransform(obj, Bindings2._scope, property);
        public static void BindEndTransform(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, Func<UnityEngine.Transform> func)
            => bindings.BindUpdate(() => obj.endTransform = func());
        public static void BindEndTransform(this UnityEngine.AI.OffMeshLink obj, Func<UnityEngine.Transform> func)
            => BindEndTransform(obj, Bindings2._scope, func);
        public static void BindEndTransformInterval(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, float seconds, Func<UnityEngine.Transform> func)
            => bindings.BindInterval(seconds, () => obj.endTransform = func());
        public static void BindEndTransformInterval(this UnityEngine.AI.OffMeshLink obj, float seconds, Func<UnityEngine.Transform> func)
            => BindEndTransformInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCostOverride(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.costOverride = v);
        public static void BindCostOverride(this UnityEngine.AI.OffMeshLink obj, IProperty<System.Single> property)
            => BindCostOverride(obj, Bindings2._scope, property);
        public static void BindCostOverride(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.costOverride = func());
        public static void BindCostOverride(this UnityEngine.AI.OffMeshLink obj, Func<System.Single> func)
            => BindCostOverride(obj, Bindings2._scope, func);
        public static void BindCostOverrideInterval(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.costOverride = func());
        public static void BindCostOverrideInterval(this UnityEngine.AI.OffMeshLink obj, float seconds, Func<System.Single> func)
            => BindCostOverrideInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBiDirectional(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.biDirectional = v);
        public static void BindBiDirectional(this UnityEngine.AI.OffMeshLink obj, IProperty<System.Boolean> property)
            => BindBiDirectional(obj, Bindings2._scope, property);
        public static void BindBiDirectional(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.biDirectional = func());
        public static void BindBiDirectional(this UnityEngine.AI.OffMeshLink obj, Func<System.Boolean> func)
            => BindBiDirectional(obj, Bindings2._scope, func);
        public static void BindBiDirectionalInterval(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.biDirectional = func());
        public static void BindBiDirectionalInterval(this UnityEngine.AI.OffMeshLink obj, float seconds, Func<System.Boolean> func)
            => BindBiDirectionalInterval(obj, Bindings2._scope, seconds, func);
        public static void BindActivated(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.activated = v);
        public static void BindActivated(this UnityEngine.AI.OffMeshLink obj, IProperty<System.Boolean> property)
            => BindActivated(obj, Bindings2._scope, property);
        public static void BindActivated(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.activated = func());
        public static void BindActivated(this UnityEngine.AI.OffMeshLink obj, Func<System.Boolean> func)
            => BindActivated(obj, Bindings2._scope, func);
        public static void BindActivatedInterval(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.activated = func());
        public static void BindActivatedInterval(this UnityEngine.AI.OffMeshLink obj, float seconds, Func<System.Boolean> func)
            => BindActivatedInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoUpdatePositions(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoUpdatePositions = v);
        public static void BindAutoUpdatePositions(this UnityEngine.AI.OffMeshLink obj, IProperty<System.Boolean> property)
            => BindAutoUpdatePositions(obj, Bindings2._scope, property);
        public static void BindAutoUpdatePositions(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoUpdatePositions = func());
        public static void BindAutoUpdatePositions(this UnityEngine.AI.OffMeshLink obj, Func<System.Boolean> func)
            => BindAutoUpdatePositions(obj, Bindings2._scope, func);
        public static void BindAutoUpdatePositionsInterval(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoUpdatePositions = func());
        public static void BindAutoUpdatePositionsInterval(this UnityEngine.AI.OffMeshLink obj, float seconds, Func<System.Boolean> func)
            => BindAutoUpdatePositionsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindArea(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.area = v);
        public static void BindArea(this UnityEngine.AI.OffMeshLink obj, IProperty<System.Int32> property)
            => BindArea(obj, Bindings2._scope, property);
        public static void BindArea(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.area = func());
        public static void BindArea(this UnityEngine.AI.OffMeshLink obj, Func<System.Int32> func)
            => BindArea(obj, Bindings2._scope, func);
        public static void BindAreaInterval(this UnityEngine.AI.OffMeshLink obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.area = func());
        public static void BindAreaInterval(this UnityEngine.AI.OffMeshLink obj, float seconds, Func<System.Int32> func)
            => BindAreaInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindEffectColor(this UnityEngine.UI.Outline obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.effectColor = v);
        public static void BindEffectColor(this UnityEngine.UI.Outline obj, IProperty<UnityEngine.Color> property)
            => BindEffectColor(obj, Bindings2._scope, property);
        public static void BindEffectColor(this UnityEngine.UI.Outline obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.effectColor = func());
        public static void BindEffectColor(this UnityEngine.UI.Outline obj, Func<UnityEngine.Color> func)
            => BindEffectColor(obj, Bindings2._scope, func);
        public static void BindEffectColorInterval(this UnityEngine.UI.Outline obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.effectColor = func());
        public static void BindEffectColorInterval(this UnityEngine.UI.Outline obj, float seconds, Func<UnityEngine.Color> func)
            => BindEffectColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEffectDistance(this UnityEngine.UI.Outline obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.effectDistance = v);
        public static void BindEffectDistance(this UnityEngine.UI.Outline obj, IProperty<UnityEngine.Vector2> property)
            => BindEffectDistance(obj, Bindings2._scope, property);
        public static void BindEffectDistance(this UnityEngine.UI.Outline obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.effectDistance = func());
        public static void BindEffectDistance(this UnityEngine.UI.Outline obj, Func<UnityEngine.Vector2> func)
            => BindEffectDistance(obj, Bindings2._scope, func);
        public static void BindEffectDistanceInterval(this UnityEngine.UI.Outline obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.effectDistance = func());
        public static void BindEffectDistanceInterval(this UnityEngine.UI.Outline obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindEffectDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseGraphicAlpha(this UnityEngine.UI.Outline obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useGraphicAlpha = v);
        public static void BindUseGraphicAlpha(this UnityEngine.UI.Outline obj, IProperty<System.Boolean> property)
            => BindUseGraphicAlpha(obj, Bindings2._scope, property);
        public static void BindUseGraphicAlpha(this UnityEngine.UI.Outline obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useGraphicAlpha = func());
        public static void BindUseGraphicAlpha(this UnityEngine.UI.Outline obj, Func<System.Boolean> func)
            => BindUseGraphicAlpha(obj, Bindings2._scope, func);
        public static void BindUseGraphicAlphaInterval(this UnityEngine.UI.Outline obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useGraphicAlpha = func());
        public static void BindUseGraphicAlphaInterval(this UnityEngine.UI.Outline obj, float seconds, Func<System.Boolean> func)
            => BindUseGraphicAlphaInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_ANIMATION
        public static void BindConstraintActive(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.constraintActive = v);
        public static void BindConstraintActive(this UnityEngine.Animations.ParentConstraint obj, IProperty<System.Boolean> property)
            => BindConstraintActive(obj, Bindings2._scope, property);
        public static void BindConstraintActive(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.constraintActive = func());
        public static void BindConstraintActive(this UnityEngine.Animations.ParentConstraint obj, Func<System.Boolean> func)
            => BindConstraintActive(obj, Bindings2._scope, func);
        public static void BindConstraintActiveInterval(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.constraintActive = func());
        public static void BindConstraintActiveInterval(this UnityEngine.Animations.ParentConstraint obj, float seconds, Func<System.Boolean> func)
            => BindConstraintActiveInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWeight(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.weight = v);
        public static void BindWeight(this UnityEngine.Animations.ParentConstraint obj, IProperty<System.Single> property)
            => BindWeight(obj, Bindings2._scope, property);
        public static void BindWeight(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.weight = func());
        public static void BindWeight(this UnityEngine.Animations.ParentConstraint obj, Func<System.Single> func)
            => BindWeight(obj, Bindings2._scope, func);
        public static void BindWeightInterval(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.weight = func());
        public static void BindWeightInterval(this UnityEngine.Animations.ParentConstraint obj, float seconds, Func<System.Single> func)
            => BindWeightInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLocked(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.locked = v);
        public static void BindLocked(this UnityEngine.Animations.ParentConstraint obj, IProperty<System.Boolean> property)
            => BindLocked(obj, Bindings2._scope, property);
        public static void BindLocked(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.locked = func());
        public static void BindLocked(this UnityEngine.Animations.ParentConstraint obj, Func<System.Boolean> func)
            => BindLocked(obj, Bindings2._scope, func);
        public static void BindLockedInterval(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.locked = func());
        public static void BindLockedInterval(this UnityEngine.Animations.ParentConstraint obj, float seconds, Func<System.Boolean> func)
            => BindLockedInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTranslationAtRest(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.translationAtRest = v);
        public static void BindTranslationAtRest(this UnityEngine.Animations.ParentConstraint obj, IProperty<UnityEngine.Vector3> property)
            => BindTranslationAtRest(obj, Bindings2._scope, property);
        public static void BindTranslationAtRest(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.translationAtRest = func());
        public static void BindTranslationAtRest(this UnityEngine.Animations.ParentConstraint obj, Func<UnityEngine.Vector3> func)
            => BindTranslationAtRest(obj, Bindings2._scope, func);
        public static void BindTranslationAtRestInterval(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.translationAtRest = func());
        public static void BindTranslationAtRestInterval(this UnityEngine.Animations.ParentConstraint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindTranslationAtRestInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTranslationAtRestLerp(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.translationAtRest = Vector3.Lerp(obj.translationAtRest, property.Value, speed * Time.smoothDeltaTime));
        public static void BindTranslationAtRestLerp(this UnityEngine.Animations.ParentConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindTranslationAtRestLerp(obj, Bindings2._scope, speed, property);
        public static void BindTranslationAtRestLerp(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.translationAtRest = Vector3.Lerp(obj.translationAtRest, func(), speed * Time.smoothDeltaTime));
        public static void BindTranslationAtRestLerp(this UnityEngine.Animations.ParentConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindTranslationAtRestLerp(obj, Bindings2._scope, speed, func);
        public static void BindTranslationAtRestTowards(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.translationAtRest = Vector3.MoveTowards(obj.translationAtRest, property.Value, speed * Time.smoothDeltaTime));
        public static void BindTranslationAtRestTowards(this UnityEngine.Animations.ParentConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindTranslationAtRestTowards(obj, Bindings2._scope, speed, property);
        public static void BindTranslationAtRestTowards(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.translationAtRest = Vector3.MoveTowards(obj.translationAtRest, func(), speed * Time.smoothDeltaTime));
        public static void BindTranslationAtRestTowards(this UnityEngine.Animations.ParentConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindTranslationAtRestTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateTranslationAtRest(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.translationAtRest = Vector3.Lerp(start, end, t));
        public static void AnimateTranslationAtRest(this UnityEngine.Animations.ParentConstraint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTranslationAtRest(obj, Bindings2._scope, start, end, curve);
        public static void AnimateTranslationAtRest(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTranslationAtRest(obj, Bindings2._scope, obj.translationAtRest, end, curve);
        public static void AnimateTranslationAtRest(this UnityEngine.Animations.ParentConstraint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTranslationAtRest(obj, Bindings2._scope, end, curve);
        public static void BindRotationAtRest(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.rotationAtRest = v);
        public static void BindRotationAtRest(this UnityEngine.Animations.ParentConstraint obj, IProperty<UnityEngine.Vector3> property)
            => BindRotationAtRest(obj, Bindings2._scope, property);
        public static void BindRotationAtRest(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationAtRest = func());
        public static void BindRotationAtRest(this UnityEngine.Animations.ParentConstraint obj, Func<UnityEngine.Vector3> func)
            => BindRotationAtRest(obj, Bindings2._scope, func);
        public static void BindRotationAtRestInterval(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.rotationAtRest = func());
        public static void BindRotationAtRestInterval(this UnityEngine.Animations.ParentConstraint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindRotationAtRestInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRotationAtRestLerp(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.rotationAtRest = Vector3.Lerp(obj.rotationAtRest, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRotationAtRestLerp(this UnityEngine.Animations.ParentConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRotationAtRestLerp(obj, Bindings2._scope, speed, property);
        public static void BindRotationAtRestLerp(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationAtRest = Vector3.Lerp(obj.rotationAtRest, func(), speed * Time.smoothDeltaTime));
        public static void BindRotationAtRestLerp(this UnityEngine.Animations.ParentConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRotationAtRestLerp(obj, Bindings2._scope, speed, func);
        public static void BindRotationAtRestTowards(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.rotationAtRest = Vector3.MoveTowards(obj.rotationAtRest, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRotationAtRestTowards(this UnityEngine.Animations.ParentConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRotationAtRestTowards(obj, Bindings2._scope, speed, property);
        public static void BindRotationAtRestTowards(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationAtRest = Vector3.MoveTowards(obj.rotationAtRest, func(), speed * Time.smoothDeltaTime));
        public static void BindRotationAtRestTowards(this UnityEngine.Animations.ParentConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRotationAtRestTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateRotationAtRest(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.rotationAtRest = Vector3.Lerp(start, end, t));
        public static void AnimateRotationAtRest(this UnityEngine.Animations.ParentConstraint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationAtRest(obj, Bindings2._scope, start, end, curve);
        public static void AnimateRotationAtRest(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationAtRest(obj, Bindings2._scope, obj.rotationAtRest, end, curve);
        public static void AnimateRotationAtRest(this UnityEngine.Animations.ParentConstraint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationAtRest(obj, Bindings2._scope, end, curve);
        public static void BindTranslationOffsets(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3[]> property)
            => bindings.Bind(property, v => obj.translationOffsets = v);
        public static void BindTranslationOffsets(this UnityEngine.Animations.ParentConstraint obj, IProperty<UnityEngine.Vector3[]> property)
            => BindTranslationOffsets(obj, Bindings2._scope, property);
        public static void BindTranslationOffsets(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, Func<UnityEngine.Vector3[]> func)
            => bindings.BindUpdate(() => obj.translationOffsets = func());
        public static void BindTranslationOffsets(this UnityEngine.Animations.ParentConstraint obj, Func<UnityEngine.Vector3[]> func)
            => BindTranslationOffsets(obj, Bindings2._scope, func);
        public static void BindTranslationOffsetsInterval(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3[]> func)
            => bindings.BindInterval(seconds, () => obj.translationOffsets = func());
        public static void BindTranslationOffsetsInterval(this UnityEngine.Animations.ParentConstraint obj, float seconds, Func<UnityEngine.Vector3[]> func)
            => BindTranslationOffsetsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRotationOffsets(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3[]> property)
            => bindings.Bind(property, v => obj.rotationOffsets = v);
        public static void BindRotationOffsets(this UnityEngine.Animations.ParentConstraint obj, IProperty<UnityEngine.Vector3[]> property)
            => BindRotationOffsets(obj, Bindings2._scope, property);
        public static void BindRotationOffsets(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, Func<UnityEngine.Vector3[]> func)
            => bindings.BindUpdate(() => obj.rotationOffsets = func());
        public static void BindRotationOffsets(this UnityEngine.Animations.ParentConstraint obj, Func<UnityEngine.Vector3[]> func)
            => BindRotationOffsets(obj, Bindings2._scope, func);
        public static void BindRotationOffsetsInterval(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3[]> func)
            => bindings.BindInterval(seconds, () => obj.rotationOffsets = func());
        public static void BindRotationOffsetsInterval(this UnityEngine.Animations.ParentConstraint obj, float seconds, Func<UnityEngine.Vector3[]> func)
            => BindRotationOffsetsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTranslationAxis(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Animations.Axis> property)
            => bindings.Bind(property, v => obj.translationAxis = v);
        public static void BindTranslationAxis(this UnityEngine.Animations.ParentConstraint obj, IProperty<UnityEngine.Animations.Axis> property)
            => BindTranslationAxis(obj, Bindings2._scope, property);
        public static void BindTranslationAxis(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, Func<UnityEngine.Animations.Axis> func)
            => bindings.BindUpdate(() => obj.translationAxis = func());
        public static void BindTranslationAxis(this UnityEngine.Animations.ParentConstraint obj, Func<UnityEngine.Animations.Axis> func)
            => BindTranslationAxis(obj, Bindings2._scope, func);
        public static void BindTranslationAxisInterval(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Animations.Axis> func)
            => bindings.BindInterval(seconds, () => obj.translationAxis = func());
        public static void BindTranslationAxisInterval(this UnityEngine.Animations.ParentConstraint obj, float seconds, Func<UnityEngine.Animations.Axis> func)
            => BindTranslationAxisInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRotationAxis(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Animations.Axis> property)
            => bindings.Bind(property, v => obj.rotationAxis = v);
        public static void BindRotationAxis(this UnityEngine.Animations.ParentConstraint obj, IProperty<UnityEngine.Animations.Axis> property)
            => BindRotationAxis(obj, Bindings2._scope, property);
        public static void BindRotationAxis(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, Func<UnityEngine.Animations.Axis> func)
            => bindings.BindUpdate(() => obj.rotationAxis = func());
        public static void BindRotationAxis(this UnityEngine.Animations.ParentConstraint obj, Func<UnityEngine.Animations.Axis> func)
            => BindRotationAxis(obj, Bindings2._scope, func);
        public static void BindRotationAxisInterval(this UnityEngine.Animations.ParentConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Animations.Axis> func)
            => bindings.BindInterval(seconds, () => obj.rotationAxis = func());
        public static void BindRotationAxisInterval(this UnityEngine.Animations.ParentConstraint obj, float seconds, Func<UnityEngine.Animations.Axis> func)
            => BindRotationAxisInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PARTICLE_SYSTEM
        public static void BindShape(this ParticleSystemForceField obj, Bindings2 bindings, IProperty<UnityEngine.ParticleSystemForceFieldShape> property)
            => bindings.Bind(property, v => obj.shape = v);
        public static void BindShape(this ParticleSystemForceField obj, IProperty<UnityEngine.ParticleSystemForceFieldShape> property)
            => BindShape(obj, Bindings2._scope, property);
        public static void BindShape(this ParticleSystemForceField obj, Bindings2 bindings, Func<UnityEngine.ParticleSystemForceFieldShape> func)
            => bindings.BindUpdate(() => obj.shape = func());
        public static void BindShape(this ParticleSystemForceField obj, Func<UnityEngine.ParticleSystemForceFieldShape> func)
            => BindShape(obj, Bindings2._scope, func);
        public static void BindShapeInterval(this ParticleSystemForceField obj, Bindings2 bindings, float seconds, Func<UnityEngine.ParticleSystemForceFieldShape> func)
            => bindings.BindInterval(seconds, () => obj.shape = func());
        public static void BindShapeInterval(this ParticleSystemForceField obj, float seconds, Func<UnityEngine.ParticleSystemForceFieldShape> func)
            => BindShapeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindStartRange(this ParticleSystemForceField obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.startRange = v);
        public static void BindStartRange(this ParticleSystemForceField obj, IProperty<System.Single> property)
            => BindStartRange(obj, Bindings2._scope, property);
        public static void BindStartRange(this ParticleSystemForceField obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.startRange = func());
        public static void BindStartRange(this ParticleSystemForceField obj, Func<System.Single> func)
            => BindStartRange(obj, Bindings2._scope, func);
        public static void BindStartRangeInterval(this ParticleSystemForceField obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.startRange = func());
        public static void BindStartRangeInterval(this ParticleSystemForceField obj, float seconds, Func<System.Single> func)
            => BindStartRangeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEndRange(this ParticleSystemForceField obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.endRange = v);
        public static void BindEndRange(this ParticleSystemForceField obj, IProperty<System.Single> property)
            => BindEndRange(obj, Bindings2._scope, property);
        public static void BindEndRange(this ParticleSystemForceField obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.endRange = func());
        public static void BindEndRange(this ParticleSystemForceField obj, Func<System.Single> func)
            => BindEndRange(obj, Bindings2._scope, func);
        public static void BindEndRangeInterval(this ParticleSystemForceField obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.endRange = func());
        public static void BindEndRangeInterval(this ParticleSystemForceField obj, float seconds, Func<System.Single> func)
            => BindEndRangeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDirectionX(this ParticleSystemForceField obj, Bindings2 bindings, IProperty<UnityEngine.ParticleSystem.MinMaxCurve> property)
            => bindings.Bind(property, v => obj.directionX = v);
        public static void BindDirectionX(this ParticleSystemForceField obj, IProperty<UnityEngine.ParticleSystem.MinMaxCurve> property)
            => BindDirectionX(obj, Bindings2._scope, property);
        public static void BindDirectionX(this ParticleSystemForceField obj, Bindings2 bindings, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => bindings.BindUpdate(() => obj.directionX = func());
        public static void BindDirectionX(this ParticleSystemForceField obj, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => BindDirectionX(obj, Bindings2._scope, func);
        public static void BindDirectionXInterval(this ParticleSystemForceField obj, Bindings2 bindings, float seconds, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => bindings.BindInterval(seconds, () => obj.directionX = func());
        public static void BindDirectionXInterval(this ParticleSystemForceField obj, float seconds, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => BindDirectionXInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDirectionY(this ParticleSystemForceField obj, Bindings2 bindings, IProperty<UnityEngine.ParticleSystem.MinMaxCurve> property)
            => bindings.Bind(property, v => obj.directionY = v);
        public static void BindDirectionY(this ParticleSystemForceField obj, IProperty<UnityEngine.ParticleSystem.MinMaxCurve> property)
            => BindDirectionY(obj, Bindings2._scope, property);
        public static void BindDirectionY(this ParticleSystemForceField obj, Bindings2 bindings, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => bindings.BindUpdate(() => obj.directionY = func());
        public static void BindDirectionY(this ParticleSystemForceField obj, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => BindDirectionY(obj, Bindings2._scope, func);
        public static void BindDirectionYInterval(this ParticleSystemForceField obj, Bindings2 bindings, float seconds, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => bindings.BindInterval(seconds, () => obj.directionY = func());
        public static void BindDirectionYInterval(this ParticleSystemForceField obj, float seconds, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => BindDirectionYInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDirectionZ(this ParticleSystemForceField obj, Bindings2 bindings, IProperty<UnityEngine.ParticleSystem.MinMaxCurve> property)
            => bindings.Bind(property, v => obj.directionZ = v);
        public static void BindDirectionZ(this ParticleSystemForceField obj, IProperty<UnityEngine.ParticleSystem.MinMaxCurve> property)
            => BindDirectionZ(obj, Bindings2._scope, property);
        public static void BindDirectionZ(this ParticleSystemForceField obj, Bindings2 bindings, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => bindings.BindUpdate(() => obj.directionZ = func());
        public static void BindDirectionZ(this ParticleSystemForceField obj, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => BindDirectionZ(obj, Bindings2._scope, func);
        public static void BindDirectionZInterval(this ParticleSystemForceField obj, Bindings2 bindings, float seconds, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => bindings.BindInterval(seconds, () => obj.directionZ = func());
        public static void BindDirectionZInterval(this ParticleSystemForceField obj, float seconds, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => BindDirectionZInterval(obj, Bindings2._scope, seconds, func);
        public static void BindGravity(this ParticleSystemForceField obj, Bindings2 bindings, IProperty<UnityEngine.ParticleSystem.MinMaxCurve> property)
            => bindings.Bind(property, v => obj.gravity = v);
        public static void BindGravity(this ParticleSystemForceField obj, IProperty<UnityEngine.ParticleSystem.MinMaxCurve> property)
            => BindGravity(obj, Bindings2._scope, property);
        public static void BindGravity(this ParticleSystemForceField obj, Bindings2 bindings, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => bindings.BindUpdate(() => obj.gravity = func());
        public static void BindGravity(this ParticleSystemForceField obj, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => BindGravity(obj, Bindings2._scope, func);
        public static void BindGravityInterval(this ParticleSystemForceField obj, Bindings2 bindings, float seconds, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => bindings.BindInterval(seconds, () => obj.gravity = func());
        public static void BindGravityInterval(this ParticleSystemForceField obj, float seconds, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => BindGravityInterval(obj, Bindings2._scope, seconds, func);
        public static void BindGravityFocus(this ParticleSystemForceField obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.gravityFocus = v);
        public static void BindGravityFocus(this ParticleSystemForceField obj, IProperty<System.Single> property)
            => BindGravityFocus(obj, Bindings2._scope, property);
        public static void BindGravityFocus(this ParticleSystemForceField obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.gravityFocus = func());
        public static void BindGravityFocus(this ParticleSystemForceField obj, Func<System.Single> func)
            => BindGravityFocus(obj, Bindings2._scope, func);
        public static void BindGravityFocusInterval(this ParticleSystemForceField obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.gravityFocus = func());
        public static void BindGravityFocusInterval(this ParticleSystemForceField obj, float seconds, Func<System.Single> func)
            => BindGravityFocusInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRotationSpeed(this ParticleSystemForceField obj, Bindings2 bindings, IProperty<UnityEngine.ParticleSystem.MinMaxCurve> property)
            => bindings.Bind(property, v => obj.rotationSpeed = v);
        public static void BindRotationSpeed(this ParticleSystemForceField obj, IProperty<UnityEngine.ParticleSystem.MinMaxCurve> property)
            => BindRotationSpeed(obj, Bindings2._scope, property);
        public static void BindRotationSpeed(this ParticleSystemForceField obj, Bindings2 bindings, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => bindings.BindUpdate(() => obj.rotationSpeed = func());
        public static void BindRotationSpeed(this ParticleSystemForceField obj, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => BindRotationSpeed(obj, Bindings2._scope, func);
        public static void BindRotationSpeedInterval(this ParticleSystemForceField obj, Bindings2 bindings, float seconds, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => bindings.BindInterval(seconds, () => obj.rotationSpeed = func());
        public static void BindRotationSpeedInterval(this ParticleSystemForceField obj, float seconds, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => BindRotationSpeedInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRotationAttraction(this ParticleSystemForceField obj, Bindings2 bindings, IProperty<UnityEngine.ParticleSystem.MinMaxCurve> property)
            => bindings.Bind(property, v => obj.rotationAttraction = v);
        public static void BindRotationAttraction(this ParticleSystemForceField obj, IProperty<UnityEngine.ParticleSystem.MinMaxCurve> property)
            => BindRotationAttraction(obj, Bindings2._scope, property);
        public static void BindRotationAttraction(this ParticleSystemForceField obj, Bindings2 bindings, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => bindings.BindUpdate(() => obj.rotationAttraction = func());
        public static void BindRotationAttraction(this ParticleSystemForceField obj, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => BindRotationAttraction(obj, Bindings2._scope, func);
        public static void BindRotationAttractionInterval(this ParticleSystemForceField obj, Bindings2 bindings, float seconds, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => bindings.BindInterval(seconds, () => obj.rotationAttraction = func());
        public static void BindRotationAttractionInterval(this ParticleSystemForceField obj, float seconds, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => BindRotationAttractionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRotationRandomness(this ParticleSystemForceField obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.rotationRandomness = v);
        public static void BindRotationRandomness(this ParticleSystemForceField obj, IProperty<UnityEngine.Vector2> property)
            => BindRotationRandomness(obj, Bindings2._scope, property);
        public static void BindRotationRandomness(this ParticleSystemForceField obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.rotationRandomness = func());
        public static void BindRotationRandomness(this ParticleSystemForceField obj, Func<UnityEngine.Vector2> func)
            => BindRotationRandomness(obj, Bindings2._scope, func);
        public static void BindRotationRandomnessInterval(this ParticleSystemForceField obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.rotationRandomness = func());
        public static void BindRotationRandomnessInterval(this ParticleSystemForceField obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindRotationRandomnessInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDrag(this ParticleSystemForceField obj, Bindings2 bindings, IProperty<UnityEngine.ParticleSystem.MinMaxCurve> property)
            => bindings.Bind(property, v => obj.drag = v);
        public static void BindDrag(this ParticleSystemForceField obj, IProperty<UnityEngine.ParticleSystem.MinMaxCurve> property)
            => BindDrag(obj, Bindings2._scope, property);
        public static void BindDrag(this ParticleSystemForceField obj, Bindings2 bindings, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => bindings.BindUpdate(() => obj.drag = func());
        public static void BindDrag(this ParticleSystemForceField obj, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => BindDrag(obj, Bindings2._scope, func);
        public static void BindDragInterval(this ParticleSystemForceField obj, Bindings2 bindings, float seconds, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => bindings.BindInterval(seconds, () => obj.drag = func());
        public static void BindDragInterval(this ParticleSystemForceField obj, float seconds, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => BindDragInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMultiplyDragByParticleSize(this ParticleSystemForceField obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.multiplyDragByParticleSize = v);
        public static void BindMultiplyDragByParticleSize(this ParticleSystemForceField obj, IProperty<System.Boolean> property)
            => BindMultiplyDragByParticleSize(obj, Bindings2._scope, property);
        public static void BindMultiplyDragByParticleSize(this ParticleSystemForceField obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.multiplyDragByParticleSize = func());
        public static void BindMultiplyDragByParticleSize(this ParticleSystemForceField obj, Func<System.Boolean> func)
            => BindMultiplyDragByParticleSize(obj, Bindings2._scope, func);
        public static void BindMultiplyDragByParticleSizeInterval(this ParticleSystemForceField obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.multiplyDragByParticleSize = func());
        public static void BindMultiplyDragByParticleSizeInterval(this ParticleSystemForceField obj, float seconds, Func<System.Boolean> func)
            => BindMultiplyDragByParticleSizeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMultiplyDragByParticleVelocity(this ParticleSystemForceField obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.multiplyDragByParticleVelocity = v);
        public static void BindMultiplyDragByParticleVelocity(this ParticleSystemForceField obj, IProperty<System.Boolean> property)
            => BindMultiplyDragByParticleVelocity(obj, Bindings2._scope, property);
        public static void BindMultiplyDragByParticleVelocity(this ParticleSystemForceField obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.multiplyDragByParticleVelocity = func());
        public static void BindMultiplyDragByParticleVelocity(this ParticleSystemForceField obj, Func<System.Boolean> func)
            => BindMultiplyDragByParticleVelocity(obj, Bindings2._scope, func);
        public static void BindMultiplyDragByParticleVelocityInterval(this ParticleSystemForceField obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.multiplyDragByParticleVelocity = func());
        public static void BindMultiplyDragByParticleVelocityInterval(this ParticleSystemForceField obj, float seconds, Func<System.Boolean> func)
            => BindMultiplyDragByParticleVelocityInterval(obj, Bindings2._scope, seconds, func);
        public static void BindVectorField(this ParticleSystemForceField obj, Bindings2 bindings, IProperty<UnityEngine.Texture3D> property)
            => bindings.Bind(property, v => obj.vectorField = v);
        public static void BindVectorField(this ParticleSystemForceField obj, IProperty<UnityEngine.Texture3D> property)
            => BindVectorField(obj, Bindings2._scope, property);
        public static void BindVectorField(this ParticleSystemForceField obj, Bindings2 bindings, Func<UnityEngine.Texture3D> func)
            => bindings.BindUpdate(() => obj.vectorField = func());
        public static void BindVectorField(this ParticleSystemForceField obj, Func<UnityEngine.Texture3D> func)
            => BindVectorField(obj, Bindings2._scope, func);
        public static void BindVectorFieldInterval(this ParticleSystemForceField obj, Bindings2 bindings, float seconds, Func<UnityEngine.Texture3D> func)
            => bindings.BindInterval(seconds, () => obj.vectorField = func());
        public static void BindVectorFieldInterval(this ParticleSystemForceField obj, float seconds, Func<UnityEngine.Texture3D> func)
            => BindVectorFieldInterval(obj, Bindings2._scope, seconds, func);
        public static void BindVectorFieldSpeed(this ParticleSystemForceField obj, Bindings2 bindings, IProperty<UnityEngine.ParticleSystem.MinMaxCurve> property)
            => bindings.Bind(property, v => obj.vectorFieldSpeed = v);
        public static void BindVectorFieldSpeed(this ParticleSystemForceField obj, IProperty<UnityEngine.ParticleSystem.MinMaxCurve> property)
            => BindVectorFieldSpeed(obj, Bindings2._scope, property);
        public static void BindVectorFieldSpeed(this ParticleSystemForceField obj, Bindings2 bindings, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => bindings.BindUpdate(() => obj.vectorFieldSpeed = func());
        public static void BindVectorFieldSpeed(this ParticleSystemForceField obj, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => BindVectorFieldSpeed(obj, Bindings2._scope, func);
        public static void BindVectorFieldSpeedInterval(this ParticleSystemForceField obj, Bindings2 bindings, float seconds, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => bindings.BindInterval(seconds, () => obj.vectorFieldSpeed = func());
        public static void BindVectorFieldSpeedInterval(this ParticleSystemForceField obj, float seconds, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => BindVectorFieldSpeedInterval(obj, Bindings2._scope, seconds, func);
        public static void BindVectorFieldAttraction(this ParticleSystemForceField obj, Bindings2 bindings, IProperty<UnityEngine.ParticleSystem.MinMaxCurve> property)
            => bindings.Bind(property, v => obj.vectorFieldAttraction = v);
        public static void BindVectorFieldAttraction(this ParticleSystemForceField obj, IProperty<UnityEngine.ParticleSystem.MinMaxCurve> property)
            => BindVectorFieldAttraction(obj, Bindings2._scope, property);
        public static void BindVectorFieldAttraction(this ParticleSystemForceField obj, Bindings2 bindings, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => bindings.BindUpdate(() => obj.vectorFieldAttraction = func());
        public static void BindVectorFieldAttraction(this ParticleSystemForceField obj, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => BindVectorFieldAttraction(obj, Bindings2._scope, func);
        public static void BindVectorFieldAttractionInterval(this ParticleSystemForceField obj, Bindings2 bindings, float seconds, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => bindings.BindInterval(seconds, () => obj.vectorFieldAttraction = func());
        public static void BindVectorFieldAttractionInterval(this ParticleSystemForceField obj, float seconds, Func<UnityEngine.ParticleSystem.MinMaxCurve> func)
            => BindVectorFieldAttractionInterval(obj, Bindings2._scope, seconds, func);
        #if UNITY_2021_3_OR_NEWER
        public static void BindEnabled(this ParticleSystemForceField obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enabled = v);
        public static void BindEnabled(this ParticleSystemForceField obj, IProperty<System.Boolean> property)
            => BindEnabled(obj, Bindings2._scope, property);
        public static void BindEnabled(this ParticleSystemForceField obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enabled = func());
        public static void BindEnabled(this ParticleSystemForceField obj, Func<System.Boolean> func)
            => BindEnabled(obj, Bindings2._scope, func);
        public static void BindEnabledInterval(this ParticleSystemForceField obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enabled = func());
        public static void BindEnabledInterval(this ParticleSystemForceField obj, float seconds, Func<System.Boolean> func)
            => BindEnabledInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #endif


        #if UNITY_GUI
        public static void BindEventMask(this UnityEngine.EventSystems.Physics2DRaycaster obj, Bindings2 bindings, IProperty<UnityEngine.LayerMask> property)
            => bindings.Bind(property, v => obj.eventMask = v);
        public static void BindEventMask(this UnityEngine.EventSystems.Physics2DRaycaster obj, IProperty<UnityEngine.LayerMask> property)
            => BindEventMask(obj, Bindings2._scope, property);
        public static void BindEventMask(this UnityEngine.EventSystems.Physics2DRaycaster obj, Bindings2 bindings, Func<UnityEngine.LayerMask> func)
            => bindings.BindUpdate(() => obj.eventMask = func());
        public static void BindEventMask(this UnityEngine.EventSystems.Physics2DRaycaster obj, Func<UnityEngine.LayerMask> func)
            => BindEventMask(obj, Bindings2._scope, func);
        public static void BindEventMaskInterval(this UnityEngine.EventSystems.Physics2DRaycaster obj, Bindings2 bindings, float seconds, Func<UnityEngine.LayerMask> func)
            => bindings.BindInterval(seconds, () => obj.eventMask = func());
        public static void BindEventMaskInterval(this UnityEngine.EventSystems.Physics2DRaycaster obj, float seconds, Func<UnityEngine.LayerMask> func)
            => BindEventMaskInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMaxRayIntersections(this UnityEngine.EventSystems.Physics2DRaycaster obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.maxRayIntersections = v);
        public static void BindMaxRayIntersections(this UnityEngine.EventSystems.Physics2DRaycaster obj, IProperty<System.Int32> property)
            => BindMaxRayIntersections(obj, Bindings2._scope, property);
        public static void BindMaxRayIntersections(this UnityEngine.EventSystems.Physics2DRaycaster obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.maxRayIntersections = func());
        public static void BindMaxRayIntersections(this UnityEngine.EventSystems.Physics2DRaycaster obj, Func<System.Int32> func)
            => BindMaxRayIntersections(obj, Bindings2._scope, func);
        public static void BindMaxRayIntersectionsInterval(this UnityEngine.EventSystems.Physics2DRaycaster obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.maxRayIntersections = func());
        public static void BindMaxRayIntersectionsInterval(this UnityEngine.EventSystems.Physics2DRaycaster obj, float seconds, Func<System.Int32> func)
            => BindMaxRayIntersectionsInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindEventMask(this UnityEngine.EventSystems.PhysicsRaycaster obj, Bindings2 bindings, IProperty<UnityEngine.LayerMask> property)
            => bindings.Bind(property, v => obj.eventMask = v);
        public static void BindEventMask(this UnityEngine.EventSystems.PhysicsRaycaster obj, IProperty<UnityEngine.LayerMask> property)
            => BindEventMask(obj, Bindings2._scope, property);
        public static void BindEventMask(this UnityEngine.EventSystems.PhysicsRaycaster obj, Bindings2 bindings, Func<UnityEngine.LayerMask> func)
            => bindings.BindUpdate(() => obj.eventMask = func());
        public static void BindEventMask(this UnityEngine.EventSystems.PhysicsRaycaster obj, Func<UnityEngine.LayerMask> func)
            => BindEventMask(obj, Bindings2._scope, func);
        public static void BindEventMaskInterval(this UnityEngine.EventSystems.PhysicsRaycaster obj, Bindings2 bindings, float seconds, Func<UnityEngine.LayerMask> func)
            => bindings.BindInterval(seconds, () => obj.eventMask = func());
        public static void BindEventMaskInterval(this UnityEngine.EventSystems.PhysicsRaycaster obj, float seconds, Func<UnityEngine.LayerMask> func)
            => BindEventMaskInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMaxRayIntersections(this UnityEngine.EventSystems.PhysicsRaycaster obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.maxRayIntersections = v);
        public static void BindMaxRayIntersections(this UnityEngine.EventSystems.PhysicsRaycaster obj, IProperty<System.Int32> property)
            => BindMaxRayIntersections(obj, Bindings2._scope, property);
        public static void BindMaxRayIntersections(this UnityEngine.EventSystems.PhysicsRaycaster obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.maxRayIntersections = func());
        public static void BindMaxRayIntersections(this UnityEngine.EventSystems.PhysicsRaycaster obj, Func<System.Int32> func)
            => BindMaxRayIntersections(obj, Bindings2._scope, func);
        public static void BindMaxRayIntersectionsInterval(this UnityEngine.EventSystems.PhysicsRaycaster obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.maxRayIntersections = func());
        public static void BindMaxRayIntersectionsInterval(this UnityEngine.EventSystems.PhysicsRaycaster obj, float seconds, Func<System.Int32> func)
            => BindMaxRayIntersectionsInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindUseColliderMask(this PlatformEffector2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useColliderMask = v);
        public static void BindUseColliderMask(this PlatformEffector2D obj, IProperty<System.Boolean> property)
            => BindUseColliderMask(obj, Bindings2._scope, property);
        public static void BindUseColliderMask(this PlatformEffector2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useColliderMask = func());
        public static void BindUseColliderMask(this PlatformEffector2D obj, Func<System.Boolean> func)
            => BindUseColliderMask(obj, Bindings2._scope, func);
        public static void BindUseColliderMaskInterval(this PlatformEffector2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useColliderMask = func());
        public static void BindUseColliderMaskInterval(this PlatformEffector2D obj, float seconds, Func<System.Boolean> func)
            => BindUseColliderMaskInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColliderMask(this PlatformEffector2D obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.colliderMask = v);
        public static void BindColliderMask(this PlatformEffector2D obj, IProperty<System.Int32> property)
            => BindColliderMask(obj, Bindings2._scope, property);
        public static void BindColliderMask(this PlatformEffector2D obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.colliderMask = func());
        public static void BindColliderMask(this PlatformEffector2D obj, Func<System.Int32> func)
            => BindColliderMask(obj, Bindings2._scope, func);
        public static void BindColliderMaskInterval(this PlatformEffector2D obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.colliderMask = func());
        public static void BindColliderMaskInterval(this PlatformEffector2D obj, float seconds, Func<System.Int32> func)
            => BindColliderMaskInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRotationalOffset(this PlatformEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.rotationalOffset = v);
        public static void BindRotationalOffset(this PlatformEffector2D obj, IProperty<System.Single> property)
            => BindRotationalOffset(obj, Bindings2._scope, property);
        public static void BindRotationalOffset(this PlatformEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.rotationalOffset = func());
        public static void BindRotationalOffset(this PlatformEffector2D obj, Func<System.Single> func)
            => BindRotationalOffset(obj, Bindings2._scope, func);
        public static void BindRotationalOffsetInterval(this PlatformEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.rotationalOffset = func());
        public static void BindRotationalOffsetInterval(this PlatformEffector2D obj, float seconds, Func<System.Single> func)
            => BindRotationalOffsetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseOneWay(this PlatformEffector2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useOneWay = v);
        public static void BindUseOneWay(this PlatformEffector2D obj, IProperty<System.Boolean> property)
            => BindUseOneWay(obj, Bindings2._scope, property);
        public static void BindUseOneWay(this PlatformEffector2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useOneWay = func());
        public static void BindUseOneWay(this PlatformEffector2D obj, Func<System.Boolean> func)
            => BindUseOneWay(obj, Bindings2._scope, func);
        public static void BindUseOneWayInterval(this PlatformEffector2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useOneWay = func());
        public static void BindUseOneWayInterval(this PlatformEffector2D obj, float seconds, Func<System.Boolean> func)
            => BindUseOneWayInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseOneWayGrouping(this PlatformEffector2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useOneWayGrouping = v);
        public static void BindUseOneWayGrouping(this PlatformEffector2D obj, IProperty<System.Boolean> property)
            => BindUseOneWayGrouping(obj, Bindings2._scope, property);
        public static void BindUseOneWayGrouping(this PlatformEffector2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useOneWayGrouping = func());
        public static void BindUseOneWayGrouping(this PlatformEffector2D obj, Func<System.Boolean> func)
            => BindUseOneWayGrouping(obj, Bindings2._scope, func);
        public static void BindUseOneWayGroupingInterval(this PlatformEffector2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useOneWayGrouping = func());
        public static void BindUseOneWayGroupingInterval(this PlatformEffector2D obj, float seconds, Func<System.Boolean> func)
            => BindUseOneWayGroupingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSurfaceArc(this PlatformEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.surfaceArc = v);
        public static void BindSurfaceArc(this PlatformEffector2D obj, IProperty<System.Single> property)
            => BindSurfaceArc(obj, Bindings2._scope, property);
        public static void BindSurfaceArc(this PlatformEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.surfaceArc = func());
        public static void BindSurfaceArc(this PlatformEffector2D obj, Func<System.Single> func)
            => BindSurfaceArc(obj, Bindings2._scope, func);
        public static void BindSurfaceArcInterval(this PlatformEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.surfaceArc = func());
        public static void BindSurfaceArcInterval(this PlatformEffector2D obj, float seconds, Func<System.Single> func)
            => BindSurfaceArcInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseSideFriction(this PlatformEffector2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useSideFriction = v);
        public static void BindUseSideFriction(this PlatformEffector2D obj, IProperty<System.Boolean> property)
            => BindUseSideFriction(obj, Bindings2._scope, property);
        public static void BindUseSideFriction(this PlatformEffector2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useSideFriction = func());
        public static void BindUseSideFriction(this PlatformEffector2D obj, Func<System.Boolean> func)
            => BindUseSideFriction(obj, Bindings2._scope, func);
        public static void BindUseSideFrictionInterval(this PlatformEffector2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useSideFriction = func());
        public static void BindUseSideFrictionInterval(this PlatformEffector2D obj, float seconds, Func<System.Boolean> func)
            => BindUseSideFrictionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseSideBounce(this PlatformEffector2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useSideBounce = v);
        public static void BindUseSideBounce(this PlatformEffector2D obj, IProperty<System.Boolean> property)
            => BindUseSideBounce(obj, Bindings2._scope, property);
        public static void BindUseSideBounce(this PlatformEffector2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useSideBounce = func());
        public static void BindUseSideBounce(this PlatformEffector2D obj, Func<System.Boolean> func)
            => BindUseSideBounce(obj, Bindings2._scope, func);
        public static void BindUseSideBounceInterval(this PlatformEffector2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useSideBounce = func());
        public static void BindUseSideBounceInterval(this PlatformEffector2D obj, float seconds, Func<System.Boolean> func)
            => BindUseSideBounceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSideArc(this PlatformEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.sideArc = v);
        public static void BindSideArc(this PlatformEffector2D obj, IProperty<System.Single> property)
            => BindSideArc(obj, Bindings2._scope, property);
        public static void BindSideArc(this PlatformEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.sideArc = func());
        public static void BindSideArc(this PlatformEffector2D obj, Func<System.Single> func)
            => BindSideArc(obj, Bindings2._scope, func);
        public static void BindSideArcInterval(this PlatformEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.sideArc = func());
        public static void BindSideArcInterval(this PlatformEffector2D obj, float seconds, Func<System.Single> func)
            => BindSideArcInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_DIRECTOR
        public static void BindPlayableAsset(this UnityEngine.Playables.PlayableDirector obj, Bindings2 bindings, IProperty<UnityEngine.Playables.PlayableAsset> property)
            => bindings.Bind(property, v => obj.playableAsset = v);
        public static void BindPlayableAsset(this UnityEngine.Playables.PlayableDirector obj, IProperty<UnityEngine.Playables.PlayableAsset> property)
            => BindPlayableAsset(obj, Bindings2._scope, property);
        public static void BindPlayableAsset(this UnityEngine.Playables.PlayableDirector obj, Bindings2 bindings, Func<UnityEngine.Playables.PlayableAsset> func)
            => bindings.BindUpdate(() => obj.playableAsset = func());
        public static void BindPlayableAsset(this UnityEngine.Playables.PlayableDirector obj, Func<UnityEngine.Playables.PlayableAsset> func)
            => BindPlayableAsset(obj, Bindings2._scope, func);
        public static void BindPlayableAssetInterval(this UnityEngine.Playables.PlayableDirector obj, Bindings2 bindings, float seconds, Func<UnityEngine.Playables.PlayableAsset> func)
            => bindings.BindInterval(seconds, () => obj.playableAsset = func());
        public static void BindPlayableAssetInterval(this UnityEngine.Playables.PlayableDirector obj, float seconds, Func<UnityEngine.Playables.PlayableAsset> func)
            => BindPlayableAssetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTimeUpdateMode(this UnityEngine.Playables.PlayableDirector obj, Bindings2 bindings, IProperty<UnityEngine.Playables.DirectorUpdateMode> property)
            => bindings.Bind(property, v => obj.timeUpdateMode = v);
        public static void BindTimeUpdateMode(this UnityEngine.Playables.PlayableDirector obj, IProperty<UnityEngine.Playables.DirectorUpdateMode> property)
            => BindTimeUpdateMode(obj, Bindings2._scope, property);
        public static void BindTimeUpdateMode(this UnityEngine.Playables.PlayableDirector obj, Bindings2 bindings, Func<UnityEngine.Playables.DirectorUpdateMode> func)
            => bindings.BindUpdate(() => obj.timeUpdateMode = func());
        public static void BindTimeUpdateMode(this UnityEngine.Playables.PlayableDirector obj, Func<UnityEngine.Playables.DirectorUpdateMode> func)
            => BindTimeUpdateMode(obj, Bindings2._scope, func);
        public static void BindTimeUpdateModeInterval(this UnityEngine.Playables.PlayableDirector obj, Bindings2 bindings, float seconds, Func<UnityEngine.Playables.DirectorUpdateMode> func)
            => bindings.BindInterval(seconds, () => obj.timeUpdateMode = func());
        public static void BindTimeUpdateModeInterval(this UnityEngine.Playables.PlayableDirector obj, float seconds, Func<UnityEngine.Playables.DirectorUpdateMode> func)
            => BindTimeUpdateModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPlayOnAwake(this UnityEngine.Playables.PlayableDirector obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.playOnAwake = v);
        public static void BindPlayOnAwake(this UnityEngine.Playables.PlayableDirector obj, IProperty<System.Boolean> property)
            => BindPlayOnAwake(obj, Bindings2._scope, property);
        public static void BindPlayOnAwake(this UnityEngine.Playables.PlayableDirector obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.playOnAwake = func());
        public static void BindPlayOnAwake(this UnityEngine.Playables.PlayableDirector obj, Func<System.Boolean> func)
            => BindPlayOnAwake(obj, Bindings2._scope, func);
        public static void BindPlayOnAwakeInterval(this UnityEngine.Playables.PlayableDirector obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.playOnAwake = func());
        public static void BindPlayOnAwakeInterval(this UnityEngine.Playables.PlayableDirector obj, float seconds, Func<System.Boolean> func)
            => BindPlayOnAwakeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindExtrapolationMode(this UnityEngine.Playables.PlayableDirector obj, Bindings2 bindings, IProperty<UnityEngine.Playables.DirectorWrapMode> property)
            => bindings.Bind(property, v => obj.extrapolationMode = v);
        public static void BindExtrapolationMode(this UnityEngine.Playables.PlayableDirector obj, IProperty<UnityEngine.Playables.DirectorWrapMode> property)
            => BindExtrapolationMode(obj, Bindings2._scope, property);
        public static void BindExtrapolationMode(this UnityEngine.Playables.PlayableDirector obj, Bindings2 bindings, Func<UnityEngine.Playables.DirectorWrapMode> func)
            => bindings.BindUpdate(() => obj.extrapolationMode = func());
        public static void BindExtrapolationMode(this UnityEngine.Playables.PlayableDirector obj, Func<UnityEngine.Playables.DirectorWrapMode> func)
            => BindExtrapolationMode(obj, Bindings2._scope, func);
        public static void BindExtrapolationModeInterval(this UnityEngine.Playables.PlayableDirector obj, Bindings2 bindings, float seconds, Func<UnityEngine.Playables.DirectorWrapMode> func)
            => bindings.BindInterval(seconds, () => obj.extrapolationMode = func());
        public static void BindExtrapolationModeInterval(this UnityEngine.Playables.PlayableDirector obj, float seconds, Func<UnityEngine.Playables.DirectorWrapMode> func)
            => BindExtrapolationModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindInitialTime(this UnityEngine.Playables.PlayableDirector obj, Bindings2 bindings, IProperty<System.Double> property)
            => bindings.Bind(property, v => obj.initialTime = v);
        public static void BindInitialTime(this UnityEngine.Playables.PlayableDirector obj, IProperty<System.Double> property)
            => BindInitialTime(obj, Bindings2._scope, property);
        public static void BindInitialTime(this UnityEngine.Playables.PlayableDirector obj, Bindings2 bindings, Func<System.Double> func)
            => bindings.BindUpdate(() => obj.initialTime = func());
        public static void BindInitialTime(this UnityEngine.Playables.PlayableDirector obj, Func<System.Double> func)
            => BindInitialTime(obj, Bindings2._scope, func);
        public static void BindInitialTimeInterval(this UnityEngine.Playables.PlayableDirector obj, Bindings2 bindings, float seconds, Func<System.Double> func)
            => bindings.BindInterval(seconds, () => obj.initialTime = func());
        public static void BindInitialTimeInterval(this UnityEngine.Playables.PlayableDirector obj, float seconds, Func<System.Double> func)
            => BindInitialTimeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTime(this UnityEngine.Playables.PlayableDirector obj, Bindings2 bindings, IProperty<System.Double> property)
            => bindings.Bind(property, v => obj.time = v);
        public static void BindTime(this UnityEngine.Playables.PlayableDirector obj, IProperty<System.Double> property)
            => BindTime(obj, Bindings2._scope, property);
        public static void BindTime(this UnityEngine.Playables.PlayableDirector obj, Bindings2 bindings, Func<System.Double> func)
            => bindings.BindUpdate(() => obj.time = func());
        public static void BindTime(this UnityEngine.Playables.PlayableDirector obj, Func<System.Double> func)
            => BindTime(obj, Bindings2._scope, func);
        public static void BindTimeInterval(this UnityEngine.Playables.PlayableDirector obj, Bindings2 bindings, float seconds, Func<System.Double> func)
            => bindings.BindInterval(seconds, () => obj.time = func());
        public static void BindTimeInterval(this UnityEngine.Playables.PlayableDirector obj, float seconds, Func<System.Double> func)
            => BindTimeInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindUseColliderMask(this PointEffector2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useColliderMask = v);
        public static void BindUseColliderMask(this PointEffector2D obj, IProperty<System.Boolean> property)
            => BindUseColliderMask(obj, Bindings2._scope, property);
        public static void BindUseColliderMask(this PointEffector2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useColliderMask = func());
        public static void BindUseColliderMask(this PointEffector2D obj, Func<System.Boolean> func)
            => BindUseColliderMask(obj, Bindings2._scope, func);
        public static void BindUseColliderMaskInterval(this PointEffector2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useColliderMask = func());
        public static void BindUseColliderMaskInterval(this PointEffector2D obj, float seconds, Func<System.Boolean> func)
            => BindUseColliderMaskInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColliderMask(this PointEffector2D obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.colliderMask = v);
        public static void BindColliderMask(this PointEffector2D obj, IProperty<System.Int32> property)
            => BindColliderMask(obj, Bindings2._scope, property);
        public static void BindColliderMask(this PointEffector2D obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.colliderMask = func());
        public static void BindColliderMask(this PointEffector2D obj, Func<System.Int32> func)
            => BindColliderMask(obj, Bindings2._scope, func);
        public static void BindColliderMaskInterval(this PointEffector2D obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.colliderMask = func());
        public static void BindColliderMaskInterval(this PointEffector2D obj, float seconds, Func<System.Int32> func)
            => BindColliderMaskInterval(obj, Bindings2._scope, seconds, func);
        public static void BindForceMagnitude(this PointEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.forceMagnitude = v);
        public static void BindForceMagnitude(this PointEffector2D obj, IProperty<System.Single> property)
            => BindForceMagnitude(obj, Bindings2._scope, property);
        public static void BindForceMagnitude(this PointEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.forceMagnitude = func());
        public static void BindForceMagnitude(this PointEffector2D obj, Func<System.Single> func)
            => BindForceMagnitude(obj, Bindings2._scope, func);
        public static void BindForceMagnitudeInterval(this PointEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.forceMagnitude = func());
        public static void BindForceMagnitudeInterval(this PointEffector2D obj, float seconds, Func<System.Single> func)
            => BindForceMagnitudeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindForceVariation(this PointEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.forceVariation = v);
        public static void BindForceVariation(this PointEffector2D obj, IProperty<System.Single> property)
            => BindForceVariation(obj, Bindings2._scope, property);
        public static void BindForceVariation(this PointEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.forceVariation = func());
        public static void BindForceVariation(this PointEffector2D obj, Func<System.Single> func)
            => BindForceVariation(obj, Bindings2._scope, func);
        public static void BindForceVariationInterval(this PointEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.forceVariation = func());
        public static void BindForceVariationInterval(this PointEffector2D obj, float seconds, Func<System.Single> func)
            => BindForceVariationInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDistanceScale(this PointEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.distanceScale = v);
        public static void BindDistanceScale(this PointEffector2D obj, IProperty<System.Single> property)
            => BindDistanceScale(obj, Bindings2._scope, property);
        public static void BindDistanceScale(this PointEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.distanceScale = func());
        public static void BindDistanceScale(this PointEffector2D obj, Func<System.Single> func)
            => BindDistanceScale(obj, Bindings2._scope, func);
        public static void BindDistanceScaleInterval(this PointEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.distanceScale = func());
        public static void BindDistanceScaleInterval(this PointEffector2D obj, float seconds, Func<System.Single> func)
            => BindDistanceScaleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindForceSource(this PointEffector2D obj, Bindings2 bindings, IProperty<UnityEngine.EffectorSelection2D> property)
            => bindings.Bind(property, v => obj.forceSource = v);
        public static void BindForceSource(this PointEffector2D obj, IProperty<UnityEngine.EffectorSelection2D> property)
            => BindForceSource(obj, Bindings2._scope, property);
        public static void BindForceSource(this PointEffector2D obj, Bindings2 bindings, Func<UnityEngine.EffectorSelection2D> func)
            => bindings.BindUpdate(() => obj.forceSource = func());
        public static void BindForceSource(this PointEffector2D obj, Func<UnityEngine.EffectorSelection2D> func)
            => BindForceSource(obj, Bindings2._scope, func);
        public static void BindForceSourceInterval(this PointEffector2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.EffectorSelection2D> func)
            => bindings.BindInterval(seconds, () => obj.forceSource = func());
        public static void BindForceSourceInterval(this PointEffector2D obj, float seconds, Func<UnityEngine.EffectorSelection2D> func)
            => BindForceSourceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindForceTarget(this PointEffector2D obj, Bindings2 bindings, IProperty<UnityEngine.EffectorSelection2D> property)
            => bindings.Bind(property, v => obj.forceTarget = v);
        public static void BindForceTarget(this PointEffector2D obj, IProperty<UnityEngine.EffectorSelection2D> property)
            => BindForceTarget(obj, Bindings2._scope, property);
        public static void BindForceTarget(this PointEffector2D obj, Bindings2 bindings, Func<UnityEngine.EffectorSelection2D> func)
            => bindings.BindUpdate(() => obj.forceTarget = func());
        public static void BindForceTarget(this PointEffector2D obj, Func<UnityEngine.EffectorSelection2D> func)
            => BindForceTarget(obj, Bindings2._scope, func);
        public static void BindForceTargetInterval(this PointEffector2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.EffectorSelection2D> func)
            => bindings.BindInterval(seconds, () => obj.forceTarget = func());
        public static void BindForceTargetInterval(this PointEffector2D obj, float seconds, Func<UnityEngine.EffectorSelection2D> func)
            => BindForceTargetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindForceMode(this PointEffector2D obj, Bindings2 bindings, IProperty<UnityEngine.EffectorForceMode2D> property)
            => bindings.Bind(property, v => obj.forceMode = v);
        public static void BindForceMode(this PointEffector2D obj, IProperty<UnityEngine.EffectorForceMode2D> property)
            => BindForceMode(obj, Bindings2._scope, property);
        public static void BindForceMode(this PointEffector2D obj, Bindings2 bindings, Func<UnityEngine.EffectorForceMode2D> func)
            => bindings.BindUpdate(() => obj.forceMode = func());
        public static void BindForceMode(this PointEffector2D obj, Func<UnityEngine.EffectorForceMode2D> func)
            => BindForceMode(obj, Bindings2._scope, func);
        public static void BindForceModeInterval(this PointEffector2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.EffectorForceMode2D> func)
            => bindings.BindInterval(seconds, () => obj.forceMode = func());
        public static void BindForceModeInterval(this PointEffector2D obj, float seconds, Func<UnityEngine.EffectorForceMode2D> func)
            => BindForceModeInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_6000_1_OR_NEWER
        public static void BindDrag(this PointEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.drag = v);
        public static void BindDrag(this PointEffector2D obj, IProperty<System.Single> property)
            => BindDrag(obj, Bindings2._scope, property);
        public static void BindDrag(this PointEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.drag = func());
        public static void BindDrag(this PointEffector2D obj, Func<System.Single> func)
            => BindDrag(obj, Bindings2._scope, func);
        public static void BindDragInterval(this PointEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.drag = func());
        public static void BindDragInterval(this PointEffector2D obj, float seconds, Func<System.Single> func)
            => BindDragInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if !UNITY_6000_1_OR_NEWER
        public static void BindAngularDrag(this PointEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.angularDrag = v);
        public static void BindAngularDrag(this PointEffector2D obj, IProperty<System.Single> property)
            => BindAngularDrag(obj, Bindings2._scope, property);
        public static void BindAngularDrag(this PointEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.angularDrag = func());
        public static void BindAngularDrag(this PointEffector2D obj, Func<System.Single> func)
            => BindAngularDrag(obj, Bindings2._scope, func);
        public static void BindAngularDragInterval(this PointEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.angularDrag = func());
        public static void BindAngularDragInterval(this PointEffector2D obj, float seconds, Func<System.Single> func)
            => BindAngularDragInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindSharedMaterial(this PolygonCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.PhysicsMaterial2D> property)
            => bindings.Bind(property, v => obj.sharedMaterial = v);
        public static void BindSharedMaterial(this PolygonCollider2D obj, IProperty<UnityEngine.PhysicsMaterial2D> property)
            => BindSharedMaterial(obj, Bindings2._scope, property);
        public static void BindSharedMaterial(this PolygonCollider2D obj, Bindings2 bindings, Func<UnityEngine.PhysicsMaterial2D> func)
            => bindings.BindUpdate(() => obj.sharedMaterial = func());
        public static void BindSharedMaterial(this PolygonCollider2D obj, Func<UnityEngine.PhysicsMaterial2D> func)
            => BindSharedMaterial(obj, Bindings2._scope, func);
        public static void BindSharedMaterialInterval(this PolygonCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.PhysicsMaterial2D> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterial = func());
        public static void BindSharedMaterialInterval(this PolygonCollider2D obj, float seconds, Func<UnityEngine.PhysicsMaterial2D> func)
            => BindSharedMaterialInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIsTrigger(this PolygonCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isTrigger = v);
        public static void BindIsTrigger(this PolygonCollider2D obj, IProperty<System.Boolean> property)
            => BindIsTrigger(obj, Bindings2._scope, property);
        public static void BindIsTrigger(this PolygonCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isTrigger = func());
        public static void BindIsTrigger(this PolygonCollider2D obj, Func<System.Boolean> func)
            => BindIsTrigger(obj, Bindings2._scope, func);
        public static void BindIsTriggerInterval(this PolygonCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isTrigger = func());
        public static void BindIsTriggerInterval(this PolygonCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindIsTriggerInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUsedByEffector(this PolygonCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.usedByEffector = v);
        public static void BindUsedByEffector(this PolygonCollider2D obj, IProperty<System.Boolean> property)
            => BindUsedByEffector(obj, Bindings2._scope, property);
        public static void BindUsedByEffector(this PolygonCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.usedByEffector = func());
        public static void BindUsedByEffector(this PolygonCollider2D obj, Func<System.Boolean> func)
            => BindUsedByEffector(obj, Bindings2._scope, func);
        public static void BindUsedByEffectorInterval(this PolygonCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.usedByEffector = func());
        public static void BindUsedByEffectorInterval(this PolygonCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindUsedByEffectorInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_2023_1_OR_NEWER
        public static void BindUsedByComposite(this PolygonCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.usedByComposite = v);
        public static void BindUsedByComposite(this PolygonCollider2D obj, IProperty<System.Boolean> property)
            => BindUsedByComposite(obj, Bindings2._scope, property);
        public static void BindUsedByComposite(this PolygonCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.usedByComposite = func());
        public static void BindUsedByComposite(this PolygonCollider2D obj, Func<System.Boolean> func)
            => BindUsedByComposite(obj, Bindings2._scope, func);
        public static void BindUsedByCompositeInterval(this PolygonCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.usedByComposite = func());
        public static void BindUsedByCompositeInterval(this PolygonCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindUsedByCompositeInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_2023_1_OR_NEWER
        public static void BindCompositeOperation(this PolygonCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.Collider2D.CompositeOperation> property)
            => bindings.Bind(property, v => obj.compositeOperation = v);
        public static void BindCompositeOperation(this PolygonCollider2D obj, IProperty<UnityEngine.Collider2D.CompositeOperation> property)
            => BindCompositeOperation(obj, Bindings2._scope, property);
        public static void BindCompositeOperation(this PolygonCollider2D obj, Bindings2 bindings, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => bindings.BindUpdate(() => obj.compositeOperation = func());
        public static void BindCompositeOperation(this PolygonCollider2D obj, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => BindCompositeOperation(obj, Bindings2._scope, func);
        public static void BindCompositeOperationInterval(this PolygonCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => bindings.BindInterval(seconds, () => obj.compositeOperation = func());
        public static void BindCompositeOperationInterval(this PolygonCollider2D obj, float seconds, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => BindCompositeOperationInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindAutoTiling(this PolygonCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoTiling = v);
        public static void BindAutoTiling(this PolygonCollider2D obj, IProperty<System.Boolean> property)
            => BindAutoTiling(obj, Bindings2._scope, property);
        public static void BindAutoTiling(this PolygonCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoTiling = func());
        public static void BindAutoTiling(this PolygonCollider2D obj, Func<System.Boolean> func)
            => BindAutoTiling(obj, Bindings2._scope, func);
        public static void BindAutoTilingInterval(this PolygonCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoTiling = func());
        public static void BindAutoTilingInterval(this PolygonCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindAutoTilingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindOffset(this PolygonCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.offset = v);
        public static void BindOffset(this PolygonCollider2D obj, IProperty<UnityEngine.Vector2> property)
            => BindOffset(obj, Bindings2._scope, property);
        public static void BindOffset(this PolygonCollider2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.offset = func());
        public static void BindOffset(this PolygonCollider2D obj, Func<UnityEngine.Vector2> func)
            => BindOffset(obj, Bindings2._scope, func);
        public static void BindOffsetInterval(this PolygonCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.offset = func());
        public static void BindOffsetInterval(this PolygonCollider2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindOffsetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPathCount(this PolygonCollider2D obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.pathCount = v);
        public static void BindPathCount(this PolygonCollider2D obj, IProperty<System.Int32> property)
            => BindPathCount(obj, Bindings2._scope, property);
        public static void BindPathCount(this PolygonCollider2D obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.pathCount = func());
        public static void BindPathCount(this PolygonCollider2D obj, Func<System.Int32> func)
            => BindPathCount(obj, Bindings2._scope, func);
        public static void BindPathCountInterval(this PolygonCollider2D obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.pathCount = func());
        public static void BindPathCountInterval(this PolygonCollider2D obj, float seconds, Func<System.Int32> func)
            => BindPathCountInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPoints(this PolygonCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2[]> property)
            => bindings.Bind(property, v => obj.points = v);
        public static void BindPoints(this PolygonCollider2D obj, IProperty<UnityEngine.Vector2[]> property)
            => BindPoints(obj, Bindings2._scope, property);
        public static void BindPoints(this PolygonCollider2D obj, Bindings2 bindings, Func<UnityEngine.Vector2[]> func)
            => bindings.BindUpdate(() => obj.points = func());
        public static void BindPoints(this PolygonCollider2D obj, Func<UnityEngine.Vector2[]> func)
            => BindPoints(obj, Bindings2._scope, func);
        public static void BindPointsInterval(this PolygonCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2[]> func)
            => bindings.BindInterval(seconds, () => obj.points = func());
        public static void BindPointsInterval(this PolygonCollider2D obj, float seconds, Func<UnityEngine.Vector2[]> func)
            => BindPointsInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_ANIMATION
        public static void BindConstraintActive(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.constraintActive = v);
        public static void BindConstraintActive(this UnityEngine.Animations.PositionConstraint obj, IProperty<System.Boolean> property)
            => BindConstraintActive(obj, Bindings2._scope, property);
        public static void BindConstraintActive(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.constraintActive = func());
        public static void BindConstraintActive(this UnityEngine.Animations.PositionConstraint obj, Func<System.Boolean> func)
            => BindConstraintActive(obj, Bindings2._scope, func);
        public static void BindConstraintActiveInterval(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.constraintActive = func());
        public static void BindConstraintActiveInterval(this UnityEngine.Animations.PositionConstraint obj, float seconds, Func<System.Boolean> func)
            => BindConstraintActiveInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWeight(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.weight = v);
        public static void BindWeight(this UnityEngine.Animations.PositionConstraint obj, IProperty<System.Single> property)
            => BindWeight(obj, Bindings2._scope, property);
        public static void BindWeight(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.weight = func());
        public static void BindWeight(this UnityEngine.Animations.PositionConstraint obj, Func<System.Single> func)
            => BindWeight(obj, Bindings2._scope, func);
        public static void BindWeightInterval(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.weight = func());
        public static void BindWeightInterval(this UnityEngine.Animations.PositionConstraint obj, float seconds, Func<System.Single> func)
            => BindWeightInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLocked(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.locked = v);
        public static void BindLocked(this UnityEngine.Animations.PositionConstraint obj, IProperty<System.Boolean> property)
            => BindLocked(obj, Bindings2._scope, property);
        public static void BindLocked(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.locked = func());
        public static void BindLocked(this UnityEngine.Animations.PositionConstraint obj, Func<System.Boolean> func)
            => BindLocked(obj, Bindings2._scope, func);
        public static void BindLockedInterval(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.locked = func());
        public static void BindLockedInterval(this UnityEngine.Animations.PositionConstraint obj, float seconds, Func<System.Boolean> func)
            => BindLockedInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTranslationAtRest(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.translationAtRest = v);
        public static void BindTranslationAtRest(this UnityEngine.Animations.PositionConstraint obj, IProperty<UnityEngine.Vector3> property)
            => BindTranslationAtRest(obj, Bindings2._scope, property);
        public static void BindTranslationAtRest(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.translationAtRest = func());
        public static void BindTranslationAtRest(this UnityEngine.Animations.PositionConstraint obj, Func<UnityEngine.Vector3> func)
            => BindTranslationAtRest(obj, Bindings2._scope, func);
        public static void BindTranslationAtRestInterval(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.translationAtRest = func());
        public static void BindTranslationAtRestInterval(this UnityEngine.Animations.PositionConstraint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindTranslationAtRestInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTranslationAtRestLerp(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.translationAtRest = Vector3.Lerp(obj.translationAtRest, property.Value, speed * Time.smoothDeltaTime));
        public static void BindTranslationAtRestLerp(this UnityEngine.Animations.PositionConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindTranslationAtRestLerp(obj, Bindings2._scope, speed, property);
        public static void BindTranslationAtRestLerp(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.translationAtRest = Vector3.Lerp(obj.translationAtRest, func(), speed * Time.smoothDeltaTime));
        public static void BindTranslationAtRestLerp(this UnityEngine.Animations.PositionConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindTranslationAtRestLerp(obj, Bindings2._scope, speed, func);
        public static void BindTranslationAtRestTowards(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.translationAtRest = Vector3.MoveTowards(obj.translationAtRest, property.Value, speed * Time.smoothDeltaTime));
        public static void BindTranslationAtRestTowards(this UnityEngine.Animations.PositionConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindTranslationAtRestTowards(obj, Bindings2._scope, speed, property);
        public static void BindTranslationAtRestTowards(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.translationAtRest = Vector3.MoveTowards(obj.translationAtRest, func(), speed * Time.smoothDeltaTime));
        public static void BindTranslationAtRestTowards(this UnityEngine.Animations.PositionConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindTranslationAtRestTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateTranslationAtRest(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.translationAtRest = Vector3.Lerp(start, end, t));
        public static void AnimateTranslationAtRest(this UnityEngine.Animations.PositionConstraint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTranslationAtRest(obj, Bindings2._scope, start, end, curve);
        public static void AnimateTranslationAtRest(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTranslationAtRest(obj, Bindings2._scope, obj.translationAtRest, end, curve);
        public static void AnimateTranslationAtRest(this UnityEngine.Animations.PositionConstraint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTranslationAtRest(obj, Bindings2._scope, end, curve);
        public static void BindTranslationOffset(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.translationOffset = v);
        public static void BindTranslationOffset(this UnityEngine.Animations.PositionConstraint obj, IProperty<UnityEngine.Vector3> property)
            => BindTranslationOffset(obj, Bindings2._scope, property);
        public static void BindTranslationOffset(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.translationOffset = func());
        public static void BindTranslationOffset(this UnityEngine.Animations.PositionConstraint obj, Func<UnityEngine.Vector3> func)
            => BindTranslationOffset(obj, Bindings2._scope, func);
        public static void BindTranslationOffsetInterval(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.translationOffset = func());
        public static void BindTranslationOffsetInterval(this UnityEngine.Animations.PositionConstraint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindTranslationOffsetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTranslationOffsetLerp(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.translationOffset = Vector3.Lerp(obj.translationOffset, property.Value, speed * Time.smoothDeltaTime));
        public static void BindTranslationOffsetLerp(this UnityEngine.Animations.PositionConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindTranslationOffsetLerp(obj, Bindings2._scope, speed, property);
        public static void BindTranslationOffsetLerp(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.translationOffset = Vector3.Lerp(obj.translationOffset, func(), speed * Time.smoothDeltaTime));
        public static void BindTranslationOffsetLerp(this UnityEngine.Animations.PositionConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindTranslationOffsetLerp(obj, Bindings2._scope, speed, func);
        public static void BindTranslationOffsetTowards(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.translationOffset = Vector3.MoveTowards(obj.translationOffset, property.Value, speed * Time.smoothDeltaTime));
        public static void BindTranslationOffsetTowards(this UnityEngine.Animations.PositionConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindTranslationOffsetTowards(obj, Bindings2._scope, speed, property);
        public static void BindTranslationOffsetTowards(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.translationOffset = Vector3.MoveTowards(obj.translationOffset, func(), speed * Time.smoothDeltaTime));
        public static void BindTranslationOffsetTowards(this UnityEngine.Animations.PositionConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindTranslationOffsetTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateTranslationOffset(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.translationOffset = Vector3.Lerp(start, end, t));
        public static void AnimateTranslationOffset(this UnityEngine.Animations.PositionConstraint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTranslationOffset(obj, Bindings2._scope, start, end, curve);
        public static void AnimateTranslationOffset(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTranslationOffset(obj, Bindings2._scope, obj.translationOffset, end, curve);
        public static void AnimateTranslationOffset(this UnityEngine.Animations.PositionConstraint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTranslationOffset(obj, Bindings2._scope, end, curve);
        public static void BindTranslationAxis(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Animations.Axis> property)
            => bindings.Bind(property, v => obj.translationAxis = v);
        public static void BindTranslationAxis(this UnityEngine.Animations.PositionConstraint obj, IProperty<UnityEngine.Animations.Axis> property)
            => BindTranslationAxis(obj, Bindings2._scope, property);
        public static void BindTranslationAxis(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, Func<UnityEngine.Animations.Axis> func)
            => bindings.BindUpdate(() => obj.translationAxis = func());
        public static void BindTranslationAxis(this UnityEngine.Animations.PositionConstraint obj, Func<UnityEngine.Animations.Axis> func)
            => BindTranslationAxis(obj, Bindings2._scope, func);
        public static void BindTranslationAxisInterval(this UnityEngine.Animations.PositionConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Animations.Axis> func)
            => bindings.BindInterval(seconds, () => obj.translationAxis = func());
        public static void BindTranslationAxisInterval(this UnityEngine.Animations.PositionConstraint obj, float seconds, Func<UnityEngine.Animations.Axis> func)
            => BindTranslationAxisInterval(obj, Bindings2._scope, seconds, func);
        #endif


        public static void BindNearClipPlane(this Projector obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.nearClipPlane = v);
        public static void BindNearClipPlane(this Projector obj, IProperty<System.Single> property)
            => BindNearClipPlane(obj, Bindings2._scope, property);
        public static void BindNearClipPlane(this Projector obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.nearClipPlane = func());
        public static void BindNearClipPlane(this Projector obj, Func<System.Single> func)
            => BindNearClipPlane(obj, Bindings2._scope, func);
        public static void BindNearClipPlaneInterval(this Projector obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.nearClipPlane = func());
        public static void BindNearClipPlaneInterval(this Projector obj, float seconds, Func<System.Single> func)
            => BindNearClipPlaneInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFarClipPlane(this Projector obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.farClipPlane = v);
        public static void BindFarClipPlane(this Projector obj, IProperty<System.Single> property)
            => BindFarClipPlane(obj, Bindings2._scope, property);
        public static void BindFarClipPlane(this Projector obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.farClipPlane = func());
        public static void BindFarClipPlane(this Projector obj, Func<System.Single> func)
            => BindFarClipPlane(obj, Bindings2._scope, func);
        public static void BindFarClipPlaneInterval(this Projector obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.farClipPlane = func());
        public static void BindFarClipPlaneInterval(this Projector obj, float seconds, Func<System.Single> func)
            => BindFarClipPlaneInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFieldOfView(this Projector obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.fieldOfView = v);
        public static void BindFieldOfView(this Projector obj, IProperty<System.Single> property)
            => BindFieldOfView(obj, Bindings2._scope, property);
        public static void BindFieldOfView(this Projector obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.fieldOfView = func());
        public static void BindFieldOfView(this Projector obj, Func<System.Single> func)
            => BindFieldOfView(obj, Bindings2._scope, func);
        public static void BindFieldOfViewInterval(this Projector obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.fieldOfView = func());
        public static void BindFieldOfViewInterval(this Projector obj, float seconds, Func<System.Single> func)
            => BindFieldOfViewInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAspectRatio(this Projector obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.aspectRatio = v);
        public static void BindAspectRatio(this Projector obj, IProperty<System.Single> property)
            => BindAspectRatio(obj, Bindings2._scope, property);
        public static void BindAspectRatio(this Projector obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.aspectRatio = func());
        public static void BindAspectRatio(this Projector obj, Func<System.Single> func)
            => BindAspectRatio(obj, Bindings2._scope, func);
        public static void BindAspectRatioInterval(this Projector obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.aspectRatio = func());
        public static void BindAspectRatioInterval(this Projector obj, float seconds, Func<System.Single> func)
            => BindAspectRatioInterval(obj, Bindings2._scope, seconds, func);
        public static void BindOrthographic(this Projector obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.orthographic = v);
        public static void BindOrthographic(this Projector obj, IProperty<System.Boolean> property)
            => BindOrthographic(obj, Bindings2._scope, property);
        public static void BindOrthographic(this Projector obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.orthographic = func());
        public static void BindOrthographic(this Projector obj, Func<System.Boolean> func)
            => BindOrthographic(obj, Bindings2._scope, func);
        public static void BindOrthographicInterval(this Projector obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.orthographic = func());
        public static void BindOrthographicInterval(this Projector obj, float seconds, Func<System.Boolean> func)
            => BindOrthographicInterval(obj, Bindings2._scope, seconds, func);
        public static void BindOrthographicSize(this Projector obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.orthographicSize = v);
        public static void BindOrthographicSize(this Projector obj, IProperty<System.Single> property)
            => BindOrthographicSize(obj, Bindings2._scope, property);
        public static void BindOrthographicSize(this Projector obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.orthographicSize = func());
        public static void BindOrthographicSize(this Projector obj, Func<System.Single> func)
            => BindOrthographicSize(obj, Bindings2._scope, func);
        public static void BindOrthographicSizeInterval(this Projector obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.orthographicSize = func());
        public static void BindOrthographicSizeInterval(this Projector obj, float seconds, Func<System.Single> func)
            => BindOrthographicSizeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMaterial(this Projector obj, Bindings2 bindings, IProperty<UnityEngine.Material> property)
            => bindings.Bind(property, v => obj.material = v);
        public static void BindMaterial(this Projector obj, IProperty<UnityEngine.Material> property)
            => BindMaterial(obj, Bindings2._scope, property);
        public static void BindMaterial(this Projector obj, Bindings2 bindings, Func<UnityEngine.Material> func)
            => bindings.BindUpdate(() => obj.material = func());
        public static void BindMaterial(this Projector obj, Func<UnityEngine.Material> func)
            => BindMaterial(obj, Bindings2._scope, func);
        public static void BindMaterialInterval(this Projector obj, Bindings2 bindings, float seconds, Func<UnityEngine.Material> func)
            => bindings.BindInterval(seconds, () => obj.material = func());
        public static void BindMaterialInterval(this Projector obj, float seconds, Func<UnityEngine.Material> func)
            => BindMaterialInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIgnoreLayers(this Projector obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.ignoreLayers = v);
        public static void BindIgnoreLayers(this Projector obj, IProperty<System.Int32> property)
            => BindIgnoreLayers(obj, Bindings2._scope, property);
        public static void BindIgnoreLayers(this Projector obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.ignoreLayers = func());
        public static void BindIgnoreLayers(this Projector obj, Func<System.Int32> func)
            => BindIgnoreLayers(obj, Bindings2._scope, func);
        public static void BindIgnoreLayersInterval(this Projector obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.ignoreLayers = func());
        public static void BindIgnoreLayersInterval(this Projector obj, float seconds, Func<System.Int32> func)
            => BindIgnoreLayersInterval(obj, Bindings2._scope, seconds, func);


        #if UNITY_GUI
        public static void BindTexture(this UnityEngine.UI.RawImage obj, Bindings2 bindings, IProperty<UnityEngine.Texture> property)
            => bindings.Bind(property, v => obj.texture = v);
        public static void BindTexture(this UnityEngine.UI.RawImage obj, IProperty<UnityEngine.Texture> property)
            => BindTexture(obj, Bindings2._scope, property);
        public static void BindTexture(this UnityEngine.UI.RawImage obj, Bindings2 bindings, Func<UnityEngine.Texture> func)
            => bindings.BindUpdate(() => obj.texture = func());
        public static void BindTexture(this UnityEngine.UI.RawImage obj, Func<UnityEngine.Texture> func)
            => BindTexture(obj, Bindings2._scope, func);
        public static void BindTextureInterval(this UnityEngine.UI.RawImage obj, Bindings2 bindings, float seconds, Func<UnityEngine.Texture> func)
            => bindings.BindInterval(seconds, () => obj.texture = func());
        public static void BindTextureInterval(this UnityEngine.UI.RawImage obj, float seconds, Func<UnityEngine.Texture> func)
            => BindTextureInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColor(this UnityEngine.UI.RawImage obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.color = v);
        public static void BindColor(this UnityEngine.UI.RawImage obj, IProperty<UnityEngine.Color> property)
            => BindColor(obj, Bindings2._scope, property);
        public static void BindColor(this UnityEngine.UI.RawImage obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.color = func());
        public static void BindColor(this UnityEngine.UI.RawImage obj, Func<UnityEngine.Color> func)
            => BindColor(obj, Bindings2._scope, func);
        public static void BindColorInterval(this UnityEngine.UI.RawImage obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.color = func());
        public static void BindColorInterval(this UnityEngine.UI.RawImage obj, float seconds, Func<UnityEngine.Color> func)
            => BindColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRaycastTarget(this UnityEngine.UI.RawImage obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.raycastTarget = v);
        public static void BindRaycastTarget(this UnityEngine.UI.RawImage obj, IProperty<System.Boolean> property)
            => BindRaycastTarget(obj, Bindings2._scope, property);
        public static void BindRaycastTarget(this UnityEngine.UI.RawImage obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.raycastTarget = func());
        public static void BindRaycastTarget(this UnityEngine.UI.RawImage obj, Func<System.Boolean> func)
            => BindRaycastTarget(obj, Bindings2._scope, func);
        public static void BindRaycastTargetInterval(this UnityEngine.UI.RawImage obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.raycastTarget = func());
        public static void BindRaycastTargetInterval(this UnityEngine.UI.RawImage obj, float seconds, Func<System.Boolean> func)
            => BindRaycastTargetInterval(obj, Bindings2._scope, seconds, func);
        #if UNITY_2020_1_OR_NEWER
        public static void BindRaycastPadding(this UnityEngine.UI.RawImage obj, Bindings2 bindings, IProperty<UnityEngine.Vector4> property)
            => bindings.Bind(property, v => obj.raycastPadding = v);
        public static void BindRaycastPadding(this UnityEngine.UI.RawImage obj, IProperty<UnityEngine.Vector4> property)
            => BindRaycastPadding(obj, Bindings2._scope, property);
        public static void BindRaycastPadding(this UnityEngine.UI.RawImage obj, Bindings2 bindings, Func<UnityEngine.Vector4> func)
            => bindings.BindUpdate(() => obj.raycastPadding = func());
        public static void BindRaycastPadding(this UnityEngine.UI.RawImage obj, Func<UnityEngine.Vector4> func)
            => BindRaycastPadding(obj, Bindings2._scope, func);
        public static void BindRaycastPaddingInterval(this UnityEngine.UI.RawImage obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector4> func)
            => bindings.BindInterval(seconds, () => obj.raycastPadding = func());
        public static void BindRaycastPaddingInterval(this UnityEngine.UI.RawImage obj, float seconds, Func<UnityEngine.Vector4> func)
            => BindRaycastPaddingInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindMaskable(this UnityEngine.UI.RawImage obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.maskable = v);
        public static void BindMaskable(this UnityEngine.UI.RawImage obj, IProperty<System.Boolean> property)
            => BindMaskable(obj, Bindings2._scope, property);
        public static void BindMaskable(this UnityEngine.UI.RawImage obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.maskable = func());
        public static void BindMaskable(this UnityEngine.UI.RawImage obj, Func<System.Boolean> func)
            => BindMaskable(obj, Bindings2._scope, func);
        public static void BindMaskableInterval(this UnityEngine.UI.RawImage obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.maskable = func());
        public static void BindMaskableInterval(this UnityEngine.UI.RawImage obj, float seconds, Func<System.Boolean> func)
            => BindMaskableInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUvRect(this UnityEngine.UI.RawImage obj, Bindings2 bindings, IProperty<UnityEngine.Rect> property)
            => bindings.Bind(property, v => obj.uvRect = v);
        public static void BindUvRect(this UnityEngine.UI.RawImage obj, IProperty<UnityEngine.Rect> property)
            => BindUvRect(obj, Bindings2._scope, property);
        public static void BindUvRect(this UnityEngine.UI.RawImage obj, Bindings2 bindings, Func<UnityEngine.Rect> func)
            => bindings.BindUpdate(() => obj.uvRect = func());
        public static void BindUvRect(this UnityEngine.UI.RawImage obj, Func<UnityEngine.Rect> func)
            => BindUvRect(obj, Bindings2._scope, func);
        public static void BindUvRectInterval(this UnityEngine.UI.RawImage obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rect> func)
            => bindings.BindInterval(seconds, () => obj.uvRect = func());
        public static void BindUvRectInterval(this UnityEngine.UI.RawImage obj, float seconds, Func<UnityEngine.Rect> func)
            => BindUvRectInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindPadding(this UnityEngine.UI.RectMask2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector4> property)
            => bindings.Bind(property, v => obj.padding = v);
        public static void BindPadding(this UnityEngine.UI.RectMask2D obj, IProperty<UnityEngine.Vector4> property)
            => BindPadding(obj, Bindings2._scope, property);
        public static void BindPadding(this UnityEngine.UI.RectMask2D obj, Bindings2 bindings, Func<UnityEngine.Vector4> func)
            => bindings.BindUpdate(() => obj.padding = func());
        public static void BindPadding(this UnityEngine.UI.RectMask2D obj, Func<UnityEngine.Vector4> func)
            => BindPadding(obj, Bindings2._scope, func);
        public static void BindPaddingInterval(this UnityEngine.UI.RectMask2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector4> func)
            => bindings.BindInterval(seconds, () => obj.padding = func());
        public static void BindPaddingInterval(this UnityEngine.UI.RectMask2D obj, float seconds, Func<UnityEngine.Vector4> func)
            => BindPaddingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSoftness(this UnityEngine.UI.RectMask2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2Int> property)
            => bindings.Bind(property, v => obj.softness = v);
        public static void BindSoftness(this UnityEngine.UI.RectMask2D obj, IProperty<UnityEngine.Vector2Int> property)
            => BindSoftness(obj, Bindings2._scope, property);
        public static void BindSoftness(this UnityEngine.UI.RectMask2D obj, Bindings2 bindings, Func<UnityEngine.Vector2Int> func)
            => bindings.BindUpdate(() => obj.softness = func());
        public static void BindSoftness(this UnityEngine.UI.RectMask2D obj, Func<UnityEngine.Vector2Int> func)
            => BindSoftness(obj, Bindings2._scope, func);
        public static void BindSoftnessInterval(this UnityEngine.UI.RectMask2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2Int> func)
            => bindings.BindInterval(seconds, () => obj.softness = func());
        public static void BindSoftnessInterval(this UnityEngine.UI.RectMask2D obj, float seconds, Func<UnityEngine.Vector2Int> func)
            => BindSoftnessInterval(obj, Bindings2._scope, seconds, func);
        #endif


        public static void BindLocalPosition(this RectTransform obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.localPosition = v);
        public static void BindLocalPosition(this RectTransform obj, IProperty<UnityEngine.Vector3> property)
            => BindLocalPosition(obj, Bindings2._scope, property);
        public static void BindLocalPosition(this RectTransform obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.localPosition = func());
        public static void BindLocalPosition(this RectTransform obj, Func<UnityEngine.Vector3> func)
            => BindLocalPosition(obj, Bindings2._scope, func);
        public static void BindLocalPositionInterval(this RectTransform obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.localPosition = func());
        public static void BindLocalPositionInterval(this RectTransform obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindLocalPositionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLocalPositionLerp(this RectTransform obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.localPosition = Vector3.Lerp(obj.localPosition, property.Value, speed * Time.smoothDeltaTime));
        public static void BindLocalPositionLerp(this RectTransform obj, float speed, Property<UnityEngine.Vector3> property)
            => BindLocalPositionLerp(obj, Bindings2._scope, speed, property);
        public static void BindLocalPositionLerp(this RectTransform obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.localPosition = Vector3.Lerp(obj.localPosition, func(), speed * Time.smoothDeltaTime));
        public static void BindLocalPositionLerp(this RectTransform obj, float speed, Func<UnityEngine.Vector3> func)
            => BindLocalPositionLerp(obj, Bindings2._scope, speed, func);
        public static void BindLocalPositionTowards(this RectTransform obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.localPosition = Vector3.MoveTowards(obj.localPosition, property.Value, speed * Time.smoothDeltaTime));
        public static void BindLocalPositionTowards(this RectTransform obj, float speed, Property<UnityEngine.Vector3> property)
            => BindLocalPositionTowards(obj, Bindings2._scope, speed, property);
        public static void BindLocalPositionTowards(this RectTransform obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.localPosition = Vector3.MoveTowards(obj.localPosition, func(), speed * Time.smoothDeltaTime));
        public static void BindLocalPositionTowards(this RectTransform obj, float speed, Func<UnityEngine.Vector3> func)
            => BindLocalPositionTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateLocalPosition(this RectTransform obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.localPosition = Vector3.Lerp(start, end, t));
        public static void AnimateLocalPosition(this RectTransform obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateLocalPosition(obj, Bindings2._scope, start, end, curve);
        public static void AnimateLocalPosition(this RectTransform obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateLocalPosition(obj, Bindings2._scope, obj.localPosition, end, curve);
        public static void AnimateLocalPosition(this RectTransform obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateLocalPosition(obj, Bindings2._scope, end, curve);
        public static void BindSizeDelta(this RectTransform obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.sizeDelta = v);
        public static void BindSizeDelta(this RectTransform obj, IProperty<UnityEngine.Vector2> property)
            => BindSizeDelta(obj, Bindings2._scope, property);
        public static void BindSizeDelta(this RectTransform obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.sizeDelta = func());
        public static void BindSizeDelta(this RectTransform obj, Func<UnityEngine.Vector2> func)
            => BindSizeDelta(obj, Bindings2._scope, func);
        public static void BindSizeDeltaInterval(this RectTransform obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.sizeDelta = func());
        public static void BindSizeDeltaInterval(this RectTransform obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindSizeDeltaInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAnchorMin(this RectTransform obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.anchorMin = v);
        public static void BindAnchorMin(this RectTransform obj, IProperty<UnityEngine.Vector2> property)
            => BindAnchorMin(obj, Bindings2._scope, property);
        public static void BindAnchorMin(this RectTransform obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.anchorMin = func());
        public static void BindAnchorMin(this RectTransform obj, Func<UnityEngine.Vector2> func)
            => BindAnchorMin(obj, Bindings2._scope, func);
        public static void BindAnchorMinInterval(this RectTransform obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.anchorMin = func());
        public static void BindAnchorMinInterval(this RectTransform obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindAnchorMinInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAnchorMax(this RectTransform obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.anchorMax = v);
        public static void BindAnchorMax(this RectTransform obj, IProperty<UnityEngine.Vector2> property)
            => BindAnchorMax(obj, Bindings2._scope, property);
        public static void BindAnchorMax(this RectTransform obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.anchorMax = func());
        public static void BindAnchorMax(this RectTransform obj, Func<UnityEngine.Vector2> func)
            => BindAnchorMax(obj, Bindings2._scope, func);
        public static void BindAnchorMaxInterval(this RectTransform obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.anchorMax = func());
        public static void BindAnchorMaxInterval(this RectTransform obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindAnchorMaxInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLocalRotation(this RectTransform obj, Bindings2 bindings, IProperty<UnityEngine.Quaternion> property)
            => bindings.Bind(property, v => obj.localRotation = v);
        public static void BindLocalRotation(this RectTransform obj, IProperty<UnityEngine.Quaternion> property)
            => BindLocalRotation(obj, Bindings2._scope, property);
        public static void BindLocalRotation(this RectTransform obj, Bindings2 bindings, Func<UnityEngine.Quaternion> func)
            => bindings.BindUpdate(() => obj.localRotation = func());
        public static void BindLocalRotation(this RectTransform obj, Func<UnityEngine.Quaternion> func)
            => BindLocalRotation(obj, Bindings2._scope, func);
        public static void BindLocalRotationInterval(this RectTransform obj, Bindings2 bindings, float seconds, Func<UnityEngine.Quaternion> func)
            => bindings.BindInterval(seconds, () => obj.localRotation = func());
        public static void BindLocalRotationInterval(this RectTransform obj, float seconds, Func<UnityEngine.Quaternion> func)
            => BindLocalRotationInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLocalScale(this RectTransform obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.localScale = v);
        public static void BindLocalScale(this RectTransform obj, IProperty<UnityEngine.Vector3> property)
            => BindLocalScale(obj, Bindings2._scope, property);
        public static void BindLocalScale(this RectTransform obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.localScale = func());
        public static void BindLocalScale(this RectTransform obj, Func<UnityEngine.Vector3> func)
            => BindLocalScale(obj, Bindings2._scope, func);
        public static void BindLocalScaleInterval(this RectTransform obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.localScale = func());
        public static void BindLocalScaleInterval(this RectTransform obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindLocalScaleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLocalScaleLerp(this RectTransform obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.localScale = Vector3.Lerp(obj.localScale, property.Value, speed * Time.smoothDeltaTime));
        public static void BindLocalScaleLerp(this RectTransform obj, float speed, Property<UnityEngine.Vector3> property)
            => BindLocalScaleLerp(obj, Bindings2._scope, speed, property);
        public static void BindLocalScaleLerp(this RectTransform obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.localScale = Vector3.Lerp(obj.localScale, func(), speed * Time.smoothDeltaTime));
        public static void BindLocalScaleLerp(this RectTransform obj, float speed, Func<UnityEngine.Vector3> func)
            => BindLocalScaleLerp(obj, Bindings2._scope, speed, func);
        public static void BindLocalScaleTowards(this RectTransform obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.localScale = Vector3.MoveTowards(obj.localScale, property.Value, speed * Time.smoothDeltaTime));
        public static void BindLocalScaleTowards(this RectTransform obj, float speed, Property<UnityEngine.Vector3> property)
            => BindLocalScaleTowards(obj, Bindings2._scope, speed, property);
        public static void BindLocalScaleTowards(this RectTransform obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.localScale = Vector3.MoveTowards(obj.localScale, func(), speed * Time.smoothDeltaTime));
        public static void BindLocalScaleTowards(this RectTransform obj, float speed, Func<UnityEngine.Vector3> func)
            => BindLocalScaleTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateLocalScale(this RectTransform obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.localScale = Vector3.Lerp(start, end, t));
        public static void AnimateLocalScale(this RectTransform obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateLocalScale(obj, Bindings2._scope, start, end, curve);
        public static void AnimateLocalScale(this RectTransform obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateLocalScale(obj, Bindings2._scope, obj.localScale, end, curve);
        public static void AnimateLocalScale(this RectTransform obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateLocalScale(obj, Bindings2._scope, end, curve);
        public static void BindPosition(this RectTransform obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.position = v);
        public static void BindPosition(this RectTransform obj, IProperty<UnityEngine.Vector3> property)
            => BindPosition(obj, Bindings2._scope, property);
        public static void BindPosition(this RectTransform obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.position = func());
        public static void BindPosition(this RectTransform obj, Func<UnityEngine.Vector3> func)
            => BindPosition(obj, Bindings2._scope, func);
        public static void BindPositionInterval(this RectTransform obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.position = func());
        public static void BindPositionInterval(this RectTransform obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindPositionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPositionLerp(this RectTransform obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.position = Vector3.Lerp(obj.position, property.Value, speed * Time.smoothDeltaTime));
        public static void BindPositionLerp(this RectTransform obj, float speed, Property<UnityEngine.Vector3> property)
            => BindPositionLerp(obj, Bindings2._scope, speed, property);
        public static void BindPositionLerp(this RectTransform obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.position = Vector3.Lerp(obj.position, func(), speed * Time.smoothDeltaTime));
        public static void BindPositionLerp(this RectTransform obj, float speed, Func<UnityEngine.Vector3> func)
            => BindPositionLerp(obj, Bindings2._scope, speed, func);
        public static void BindPositionTowards(this RectTransform obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.position = Vector3.MoveTowards(obj.position, property.Value, speed * Time.smoothDeltaTime));
        public static void BindPositionTowards(this RectTransform obj, float speed, Property<UnityEngine.Vector3> property)
            => BindPositionTowards(obj, Bindings2._scope, speed, property);
        public static void BindPositionTowards(this RectTransform obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.position = Vector3.MoveTowards(obj.position, func(), speed * Time.smoothDeltaTime));
        public static void BindPositionTowards(this RectTransform obj, float speed, Func<UnityEngine.Vector3> func)
            => BindPositionTowards(obj, Bindings2._scope, speed, func);
        public static void AnimatePosition(this RectTransform obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.position = Vector3.Lerp(start, end, t));
        public static void AnimatePosition(this RectTransform obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimatePosition(obj, Bindings2._scope, start, end, curve);
        public static void AnimatePosition(this RectTransform obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimatePosition(obj, Bindings2._scope, obj.position, end, curve);
        public static void AnimatePosition(this RectTransform obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimatePosition(obj, Bindings2._scope, end, curve);
        public static void BindRotation(this RectTransform obj, Bindings2 bindings, IProperty<UnityEngine.Quaternion> property)
            => bindings.Bind(property, v => obj.rotation = v);
        public static void BindRotation(this RectTransform obj, IProperty<UnityEngine.Quaternion> property)
            => BindRotation(obj, Bindings2._scope, property);
        public static void BindRotation(this RectTransform obj, Bindings2 bindings, Func<UnityEngine.Quaternion> func)
            => bindings.BindUpdate(() => obj.rotation = func());
        public static void BindRotation(this RectTransform obj, Func<UnityEngine.Quaternion> func)
            => BindRotation(obj, Bindings2._scope, func);
        public static void BindRotationInterval(this RectTransform obj, Bindings2 bindings, float seconds, Func<UnityEngine.Quaternion> func)
            => bindings.BindInterval(seconds, () => obj.rotation = func());
        public static void BindRotationInterval(this RectTransform obj, float seconds, Func<UnityEngine.Quaternion> func)
            => BindRotationInterval(obj, Bindings2._scope, seconds, func);


        public static void BindMode(this ReflectionProbe obj, Bindings2 bindings, IProperty<UnityEngine.Rendering.ReflectionProbeMode> property)
            => bindings.Bind(property, v => obj.mode = v);
        public static void BindMode(this ReflectionProbe obj, IProperty<UnityEngine.Rendering.ReflectionProbeMode> property)
            => BindMode(obj, Bindings2._scope, property);
        public static void BindMode(this ReflectionProbe obj, Bindings2 bindings, Func<UnityEngine.Rendering.ReflectionProbeMode> func)
            => bindings.BindUpdate(() => obj.mode = func());
        public static void BindMode(this ReflectionProbe obj, Func<UnityEngine.Rendering.ReflectionProbeMode> func)
            => BindMode(obj, Bindings2._scope, func);
        public static void BindModeInterval(this ReflectionProbe obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rendering.ReflectionProbeMode> func)
            => bindings.BindInterval(seconds, () => obj.mode = func());
        public static void BindModeInterval(this ReflectionProbe obj, float seconds, Func<UnityEngine.Rendering.ReflectionProbeMode> func)
            => BindModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindImportance(this ReflectionProbe obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.importance = v);
        public static void BindImportance(this ReflectionProbe obj, IProperty<System.Int32> property)
            => BindImportance(obj, Bindings2._scope, property);
        public static void BindImportance(this ReflectionProbe obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.importance = func());
        public static void BindImportance(this ReflectionProbe obj, Func<System.Int32> func)
            => BindImportance(obj, Bindings2._scope, func);
        public static void BindImportanceInterval(this ReflectionProbe obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.importance = func());
        public static void BindImportanceInterval(this ReflectionProbe obj, float seconds, Func<System.Int32> func)
            => BindImportanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIntensity(this ReflectionProbe obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.intensity = v);
        public static void BindIntensity(this ReflectionProbe obj, IProperty<System.Single> property)
            => BindIntensity(obj, Bindings2._scope, property);
        public static void BindIntensity(this ReflectionProbe obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.intensity = func());
        public static void BindIntensity(this ReflectionProbe obj, Func<System.Single> func)
            => BindIntensity(obj, Bindings2._scope, func);
        public static void BindIntensityInterval(this ReflectionProbe obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.intensity = func());
        public static void BindIntensityInterval(this ReflectionProbe obj, float seconds, Func<System.Single> func)
            => BindIntensityInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBoxProjection(this ReflectionProbe obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.boxProjection = v);
        public static void BindBoxProjection(this ReflectionProbe obj, IProperty<System.Boolean> property)
            => BindBoxProjection(obj, Bindings2._scope, property);
        public static void BindBoxProjection(this ReflectionProbe obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.boxProjection = func());
        public static void BindBoxProjection(this ReflectionProbe obj, Func<System.Boolean> func)
            => BindBoxProjection(obj, Bindings2._scope, func);
        public static void BindBoxProjectionInterval(this ReflectionProbe obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.boxProjection = func());
        public static void BindBoxProjectionInterval(this ReflectionProbe obj, float seconds, Func<System.Boolean> func)
            => BindBoxProjectionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBlendDistance(this ReflectionProbe obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.blendDistance = v);
        public static void BindBlendDistance(this ReflectionProbe obj, IProperty<System.Single> property)
            => BindBlendDistance(obj, Bindings2._scope, property);
        public static void BindBlendDistance(this ReflectionProbe obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.blendDistance = func());
        public static void BindBlendDistance(this ReflectionProbe obj, Func<System.Single> func)
            => BindBlendDistance(obj, Bindings2._scope, func);
        public static void BindBlendDistanceInterval(this ReflectionProbe obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.blendDistance = func());
        public static void BindBlendDistanceInterval(this ReflectionProbe obj, float seconds, Func<System.Single> func)
            => BindBlendDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSize(this ReflectionProbe obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.size = v);
        public static void BindSize(this ReflectionProbe obj, IProperty<UnityEngine.Vector3> property)
            => BindSize(obj, Bindings2._scope, property);
        public static void BindSize(this ReflectionProbe obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.size = func());
        public static void BindSize(this ReflectionProbe obj, Func<UnityEngine.Vector3> func)
            => BindSize(obj, Bindings2._scope, func);
        public static void BindSizeInterval(this ReflectionProbe obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.size = func());
        public static void BindSizeInterval(this ReflectionProbe obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindSizeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSizeLerp(this ReflectionProbe obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.size = Vector3.Lerp(obj.size, property.Value, speed * Time.smoothDeltaTime));
        public static void BindSizeLerp(this ReflectionProbe obj, float speed, Property<UnityEngine.Vector3> property)
            => BindSizeLerp(obj, Bindings2._scope, speed, property);
        public static void BindSizeLerp(this ReflectionProbe obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.size = Vector3.Lerp(obj.size, func(), speed * Time.smoothDeltaTime));
        public static void BindSizeLerp(this ReflectionProbe obj, float speed, Func<UnityEngine.Vector3> func)
            => BindSizeLerp(obj, Bindings2._scope, speed, func);
        public static void BindSizeTowards(this ReflectionProbe obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.size = Vector3.MoveTowards(obj.size, property.Value, speed * Time.smoothDeltaTime));
        public static void BindSizeTowards(this ReflectionProbe obj, float speed, Property<UnityEngine.Vector3> property)
            => BindSizeTowards(obj, Bindings2._scope, speed, property);
        public static void BindSizeTowards(this ReflectionProbe obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.size = Vector3.MoveTowards(obj.size, func(), speed * Time.smoothDeltaTime));
        public static void BindSizeTowards(this ReflectionProbe obj, float speed, Func<UnityEngine.Vector3> func)
            => BindSizeTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateSize(this ReflectionProbe obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.size = Vector3.Lerp(start, end, t));
        public static void AnimateSize(this ReflectionProbe obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateSize(obj, Bindings2._scope, start, end, curve);
        public static void AnimateSize(this ReflectionProbe obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateSize(obj, Bindings2._scope, obj.size, end, curve);
        public static void AnimateSize(this ReflectionProbe obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateSize(obj, Bindings2._scope, end, curve);
        public static void BindCenter(this ReflectionProbe obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.center = v);
        public static void BindCenter(this ReflectionProbe obj, IProperty<UnityEngine.Vector3> property)
            => BindCenter(obj, Bindings2._scope, property);
        public static void BindCenter(this ReflectionProbe obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = func());
        public static void BindCenter(this ReflectionProbe obj, Func<UnityEngine.Vector3> func)
            => BindCenter(obj, Bindings2._scope, func);
        public static void BindCenterInterval(this ReflectionProbe obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.center = func());
        public static void BindCenterInterval(this ReflectionProbe obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindCenterInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCenterLerp(this ReflectionProbe obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.center = Vector3.Lerp(obj.center, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCenterLerp(this ReflectionProbe obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCenterLerp(obj, Bindings2._scope, speed, property);
        public static void BindCenterLerp(this ReflectionProbe obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = Vector3.Lerp(obj.center, func(), speed * Time.smoothDeltaTime));
        public static void BindCenterLerp(this ReflectionProbe obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCenterLerp(obj, Bindings2._scope, speed, func);
        public static void BindCenterTowards(this ReflectionProbe obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.center = Vector3.MoveTowards(obj.center, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCenterTowards(this ReflectionProbe obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCenterTowards(obj, Bindings2._scope, speed, property);
        public static void BindCenterTowards(this ReflectionProbe obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = Vector3.MoveTowards(obj.center, func(), speed * Time.smoothDeltaTime));
        public static void BindCenterTowards(this ReflectionProbe obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCenterTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateCenter(this ReflectionProbe obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.center = Vector3.Lerp(start, end, t));
        public static void AnimateCenter(this ReflectionProbe obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, start, end, curve);
        public static void AnimateCenter(this ReflectionProbe obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, obj.center, end, curve);
        public static void AnimateCenter(this ReflectionProbe obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, end, curve);
        public static void BindResolution(this ReflectionProbe obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.resolution = v);
        public static void BindResolution(this ReflectionProbe obj, IProperty<System.Int32> property)
            => BindResolution(obj, Bindings2._scope, property);
        public static void BindResolution(this ReflectionProbe obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.resolution = func());
        public static void BindResolution(this ReflectionProbe obj, Func<System.Int32> func)
            => BindResolution(obj, Bindings2._scope, func);
        public static void BindResolutionInterval(this ReflectionProbe obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.resolution = func());
        public static void BindResolutionInterval(this ReflectionProbe obj, float seconds, Func<System.Int32> func)
            => BindResolutionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindHdr(this ReflectionProbe obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.hdr = v);
        public static void BindHdr(this ReflectionProbe obj, IProperty<System.Boolean> property)
            => BindHdr(obj, Bindings2._scope, property);
        public static void BindHdr(this ReflectionProbe obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.hdr = func());
        public static void BindHdr(this ReflectionProbe obj, Func<System.Boolean> func)
            => BindHdr(obj, Bindings2._scope, func);
        public static void BindHdrInterval(this ReflectionProbe obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.hdr = func());
        public static void BindHdrInterval(this ReflectionProbe obj, float seconds, Func<System.Boolean> func)
            => BindHdrInterval(obj, Bindings2._scope, seconds, func);
        public static void BindShadowDistance(this ReflectionProbe obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.shadowDistance = v);
        public static void BindShadowDistance(this ReflectionProbe obj, IProperty<System.Single> property)
            => BindShadowDistance(obj, Bindings2._scope, property);
        public static void BindShadowDistance(this ReflectionProbe obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.shadowDistance = func());
        public static void BindShadowDistance(this ReflectionProbe obj, Func<System.Single> func)
            => BindShadowDistance(obj, Bindings2._scope, func);
        public static void BindShadowDistanceInterval(this ReflectionProbe obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.shadowDistance = func());
        public static void BindShadowDistanceInterval(this ReflectionProbe obj, float seconds, Func<System.Single> func)
            => BindShadowDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindClearFlags(this ReflectionProbe obj, Bindings2 bindings, IProperty<UnityEngine.Rendering.ReflectionProbeClearFlags> property)
            => bindings.Bind(property, v => obj.clearFlags = v);
        public static void BindClearFlags(this ReflectionProbe obj, IProperty<UnityEngine.Rendering.ReflectionProbeClearFlags> property)
            => BindClearFlags(obj, Bindings2._scope, property);
        public static void BindClearFlags(this ReflectionProbe obj, Bindings2 bindings, Func<UnityEngine.Rendering.ReflectionProbeClearFlags> func)
            => bindings.BindUpdate(() => obj.clearFlags = func());
        public static void BindClearFlags(this ReflectionProbe obj, Func<UnityEngine.Rendering.ReflectionProbeClearFlags> func)
            => BindClearFlags(obj, Bindings2._scope, func);
        public static void BindClearFlagsInterval(this ReflectionProbe obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rendering.ReflectionProbeClearFlags> func)
            => bindings.BindInterval(seconds, () => obj.clearFlags = func());
        public static void BindClearFlagsInterval(this ReflectionProbe obj, float seconds, Func<UnityEngine.Rendering.ReflectionProbeClearFlags> func)
            => BindClearFlagsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBackgroundColor(this ReflectionProbe obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.backgroundColor = v);
        public static void BindBackgroundColor(this ReflectionProbe obj, IProperty<UnityEngine.Color> property)
            => BindBackgroundColor(obj, Bindings2._scope, property);
        public static void BindBackgroundColor(this ReflectionProbe obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.backgroundColor = func());
        public static void BindBackgroundColor(this ReflectionProbe obj, Func<UnityEngine.Color> func)
            => BindBackgroundColor(obj, Bindings2._scope, func);
        public static void BindBackgroundColorInterval(this ReflectionProbe obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.backgroundColor = func());
        public static void BindBackgroundColorInterval(this ReflectionProbe obj, float seconds, Func<UnityEngine.Color> func)
            => BindBackgroundColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCullingMask(this ReflectionProbe obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.cullingMask = v);
        public static void BindCullingMask(this ReflectionProbe obj, IProperty<System.Int32> property)
            => BindCullingMask(obj, Bindings2._scope, property);
        public static void BindCullingMask(this ReflectionProbe obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.cullingMask = func());
        public static void BindCullingMask(this ReflectionProbe obj, Func<System.Int32> func)
            => BindCullingMask(obj, Bindings2._scope, func);
        public static void BindCullingMaskInterval(this ReflectionProbe obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.cullingMask = func());
        public static void BindCullingMaskInterval(this ReflectionProbe obj, float seconds, Func<System.Int32> func)
            => BindCullingMaskInterval(obj, Bindings2._scope, seconds, func);
        public static void BindNearClipPlane(this ReflectionProbe obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.nearClipPlane = v);
        public static void BindNearClipPlane(this ReflectionProbe obj, IProperty<System.Single> property)
            => BindNearClipPlane(obj, Bindings2._scope, property);
        public static void BindNearClipPlane(this ReflectionProbe obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.nearClipPlane = func());
        public static void BindNearClipPlane(this ReflectionProbe obj, Func<System.Single> func)
            => BindNearClipPlane(obj, Bindings2._scope, func);
        public static void BindNearClipPlaneInterval(this ReflectionProbe obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.nearClipPlane = func());
        public static void BindNearClipPlaneInterval(this ReflectionProbe obj, float seconds, Func<System.Single> func)
            => BindNearClipPlaneInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFarClipPlane(this ReflectionProbe obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.farClipPlane = v);
        public static void BindFarClipPlane(this ReflectionProbe obj, IProperty<System.Single> property)
            => BindFarClipPlane(obj, Bindings2._scope, property);
        public static void BindFarClipPlane(this ReflectionProbe obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.farClipPlane = func());
        public static void BindFarClipPlane(this ReflectionProbe obj, Func<System.Single> func)
            => BindFarClipPlane(obj, Bindings2._scope, func);
        public static void BindFarClipPlaneInterval(this ReflectionProbe obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.farClipPlane = func());
        public static void BindFarClipPlaneInterval(this ReflectionProbe obj, float seconds, Func<System.Single> func)
            => BindFarClipPlaneInterval(obj, Bindings2._scope, seconds, func);


        #if UNITY_PHYSICS_2D
        public static void BindEnableCollision(this RelativeJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enableCollision = v);
        public static void BindEnableCollision(this RelativeJoint2D obj, IProperty<System.Boolean> property)
            => BindEnableCollision(obj, Bindings2._scope, property);
        public static void BindEnableCollision(this RelativeJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enableCollision = func());
        public static void BindEnableCollision(this RelativeJoint2D obj, Func<System.Boolean> func)
            => BindEnableCollision(obj, Bindings2._scope, func);
        public static void BindEnableCollisionInterval(this RelativeJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enableCollision = func());
        public static void BindEnableCollisionInterval(this RelativeJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindEnableCollisionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedBody(this RelativeJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Rigidbody2D> property)
            => bindings.Bind(property, v => obj.connectedBody = v);
        public static void BindConnectedBody(this RelativeJoint2D obj, IProperty<UnityEngine.Rigidbody2D> property)
            => BindConnectedBody(obj, Bindings2._scope, property);
        public static void BindConnectedBody(this RelativeJoint2D obj, Bindings2 bindings, Func<UnityEngine.Rigidbody2D> func)
            => bindings.BindUpdate(() => obj.connectedBody = func());
        public static void BindConnectedBody(this RelativeJoint2D obj, Func<UnityEngine.Rigidbody2D> func)
            => BindConnectedBody(obj, Bindings2._scope, func);
        public static void BindConnectedBodyInterval(this RelativeJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rigidbody2D> func)
            => bindings.BindInterval(seconds, () => obj.connectedBody = func());
        public static void BindConnectedBodyInterval(this RelativeJoint2D obj, float seconds, Func<UnityEngine.Rigidbody2D> func)
            => BindConnectedBodyInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMaxForce(this RelativeJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.maxForce = v);
        public static void BindMaxForce(this RelativeJoint2D obj, IProperty<System.Single> property)
            => BindMaxForce(obj, Bindings2._scope, property);
        public static void BindMaxForce(this RelativeJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.maxForce = func());
        public static void BindMaxForce(this RelativeJoint2D obj, Func<System.Single> func)
            => BindMaxForce(obj, Bindings2._scope, func);
        public static void BindMaxForceInterval(this RelativeJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.maxForce = func());
        public static void BindMaxForceInterval(this RelativeJoint2D obj, float seconds, Func<System.Single> func)
            => BindMaxForceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMaxTorque(this RelativeJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.maxTorque = v);
        public static void BindMaxTorque(this RelativeJoint2D obj, IProperty<System.Single> property)
            => BindMaxTorque(obj, Bindings2._scope, property);
        public static void BindMaxTorque(this RelativeJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.maxTorque = func());
        public static void BindMaxTorque(this RelativeJoint2D obj, Func<System.Single> func)
            => BindMaxTorque(obj, Bindings2._scope, func);
        public static void BindMaxTorqueInterval(this RelativeJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.maxTorque = func());
        public static void BindMaxTorqueInterval(this RelativeJoint2D obj, float seconds, Func<System.Single> func)
            => BindMaxTorqueInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCorrectionScale(this RelativeJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.correctionScale = v);
        public static void BindCorrectionScale(this RelativeJoint2D obj, IProperty<System.Single> property)
            => BindCorrectionScale(obj, Bindings2._scope, property);
        public static void BindCorrectionScale(this RelativeJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.correctionScale = func());
        public static void BindCorrectionScale(this RelativeJoint2D obj, Func<System.Single> func)
            => BindCorrectionScale(obj, Bindings2._scope, func);
        public static void BindCorrectionScaleInterval(this RelativeJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.correctionScale = func());
        public static void BindCorrectionScaleInterval(this RelativeJoint2D obj, float seconds, Func<System.Single> func)
            => BindCorrectionScaleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoConfigureOffset(this RelativeJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoConfigureOffset = v);
        public static void BindAutoConfigureOffset(this RelativeJoint2D obj, IProperty<System.Boolean> property)
            => BindAutoConfigureOffset(obj, Bindings2._scope, property);
        public static void BindAutoConfigureOffset(this RelativeJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoConfigureOffset = func());
        public static void BindAutoConfigureOffset(this RelativeJoint2D obj, Func<System.Boolean> func)
            => BindAutoConfigureOffset(obj, Bindings2._scope, func);
        public static void BindAutoConfigureOffsetInterval(this RelativeJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoConfigureOffset = func());
        public static void BindAutoConfigureOffsetInterval(this RelativeJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindAutoConfigureOffsetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLinearOffset(this RelativeJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.linearOffset = v);
        public static void BindLinearOffset(this RelativeJoint2D obj, IProperty<UnityEngine.Vector2> property)
            => BindLinearOffset(obj, Bindings2._scope, property);
        public static void BindLinearOffset(this RelativeJoint2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.linearOffset = func());
        public static void BindLinearOffset(this RelativeJoint2D obj, Func<UnityEngine.Vector2> func)
            => BindLinearOffset(obj, Bindings2._scope, func);
        public static void BindLinearOffsetInterval(this RelativeJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.linearOffset = func());
        public static void BindLinearOffsetInterval(this RelativeJoint2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindLinearOffsetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAngularOffset(this RelativeJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.angularOffset = v);
        public static void BindAngularOffset(this RelativeJoint2D obj, IProperty<System.Single> property)
            => BindAngularOffset(obj, Bindings2._scope, property);
        public static void BindAngularOffset(this RelativeJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.angularOffset = func());
        public static void BindAngularOffset(this RelativeJoint2D obj, Func<System.Single> func)
            => BindAngularOffset(obj, Bindings2._scope, func);
        public static void BindAngularOffsetInterval(this RelativeJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.angularOffset = func());
        public static void BindAngularOffsetInterval(this RelativeJoint2D obj, float seconds, Func<System.Single> func)
            => BindAngularOffsetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakForce(this RelativeJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakForce = v);
        public static void BindBreakForce(this RelativeJoint2D obj, IProperty<System.Single> property)
            => BindBreakForce(obj, Bindings2._scope, property);
        public static void BindBreakForce(this RelativeJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakForce = func());
        public static void BindBreakForce(this RelativeJoint2D obj, Func<System.Single> func)
            => BindBreakForce(obj, Bindings2._scope, func);
        public static void BindBreakForceInterval(this RelativeJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakForce = func());
        public static void BindBreakForceInterval(this RelativeJoint2D obj, float seconds, Func<System.Single> func)
            => BindBreakForceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakTorque(this RelativeJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakTorque = v);
        public static void BindBreakTorque(this RelativeJoint2D obj, IProperty<System.Single> property)
            => BindBreakTorque(obj, Bindings2._scope, property);
        public static void BindBreakTorque(this RelativeJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakTorque = func());
        public static void BindBreakTorque(this RelativeJoint2D obj, Func<System.Single> func)
            => BindBreakTorque(obj, Bindings2._scope, func);
        public static void BindBreakTorqueInterval(this RelativeJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakTorque = func());
        public static void BindBreakTorqueInterval(this RelativeJoint2D obj, float seconds, Func<System.Single> func)
            => BindBreakTorqueInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS
        public static void BindMass(this Rigidbody obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.mass = v);
        public static void BindMass(this Rigidbody obj, IProperty<System.Single> property)
            => BindMass(obj, Bindings2._scope, property);
        public static void BindMass(this Rigidbody obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.mass = func());
        public static void BindMass(this Rigidbody obj, Func<System.Single> func)
            => BindMass(obj, Bindings2._scope, func);
        public static void BindMassInterval(this Rigidbody obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.mass = func());
        public static void BindMassInterval(this Rigidbody obj, float seconds, Func<System.Single> func)
            => BindMassInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_6000_0_OR_NEWER
        public static void BindDrag(this Rigidbody obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.drag = v);
        public static void BindDrag(this Rigidbody obj, IProperty<System.Single> property)
            => BindDrag(obj, Bindings2._scope, property);
        public static void BindDrag(this Rigidbody obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.drag = func());
        public static void BindDrag(this Rigidbody obj, Func<System.Single> func)
            => BindDrag(obj, Bindings2._scope, func);
        public static void BindDragInterval(this Rigidbody obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.drag = func());
        public static void BindDragInterval(this Rigidbody obj, float seconds, Func<System.Single> func)
            => BindDragInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if !UNITY_6000_0_OR_NEWER
        public static void BindAngularDrag(this Rigidbody obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.angularDrag = v);
        public static void BindAngularDrag(this Rigidbody obj, IProperty<System.Single> property)
            => BindAngularDrag(obj, Bindings2._scope, property);
        public static void BindAngularDrag(this Rigidbody obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.angularDrag = func());
        public static void BindAngularDrag(this Rigidbody obj, Func<System.Single> func)
            => BindAngularDrag(obj, Bindings2._scope, func);
        public static void BindAngularDragInterval(this Rigidbody obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.angularDrag = func());
        public static void BindAngularDragInterval(this Rigidbody obj, float seconds, Func<System.Single> func)
            => BindAngularDragInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_6000_0_OR_NEWER
        public static void BindLinearDamping(this Rigidbody obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.linearDamping = v);
        public static void BindLinearDamping(this Rigidbody obj, IProperty<System.Single> property)
            => BindLinearDamping(obj, Bindings2._scope, property);
        public static void BindLinearDamping(this Rigidbody obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.linearDamping = func());
        public static void BindLinearDamping(this Rigidbody obj, Func<System.Single> func)
            => BindLinearDamping(obj, Bindings2._scope, func);
        public static void BindLinearDampingInterval(this Rigidbody obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.linearDamping = func());
        public static void BindLinearDampingInterval(this Rigidbody obj, float seconds, Func<System.Single> func)
            => BindLinearDampingInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_6000_0_OR_NEWER
        public static void BindAngularDamping(this Rigidbody obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.angularDamping = v);
        public static void BindAngularDamping(this Rigidbody obj, IProperty<System.Single> property)
            => BindAngularDamping(obj, Bindings2._scope, property);
        public static void BindAngularDamping(this Rigidbody obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.angularDamping = func());
        public static void BindAngularDamping(this Rigidbody obj, Func<System.Single> func)
            => BindAngularDamping(obj, Bindings2._scope, func);
        public static void BindAngularDampingInterval(this Rigidbody obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.angularDamping = func());
        public static void BindAngularDampingInterval(this Rigidbody obj, float seconds, Func<System.Single> func)
            => BindAngularDampingInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindUseGravity(this Rigidbody obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useGravity = v);
        public static void BindUseGravity(this Rigidbody obj, IProperty<System.Boolean> property)
            => BindUseGravity(obj, Bindings2._scope, property);
        public static void BindUseGravity(this Rigidbody obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useGravity = func());
        public static void BindUseGravity(this Rigidbody obj, Func<System.Boolean> func)
            => BindUseGravity(obj, Bindings2._scope, func);
        public static void BindUseGravityInterval(this Rigidbody obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useGravity = func());
        public static void BindUseGravityInterval(this Rigidbody obj, float seconds, Func<System.Boolean> func)
            => BindUseGravityInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIsKinematic(this Rigidbody obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isKinematic = v);
        public static void BindIsKinematic(this Rigidbody obj, IProperty<System.Boolean> property)
            => BindIsKinematic(obj, Bindings2._scope, property);
        public static void BindIsKinematic(this Rigidbody obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isKinematic = func());
        public static void BindIsKinematic(this Rigidbody obj, Func<System.Boolean> func)
            => BindIsKinematic(obj, Bindings2._scope, func);
        public static void BindIsKinematicInterval(this Rigidbody obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isKinematic = func());
        public static void BindIsKinematicInterval(this Rigidbody obj, float seconds, Func<System.Boolean> func)
            => BindIsKinematicInterval(obj, Bindings2._scope, seconds, func);
        public static void BindInterpolation(this Rigidbody obj, Bindings2 bindings, IProperty<UnityEngine.RigidbodyInterpolation> property)
            => bindings.Bind(property, v => obj.interpolation = v);
        public static void BindInterpolation(this Rigidbody obj, IProperty<UnityEngine.RigidbodyInterpolation> property)
            => BindInterpolation(obj, Bindings2._scope, property);
        public static void BindInterpolation(this Rigidbody obj, Bindings2 bindings, Func<UnityEngine.RigidbodyInterpolation> func)
            => bindings.BindUpdate(() => obj.interpolation = func());
        public static void BindInterpolation(this Rigidbody obj, Func<UnityEngine.RigidbodyInterpolation> func)
            => BindInterpolation(obj, Bindings2._scope, func);
        public static void BindInterpolationInterval(this Rigidbody obj, Bindings2 bindings, float seconds, Func<UnityEngine.RigidbodyInterpolation> func)
            => bindings.BindInterval(seconds, () => obj.interpolation = func());
        public static void BindInterpolationInterval(this Rigidbody obj, float seconds, Func<UnityEngine.RigidbodyInterpolation> func)
            => BindInterpolationInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCollisionDetectionMode(this Rigidbody obj, Bindings2 bindings, IProperty<UnityEngine.CollisionDetectionMode> property)
            => bindings.Bind(property, v => obj.collisionDetectionMode = v);
        public static void BindCollisionDetectionMode(this Rigidbody obj, IProperty<UnityEngine.CollisionDetectionMode> property)
            => BindCollisionDetectionMode(obj, Bindings2._scope, property);
        public static void BindCollisionDetectionMode(this Rigidbody obj, Bindings2 bindings, Func<UnityEngine.CollisionDetectionMode> func)
            => bindings.BindUpdate(() => obj.collisionDetectionMode = func());
        public static void BindCollisionDetectionMode(this Rigidbody obj, Func<UnityEngine.CollisionDetectionMode> func)
            => BindCollisionDetectionMode(obj, Bindings2._scope, func);
        public static void BindCollisionDetectionModeInterval(this Rigidbody obj, Bindings2 bindings, float seconds, Func<UnityEngine.CollisionDetectionMode> func)
            => bindings.BindInterval(seconds, () => obj.collisionDetectionMode = func());
        public static void BindCollisionDetectionModeInterval(this Rigidbody obj, float seconds, Func<UnityEngine.CollisionDetectionMode> func)
            => BindCollisionDetectionModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConstraints(this Rigidbody obj, Bindings2 bindings, IProperty<UnityEngine.RigidbodyConstraints> property)
            => bindings.Bind(property, v => obj.constraints = v);
        public static void BindConstraints(this Rigidbody obj, IProperty<UnityEngine.RigidbodyConstraints> property)
            => BindConstraints(obj, Bindings2._scope, property);
        public static void BindConstraints(this Rigidbody obj, Bindings2 bindings, Func<UnityEngine.RigidbodyConstraints> func)
            => bindings.BindUpdate(() => obj.constraints = func());
        public static void BindConstraints(this Rigidbody obj, Func<UnityEngine.RigidbodyConstraints> func)
            => BindConstraints(obj, Bindings2._scope, func);
        public static void BindConstraintsInterval(this Rigidbody obj, Bindings2 bindings, float seconds, Func<UnityEngine.RigidbodyConstraints> func)
            => bindings.BindInterval(seconds, () => obj.constraints = func());
        public static void BindConstraintsInterval(this Rigidbody obj, float seconds, Func<UnityEngine.RigidbodyConstraints> func)
            => BindConstraintsInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindBodyType(this Rigidbody2D obj, Bindings2 bindings, IProperty<UnityEngine.RigidbodyType2D> property)
            => bindings.Bind(property, v => obj.bodyType = v);
        public static void BindBodyType(this Rigidbody2D obj, IProperty<UnityEngine.RigidbodyType2D> property)
            => BindBodyType(obj, Bindings2._scope, property);
        public static void BindBodyType(this Rigidbody2D obj, Bindings2 bindings, Func<UnityEngine.RigidbodyType2D> func)
            => bindings.BindUpdate(() => obj.bodyType = func());
        public static void BindBodyType(this Rigidbody2D obj, Func<UnityEngine.RigidbodyType2D> func)
            => BindBodyType(obj, Bindings2._scope, func);
        public static void BindBodyTypeInterval(this Rigidbody2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.RigidbodyType2D> func)
            => bindings.BindInterval(seconds, () => obj.bodyType = func());
        public static void BindBodyTypeInterval(this Rigidbody2D obj, float seconds, Func<UnityEngine.RigidbodyType2D> func)
            => BindBodyTypeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSimulated(this Rigidbody2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.simulated = v);
        public static void BindSimulated(this Rigidbody2D obj, IProperty<System.Boolean> property)
            => BindSimulated(obj, Bindings2._scope, property);
        public static void BindSimulated(this Rigidbody2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.simulated = func());
        public static void BindSimulated(this Rigidbody2D obj, Func<System.Boolean> func)
            => BindSimulated(obj, Bindings2._scope, func);
        public static void BindSimulatedInterval(this Rigidbody2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.simulated = func());
        public static void BindSimulatedInterval(this Rigidbody2D obj, float seconds, Func<System.Boolean> func)
            => BindSimulatedInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseAutoMass(this Rigidbody2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useAutoMass = v);
        public static void BindUseAutoMass(this Rigidbody2D obj, IProperty<System.Boolean> property)
            => BindUseAutoMass(obj, Bindings2._scope, property);
        public static void BindUseAutoMass(this Rigidbody2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useAutoMass = func());
        public static void BindUseAutoMass(this Rigidbody2D obj, Func<System.Boolean> func)
            => BindUseAutoMass(obj, Bindings2._scope, func);
        public static void BindUseAutoMassInterval(this Rigidbody2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useAutoMass = func());
        public static void BindUseAutoMassInterval(this Rigidbody2D obj, float seconds, Func<System.Boolean> func)
            => BindUseAutoMassInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMass(this Rigidbody2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.mass = v);
        public static void BindMass(this Rigidbody2D obj, IProperty<System.Single> property)
            => BindMass(obj, Bindings2._scope, property);
        public static void BindMass(this Rigidbody2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.mass = func());
        public static void BindMass(this Rigidbody2D obj, Func<System.Single> func)
            => BindMass(obj, Bindings2._scope, func);
        public static void BindMassInterval(this Rigidbody2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.mass = func());
        public static void BindMassInterval(this Rigidbody2D obj, float seconds, Func<System.Single> func)
            => BindMassInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_6000_0_OR_NEWER
        public static void BindDrag(this Rigidbody2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.drag = v);
        public static void BindDrag(this Rigidbody2D obj, IProperty<System.Single> property)
            => BindDrag(obj, Bindings2._scope, property);
        public static void BindDrag(this Rigidbody2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.drag = func());
        public static void BindDrag(this Rigidbody2D obj, Func<System.Single> func)
            => BindDrag(obj, Bindings2._scope, func);
        public static void BindDragInterval(this Rigidbody2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.drag = func());
        public static void BindDragInterval(this Rigidbody2D obj, float seconds, Func<System.Single> func)
            => BindDragInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if !UNITY_6000_0_OR_NEWER
        public static void BindAngularDrag(this Rigidbody2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.angularDrag = v);
        public static void BindAngularDrag(this Rigidbody2D obj, IProperty<System.Single> property)
            => BindAngularDrag(obj, Bindings2._scope, property);
        public static void BindAngularDrag(this Rigidbody2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.angularDrag = func());
        public static void BindAngularDrag(this Rigidbody2D obj, Func<System.Single> func)
            => BindAngularDrag(obj, Bindings2._scope, func);
        public static void BindAngularDragInterval(this Rigidbody2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.angularDrag = func());
        public static void BindAngularDragInterval(this Rigidbody2D obj, float seconds, Func<System.Single> func)
            => BindAngularDragInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_6000_0_OR_NEWER
        public static void BindLinearDamping(this Rigidbody2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.linearDamping = v);
        public static void BindLinearDamping(this Rigidbody2D obj, IProperty<System.Single> property)
            => BindLinearDamping(obj, Bindings2._scope, property);
        public static void BindLinearDamping(this Rigidbody2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.linearDamping = func());
        public static void BindLinearDamping(this Rigidbody2D obj, Func<System.Single> func)
            => BindLinearDamping(obj, Bindings2._scope, func);
        public static void BindLinearDampingInterval(this Rigidbody2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.linearDamping = func());
        public static void BindLinearDampingInterval(this Rigidbody2D obj, float seconds, Func<System.Single> func)
            => BindLinearDampingInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_6000_0_OR_NEWER
        public static void BindAngularDamping(this Rigidbody2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.angularDamping = v);
        public static void BindAngularDamping(this Rigidbody2D obj, IProperty<System.Single> property)
            => BindAngularDamping(obj, Bindings2._scope, property);
        public static void BindAngularDamping(this Rigidbody2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.angularDamping = func());
        public static void BindAngularDamping(this Rigidbody2D obj, Func<System.Single> func)
            => BindAngularDamping(obj, Bindings2._scope, func);
        public static void BindAngularDampingInterval(this Rigidbody2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.angularDamping = func());
        public static void BindAngularDampingInterval(this Rigidbody2D obj, float seconds, Func<System.Single> func)
            => BindAngularDampingInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindGravityScale(this Rigidbody2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.gravityScale = v);
        public static void BindGravityScale(this Rigidbody2D obj, IProperty<System.Single> property)
            => BindGravityScale(obj, Bindings2._scope, property);
        public static void BindGravityScale(this Rigidbody2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.gravityScale = func());
        public static void BindGravityScale(this Rigidbody2D obj, Func<System.Single> func)
            => BindGravityScale(obj, Bindings2._scope, func);
        public static void BindGravityScaleInterval(this Rigidbody2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.gravityScale = func());
        public static void BindGravityScaleInterval(this Rigidbody2D obj, float seconds, Func<System.Single> func)
            => BindGravityScaleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCollisionDetectionMode(this Rigidbody2D obj, Bindings2 bindings, IProperty<UnityEngine.CollisionDetectionMode2D> property)
            => bindings.Bind(property, v => obj.collisionDetectionMode = v);
        public static void BindCollisionDetectionMode(this Rigidbody2D obj, IProperty<UnityEngine.CollisionDetectionMode2D> property)
            => BindCollisionDetectionMode(obj, Bindings2._scope, property);
        public static void BindCollisionDetectionMode(this Rigidbody2D obj, Bindings2 bindings, Func<UnityEngine.CollisionDetectionMode2D> func)
            => bindings.BindUpdate(() => obj.collisionDetectionMode = func());
        public static void BindCollisionDetectionMode(this Rigidbody2D obj, Func<UnityEngine.CollisionDetectionMode2D> func)
            => BindCollisionDetectionMode(obj, Bindings2._scope, func);
        public static void BindCollisionDetectionModeInterval(this Rigidbody2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.CollisionDetectionMode2D> func)
            => bindings.BindInterval(seconds, () => obj.collisionDetectionMode = func());
        public static void BindCollisionDetectionModeInterval(this Rigidbody2D obj, float seconds, Func<UnityEngine.CollisionDetectionMode2D> func)
            => BindCollisionDetectionModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSleepMode(this Rigidbody2D obj, Bindings2 bindings, IProperty<UnityEngine.RigidbodySleepMode2D> property)
            => bindings.Bind(property, v => obj.sleepMode = v);
        public static void BindSleepMode(this Rigidbody2D obj, IProperty<UnityEngine.RigidbodySleepMode2D> property)
            => BindSleepMode(obj, Bindings2._scope, property);
        public static void BindSleepMode(this Rigidbody2D obj, Bindings2 bindings, Func<UnityEngine.RigidbodySleepMode2D> func)
            => bindings.BindUpdate(() => obj.sleepMode = func());
        public static void BindSleepMode(this Rigidbody2D obj, Func<UnityEngine.RigidbodySleepMode2D> func)
            => BindSleepMode(obj, Bindings2._scope, func);
        public static void BindSleepModeInterval(this Rigidbody2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.RigidbodySleepMode2D> func)
            => bindings.BindInterval(seconds, () => obj.sleepMode = func());
        public static void BindSleepModeInterval(this Rigidbody2D obj, float seconds, Func<UnityEngine.RigidbodySleepMode2D> func)
            => BindSleepModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindInterpolation(this Rigidbody2D obj, Bindings2 bindings, IProperty<UnityEngine.RigidbodyInterpolation2D> property)
            => bindings.Bind(property, v => obj.interpolation = v);
        public static void BindInterpolation(this Rigidbody2D obj, IProperty<UnityEngine.RigidbodyInterpolation2D> property)
            => BindInterpolation(obj, Bindings2._scope, property);
        public static void BindInterpolation(this Rigidbody2D obj, Bindings2 bindings, Func<UnityEngine.RigidbodyInterpolation2D> func)
            => bindings.BindUpdate(() => obj.interpolation = func());
        public static void BindInterpolation(this Rigidbody2D obj, Func<UnityEngine.RigidbodyInterpolation2D> func)
            => BindInterpolation(obj, Bindings2._scope, func);
        public static void BindInterpolationInterval(this Rigidbody2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.RigidbodyInterpolation2D> func)
            => bindings.BindInterval(seconds, () => obj.interpolation = func());
        public static void BindInterpolationInterval(this Rigidbody2D obj, float seconds, Func<UnityEngine.RigidbodyInterpolation2D> func)
            => BindInterpolationInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConstraints(this Rigidbody2D obj, Bindings2 bindings, IProperty<UnityEngine.RigidbodyConstraints2D> property)
            => bindings.Bind(property, v => obj.constraints = v);
        public static void BindConstraints(this Rigidbody2D obj, IProperty<UnityEngine.RigidbodyConstraints2D> property)
            => BindConstraints(obj, Bindings2._scope, property);
        public static void BindConstraints(this Rigidbody2D obj, Bindings2 bindings, Func<UnityEngine.RigidbodyConstraints2D> func)
            => bindings.BindUpdate(() => obj.constraints = func());
        public static void BindConstraints(this Rigidbody2D obj, Func<UnityEngine.RigidbodyConstraints2D> func)
            => BindConstraints(obj, Bindings2._scope, func);
        public static void BindConstraintsInterval(this Rigidbody2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.RigidbodyConstraints2D> func)
            => bindings.BindInterval(seconds, () => obj.constraints = func());
        public static void BindConstraintsInterval(this Rigidbody2D obj, float seconds, Func<UnityEngine.RigidbodyConstraints2D> func)
            => BindConstraintsInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_ANIMATION
        public static void BindConstraintActive(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.constraintActive = v);
        public static void BindConstraintActive(this UnityEngine.Animations.RotationConstraint obj, IProperty<System.Boolean> property)
            => BindConstraintActive(obj, Bindings2._scope, property);
        public static void BindConstraintActive(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.constraintActive = func());
        public static void BindConstraintActive(this UnityEngine.Animations.RotationConstraint obj, Func<System.Boolean> func)
            => BindConstraintActive(obj, Bindings2._scope, func);
        public static void BindConstraintActiveInterval(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.constraintActive = func());
        public static void BindConstraintActiveInterval(this UnityEngine.Animations.RotationConstraint obj, float seconds, Func<System.Boolean> func)
            => BindConstraintActiveInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWeight(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.weight = v);
        public static void BindWeight(this UnityEngine.Animations.RotationConstraint obj, IProperty<System.Single> property)
            => BindWeight(obj, Bindings2._scope, property);
        public static void BindWeight(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.weight = func());
        public static void BindWeight(this UnityEngine.Animations.RotationConstraint obj, Func<System.Single> func)
            => BindWeight(obj, Bindings2._scope, func);
        public static void BindWeightInterval(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.weight = func());
        public static void BindWeightInterval(this UnityEngine.Animations.RotationConstraint obj, float seconds, Func<System.Single> func)
            => BindWeightInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLocked(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.locked = v);
        public static void BindLocked(this UnityEngine.Animations.RotationConstraint obj, IProperty<System.Boolean> property)
            => BindLocked(obj, Bindings2._scope, property);
        public static void BindLocked(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.locked = func());
        public static void BindLocked(this UnityEngine.Animations.RotationConstraint obj, Func<System.Boolean> func)
            => BindLocked(obj, Bindings2._scope, func);
        public static void BindLockedInterval(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.locked = func());
        public static void BindLockedInterval(this UnityEngine.Animations.RotationConstraint obj, float seconds, Func<System.Boolean> func)
            => BindLockedInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRotationAtRest(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.rotationAtRest = v);
        public static void BindRotationAtRest(this UnityEngine.Animations.RotationConstraint obj, IProperty<UnityEngine.Vector3> property)
            => BindRotationAtRest(obj, Bindings2._scope, property);
        public static void BindRotationAtRest(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationAtRest = func());
        public static void BindRotationAtRest(this UnityEngine.Animations.RotationConstraint obj, Func<UnityEngine.Vector3> func)
            => BindRotationAtRest(obj, Bindings2._scope, func);
        public static void BindRotationAtRestInterval(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.rotationAtRest = func());
        public static void BindRotationAtRestInterval(this UnityEngine.Animations.RotationConstraint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindRotationAtRestInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRotationAtRestLerp(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.rotationAtRest = Vector3.Lerp(obj.rotationAtRest, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRotationAtRestLerp(this UnityEngine.Animations.RotationConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRotationAtRestLerp(obj, Bindings2._scope, speed, property);
        public static void BindRotationAtRestLerp(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationAtRest = Vector3.Lerp(obj.rotationAtRest, func(), speed * Time.smoothDeltaTime));
        public static void BindRotationAtRestLerp(this UnityEngine.Animations.RotationConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRotationAtRestLerp(obj, Bindings2._scope, speed, func);
        public static void BindRotationAtRestTowards(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.rotationAtRest = Vector3.MoveTowards(obj.rotationAtRest, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRotationAtRestTowards(this UnityEngine.Animations.RotationConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRotationAtRestTowards(obj, Bindings2._scope, speed, property);
        public static void BindRotationAtRestTowards(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationAtRest = Vector3.MoveTowards(obj.rotationAtRest, func(), speed * Time.smoothDeltaTime));
        public static void BindRotationAtRestTowards(this UnityEngine.Animations.RotationConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRotationAtRestTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateRotationAtRest(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.rotationAtRest = Vector3.Lerp(start, end, t));
        public static void AnimateRotationAtRest(this UnityEngine.Animations.RotationConstraint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationAtRest(obj, Bindings2._scope, start, end, curve);
        public static void AnimateRotationAtRest(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationAtRest(obj, Bindings2._scope, obj.rotationAtRest, end, curve);
        public static void AnimateRotationAtRest(this UnityEngine.Animations.RotationConstraint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationAtRest(obj, Bindings2._scope, end, curve);
        public static void BindRotationOffset(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.rotationOffset = v);
        public static void BindRotationOffset(this UnityEngine.Animations.RotationConstraint obj, IProperty<UnityEngine.Vector3> property)
            => BindRotationOffset(obj, Bindings2._scope, property);
        public static void BindRotationOffset(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationOffset = func());
        public static void BindRotationOffset(this UnityEngine.Animations.RotationConstraint obj, Func<UnityEngine.Vector3> func)
            => BindRotationOffset(obj, Bindings2._scope, func);
        public static void BindRotationOffsetInterval(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.rotationOffset = func());
        public static void BindRotationOffsetInterval(this UnityEngine.Animations.RotationConstraint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindRotationOffsetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRotationOffsetLerp(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.rotationOffset = Vector3.Lerp(obj.rotationOffset, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRotationOffsetLerp(this UnityEngine.Animations.RotationConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRotationOffsetLerp(obj, Bindings2._scope, speed, property);
        public static void BindRotationOffsetLerp(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationOffset = Vector3.Lerp(obj.rotationOffset, func(), speed * Time.smoothDeltaTime));
        public static void BindRotationOffsetLerp(this UnityEngine.Animations.RotationConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRotationOffsetLerp(obj, Bindings2._scope, speed, func);
        public static void BindRotationOffsetTowards(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.rotationOffset = Vector3.MoveTowards(obj.rotationOffset, property.Value, speed * Time.smoothDeltaTime));
        public static void BindRotationOffsetTowards(this UnityEngine.Animations.RotationConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindRotationOffsetTowards(obj, Bindings2._scope, speed, property);
        public static void BindRotationOffsetTowards(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.rotationOffset = Vector3.MoveTowards(obj.rotationOffset, func(), speed * Time.smoothDeltaTime));
        public static void BindRotationOffsetTowards(this UnityEngine.Animations.RotationConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindRotationOffsetTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateRotationOffset(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.rotationOffset = Vector3.Lerp(start, end, t));
        public static void AnimateRotationOffset(this UnityEngine.Animations.RotationConstraint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationOffset(obj, Bindings2._scope, start, end, curve);
        public static void AnimateRotationOffset(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationOffset(obj, Bindings2._scope, obj.rotationOffset, end, curve);
        public static void AnimateRotationOffset(this UnityEngine.Animations.RotationConstraint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateRotationOffset(obj, Bindings2._scope, end, curve);
        public static void BindRotationAxis(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Animations.Axis> property)
            => bindings.Bind(property, v => obj.rotationAxis = v);
        public static void BindRotationAxis(this UnityEngine.Animations.RotationConstraint obj, IProperty<UnityEngine.Animations.Axis> property)
            => BindRotationAxis(obj, Bindings2._scope, property);
        public static void BindRotationAxis(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, Func<UnityEngine.Animations.Axis> func)
            => bindings.BindUpdate(() => obj.rotationAxis = func());
        public static void BindRotationAxis(this UnityEngine.Animations.RotationConstraint obj, Func<UnityEngine.Animations.Axis> func)
            => BindRotationAxis(obj, Bindings2._scope, func);
        public static void BindRotationAxisInterval(this UnityEngine.Animations.RotationConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Animations.Axis> func)
            => bindings.BindInterval(seconds, () => obj.rotationAxis = func());
        public static void BindRotationAxisInterval(this UnityEngine.Animations.RotationConstraint obj, float seconds, Func<UnityEngine.Animations.Axis> func)
            => BindRotationAxisInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_ANIMATION
        public static void BindConstraintActive(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.constraintActive = v);
        public static void BindConstraintActive(this UnityEngine.Animations.ScaleConstraint obj, IProperty<System.Boolean> property)
            => BindConstraintActive(obj, Bindings2._scope, property);
        public static void BindConstraintActive(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.constraintActive = func());
        public static void BindConstraintActive(this UnityEngine.Animations.ScaleConstraint obj, Func<System.Boolean> func)
            => BindConstraintActive(obj, Bindings2._scope, func);
        public static void BindConstraintActiveInterval(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.constraintActive = func());
        public static void BindConstraintActiveInterval(this UnityEngine.Animations.ScaleConstraint obj, float seconds, Func<System.Boolean> func)
            => BindConstraintActiveInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWeight(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.weight = v);
        public static void BindWeight(this UnityEngine.Animations.ScaleConstraint obj, IProperty<System.Single> property)
            => BindWeight(obj, Bindings2._scope, property);
        public static void BindWeight(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.weight = func());
        public static void BindWeight(this UnityEngine.Animations.ScaleConstraint obj, Func<System.Single> func)
            => BindWeight(obj, Bindings2._scope, func);
        public static void BindWeightInterval(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.weight = func());
        public static void BindWeightInterval(this UnityEngine.Animations.ScaleConstraint obj, float seconds, Func<System.Single> func)
            => BindWeightInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLocked(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.locked = v);
        public static void BindLocked(this UnityEngine.Animations.ScaleConstraint obj, IProperty<System.Boolean> property)
            => BindLocked(obj, Bindings2._scope, property);
        public static void BindLocked(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.locked = func());
        public static void BindLocked(this UnityEngine.Animations.ScaleConstraint obj, Func<System.Boolean> func)
            => BindLocked(obj, Bindings2._scope, func);
        public static void BindLockedInterval(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.locked = func());
        public static void BindLockedInterval(this UnityEngine.Animations.ScaleConstraint obj, float seconds, Func<System.Boolean> func)
            => BindLockedInterval(obj, Bindings2._scope, seconds, func);
        public static void BindScaleAtRest(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.scaleAtRest = v);
        public static void BindScaleAtRest(this UnityEngine.Animations.ScaleConstraint obj, IProperty<UnityEngine.Vector3> property)
            => BindScaleAtRest(obj, Bindings2._scope, property);
        public static void BindScaleAtRest(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.scaleAtRest = func());
        public static void BindScaleAtRest(this UnityEngine.Animations.ScaleConstraint obj, Func<UnityEngine.Vector3> func)
            => BindScaleAtRest(obj, Bindings2._scope, func);
        public static void BindScaleAtRestInterval(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.scaleAtRest = func());
        public static void BindScaleAtRestInterval(this UnityEngine.Animations.ScaleConstraint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindScaleAtRestInterval(obj, Bindings2._scope, seconds, func);
        public static void BindScaleAtRestLerp(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.scaleAtRest = Vector3.Lerp(obj.scaleAtRest, property.Value, speed * Time.smoothDeltaTime));
        public static void BindScaleAtRestLerp(this UnityEngine.Animations.ScaleConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindScaleAtRestLerp(obj, Bindings2._scope, speed, property);
        public static void BindScaleAtRestLerp(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.scaleAtRest = Vector3.Lerp(obj.scaleAtRest, func(), speed * Time.smoothDeltaTime));
        public static void BindScaleAtRestLerp(this UnityEngine.Animations.ScaleConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindScaleAtRestLerp(obj, Bindings2._scope, speed, func);
        public static void BindScaleAtRestTowards(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.scaleAtRest = Vector3.MoveTowards(obj.scaleAtRest, property.Value, speed * Time.smoothDeltaTime));
        public static void BindScaleAtRestTowards(this UnityEngine.Animations.ScaleConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindScaleAtRestTowards(obj, Bindings2._scope, speed, property);
        public static void BindScaleAtRestTowards(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.scaleAtRest = Vector3.MoveTowards(obj.scaleAtRest, func(), speed * Time.smoothDeltaTime));
        public static void BindScaleAtRestTowards(this UnityEngine.Animations.ScaleConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindScaleAtRestTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateScaleAtRest(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.scaleAtRest = Vector3.Lerp(start, end, t));
        public static void AnimateScaleAtRest(this UnityEngine.Animations.ScaleConstraint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateScaleAtRest(obj, Bindings2._scope, start, end, curve);
        public static void AnimateScaleAtRest(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateScaleAtRest(obj, Bindings2._scope, obj.scaleAtRest, end, curve);
        public static void AnimateScaleAtRest(this UnityEngine.Animations.ScaleConstraint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateScaleAtRest(obj, Bindings2._scope, end, curve);
        public static void BindScaleOffset(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.scaleOffset = v);
        public static void BindScaleOffset(this UnityEngine.Animations.ScaleConstraint obj, IProperty<UnityEngine.Vector3> property)
            => BindScaleOffset(obj, Bindings2._scope, property);
        public static void BindScaleOffset(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.scaleOffset = func());
        public static void BindScaleOffset(this UnityEngine.Animations.ScaleConstraint obj, Func<UnityEngine.Vector3> func)
            => BindScaleOffset(obj, Bindings2._scope, func);
        public static void BindScaleOffsetInterval(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.scaleOffset = func());
        public static void BindScaleOffsetInterval(this UnityEngine.Animations.ScaleConstraint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindScaleOffsetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindScaleOffsetLerp(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.scaleOffset = Vector3.Lerp(obj.scaleOffset, property.Value, speed * Time.smoothDeltaTime));
        public static void BindScaleOffsetLerp(this UnityEngine.Animations.ScaleConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindScaleOffsetLerp(obj, Bindings2._scope, speed, property);
        public static void BindScaleOffsetLerp(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.scaleOffset = Vector3.Lerp(obj.scaleOffset, func(), speed * Time.smoothDeltaTime));
        public static void BindScaleOffsetLerp(this UnityEngine.Animations.ScaleConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindScaleOffsetLerp(obj, Bindings2._scope, speed, func);
        public static void BindScaleOffsetTowards(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.scaleOffset = Vector3.MoveTowards(obj.scaleOffset, property.Value, speed * Time.smoothDeltaTime));
        public static void BindScaleOffsetTowards(this UnityEngine.Animations.ScaleConstraint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindScaleOffsetTowards(obj, Bindings2._scope, speed, property);
        public static void BindScaleOffsetTowards(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.scaleOffset = Vector3.MoveTowards(obj.scaleOffset, func(), speed * Time.smoothDeltaTime));
        public static void BindScaleOffsetTowards(this UnityEngine.Animations.ScaleConstraint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindScaleOffsetTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateScaleOffset(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.scaleOffset = Vector3.Lerp(start, end, t));
        public static void AnimateScaleOffset(this UnityEngine.Animations.ScaleConstraint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateScaleOffset(obj, Bindings2._scope, start, end, curve);
        public static void AnimateScaleOffset(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateScaleOffset(obj, Bindings2._scope, obj.scaleOffset, end, curve);
        public static void AnimateScaleOffset(this UnityEngine.Animations.ScaleConstraint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateScaleOffset(obj, Bindings2._scope, end, curve);
        public static void BindScalingAxis(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, IProperty<UnityEngine.Animations.Axis> property)
            => bindings.Bind(property, v => obj.scalingAxis = v);
        public static void BindScalingAxis(this UnityEngine.Animations.ScaleConstraint obj, IProperty<UnityEngine.Animations.Axis> property)
            => BindScalingAxis(obj, Bindings2._scope, property);
        public static void BindScalingAxis(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, Func<UnityEngine.Animations.Axis> func)
            => bindings.BindUpdate(() => obj.scalingAxis = func());
        public static void BindScalingAxis(this UnityEngine.Animations.ScaleConstraint obj, Func<UnityEngine.Animations.Axis> func)
            => BindScalingAxis(obj, Bindings2._scope, func);
        public static void BindScalingAxisInterval(this UnityEngine.Animations.ScaleConstraint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Animations.Axis> func)
            => bindings.BindInterval(seconds, () => obj.scalingAxis = func());
        public static void BindScalingAxisInterval(this UnityEngine.Animations.ScaleConstraint obj, float seconds, Func<UnityEngine.Animations.Axis> func)
            => BindScalingAxisInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindInteractable(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.interactable = v);
        public static void BindInteractable(this UnityEngine.UI.Scrollbar obj, IProperty<System.Boolean> property)
            => BindInteractable(obj, Bindings2._scope, property);
        public static void BindInteractable(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.interactable = func());
        public static void BindInteractable(this UnityEngine.UI.Scrollbar obj, Func<System.Boolean> func)
            => BindInteractable(obj, Bindings2._scope, func);
        public static void BindInteractableInterval(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.interactable = func());
        public static void BindInteractableInterval(this UnityEngine.UI.Scrollbar obj, float seconds, Func<System.Boolean> func)
            => BindInteractableInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTransition(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, IProperty<UnityEngine.UI.Selectable.Transition> property)
            => bindings.Bind(property, v => obj.transition = v);
        public static void BindTransition(this UnityEngine.UI.Scrollbar obj, IProperty<UnityEngine.UI.Selectable.Transition> property)
            => BindTransition(obj, Bindings2._scope, property);
        public static void BindTransition(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, Func<UnityEngine.UI.Selectable.Transition> func)
            => bindings.BindUpdate(() => obj.transition = func());
        public static void BindTransition(this UnityEngine.UI.Scrollbar obj, Func<UnityEngine.UI.Selectable.Transition> func)
            => BindTransition(obj, Bindings2._scope, func);
        public static void BindTransitionInterval(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Selectable.Transition> func)
            => bindings.BindInterval(seconds, () => obj.transition = func());
        public static void BindTransitionInterval(this UnityEngine.UI.Scrollbar obj, float seconds, Func<UnityEngine.UI.Selectable.Transition> func)
            => BindTransitionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetGraphic(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, IProperty<UnityEngine.UI.Graphic> property)
            => bindings.Bind(property, v => obj.targetGraphic = v);
        public static void BindTargetGraphic(this UnityEngine.UI.Scrollbar obj, IProperty<UnityEngine.UI.Graphic> property)
            => BindTargetGraphic(obj, Bindings2._scope, property);
        public static void BindTargetGraphic(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindUpdate(() => obj.targetGraphic = func());
        public static void BindTargetGraphic(this UnityEngine.UI.Scrollbar obj, Func<UnityEngine.UI.Graphic> func)
            => BindTargetGraphic(obj, Bindings2._scope, func);
        public static void BindTargetGraphicInterval(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindInterval(seconds, () => obj.targetGraphic = func());
        public static void BindTargetGraphicInterval(this UnityEngine.UI.Scrollbar obj, float seconds, Func<UnityEngine.UI.Graphic> func)
            => BindTargetGraphicInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColors(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, IProperty<UnityEngine.UI.ColorBlock> property)
            => bindings.Bind(property, v => obj.colors = v);
        public static void BindColors(this UnityEngine.UI.Scrollbar obj, IProperty<UnityEngine.UI.ColorBlock> property)
            => BindColors(obj, Bindings2._scope, property);
        public static void BindColors(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, Func<UnityEngine.UI.ColorBlock> func)
            => bindings.BindUpdate(() => obj.colors = func());
        public static void BindColors(this UnityEngine.UI.Scrollbar obj, Func<UnityEngine.UI.ColorBlock> func)
            => BindColors(obj, Bindings2._scope, func);
        public static void BindColorsInterval(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.ColorBlock> func)
            => bindings.BindInterval(seconds, () => obj.colors = func());
        public static void BindColorsInterval(this UnityEngine.UI.Scrollbar obj, float seconds, Func<UnityEngine.UI.ColorBlock> func)
            => BindColorsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindNavigation(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, IProperty<UnityEngine.UI.Navigation> property)
            => bindings.Bind(property, v => obj.navigation = v);
        public static void BindNavigation(this UnityEngine.UI.Scrollbar obj, IProperty<UnityEngine.UI.Navigation> property)
            => BindNavigation(obj, Bindings2._scope, property);
        public static void BindNavigation(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, Func<UnityEngine.UI.Navigation> func)
            => bindings.BindUpdate(() => obj.navigation = func());
        public static void BindNavigation(this UnityEngine.UI.Scrollbar obj, Func<UnityEngine.UI.Navigation> func)
            => BindNavigation(obj, Bindings2._scope, func);
        public static void BindNavigationInterval(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Navigation> func)
            => bindings.BindInterval(seconds, () => obj.navigation = func());
        public static void BindNavigationInterval(this UnityEngine.UI.Scrollbar obj, float seconds, Func<UnityEngine.UI.Navigation> func)
            => BindNavigationInterval(obj, Bindings2._scope, seconds, func);
        public static void BindHandleRect(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, IProperty<UnityEngine.RectTransform> property)
            => bindings.Bind(property, v => obj.handleRect = v);
        public static void BindHandleRect(this UnityEngine.UI.Scrollbar obj, IProperty<UnityEngine.RectTransform> property)
            => BindHandleRect(obj, Bindings2._scope, property);
        public static void BindHandleRect(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, Func<UnityEngine.RectTransform> func)
            => bindings.BindUpdate(() => obj.handleRect = func());
        public static void BindHandleRect(this UnityEngine.UI.Scrollbar obj, Func<UnityEngine.RectTransform> func)
            => BindHandleRect(obj, Bindings2._scope, func);
        public static void BindHandleRectInterval(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, float seconds, Func<UnityEngine.RectTransform> func)
            => bindings.BindInterval(seconds, () => obj.handleRect = func());
        public static void BindHandleRectInterval(this UnityEngine.UI.Scrollbar obj, float seconds, Func<UnityEngine.RectTransform> func)
            => BindHandleRectInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDirection(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, IProperty<UnityEngine.UI.Scrollbar.Direction> property)
            => bindings.Bind(property, v => obj.direction = v);
        public static void BindDirection(this UnityEngine.UI.Scrollbar obj, IProperty<UnityEngine.UI.Scrollbar.Direction> property)
            => BindDirection(obj, Bindings2._scope, property);
        public static void BindDirection(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, Func<UnityEngine.UI.Scrollbar.Direction> func)
            => bindings.BindUpdate(() => obj.direction = func());
        public static void BindDirection(this UnityEngine.UI.Scrollbar obj, Func<UnityEngine.UI.Scrollbar.Direction> func)
            => BindDirection(obj, Bindings2._scope, func);
        public static void BindDirectionInterval(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Scrollbar.Direction> func)
            => bindings.BindInterval(seconds, () => obj.direction = func());
        public static void BindDirectionInterval(this UnityEngine.UI.Scrollbar obj, float seconds, Func<UnityEngine.UI.Scrollbar.Direction> func)
            => BindDirectionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindValue(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.value = v);
        public static void BindValue(this UnityEngine.UI.Scrollbar obj, IProperty<System.Single> property)
            => BindValue(obj, Bindings2._scope, property);
        public static void BindValue(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.value = func());
        public static void BindValue(this UnityEngine.UI.Scrollbar obj, Func<System.Single> func)
            => BindValue(obj, Bindings2._scope, func);
        public static void BindValueInterval(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.value = func());
        public static void BindValueInterval(this UnityEngine.UI.Scrollbar obj, float seconds, Func<System.Single> func)
            => BindValueInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSize(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.size = v);
        public static void BindSize(this UnityEngine.UI.Scrollbar obj, IProperty<System.Single> property)
            => BindSize(obj, Bindings2._scope, property);
        public static void BindSize(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.size = func());
        public static void BindSize(this UnityEngine.UI.Scrollbar obj, Func<System.Single> func)
            => BindSize(obj, Bindings2._scope, func);
        public static void BindSizeInterval(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.size = func());
        public static void BindSizeInterval(this UnityEngine.UI.Scrollbar obj, float seconds, Func<System.Single> func)
            => BindSizeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindNumberOfSteps(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.numberOfSteps = v);
        public static void BindNumberOfSteps(this UnityEngine.UI.Scrollbar obj, IProperty<System.Int32> property)
            => BindNumberOfSteps(obj, Bindings2._scope, property);
        public static void BindNumberOfSteps(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.numberOfSteps = func());
        public static void BindNumberOfSteps(this UnityEngine.UI.Scrollbar obj, Func<System.Int32> func)
            => BindNumberOfSteps(obj, Bindings2._scope, func);
        public static void BindNumberOfStepsInterval(this UnityEngine.UI.Scrollbar obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.numberOfSteps = func());
        public static void BindNumberOfStepsInterval(this UnityEngine.UI.Scrollbar obj, float seconds, Func<System.Int32> func)
            => BindNumberOfStepsInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindContent(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, IProperty<UnityEngine.RectTransform> property)
            => bindings.Bind(property, v => obj.content = v);
        public static void BindContent(this UnityEngine.UI.ScrollRect obj, IProperty<UnityEngine.RectTransform> property)
            => BindContent(obj, Bindings2._scope, property);
        public static void BindContent(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, Func<UnityEngine.RectTransform> func)
            => bindings.BindUpdate(() => obj.content = func());
        public static void BindContent(this UnityEngine.UI.ScrollRect obj, Func<UnityEngine.RectTransform> func)
            => BindContent(obj, Bindings2._scope, func);
        public static void BindContentInterval(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, float seconds, Func<UnityEngine.RectTransform> func)
            => bindings.BindInterval(seconds, () => obj.content = func());
        public static void BindContentInterval(this UnityEngine.UI.ScrollRect obj, float seconds, Func<UnityEngine.RectTransform> func)
            => BindContentInterval(obj, Bindings2._scope, seconds, func);
        public static void BindHorizontal(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.horizontal = v);
        public static void BindHorizontal(this UnityEngine.UI.ScrollRect obj, IProperty<System.Boolean> property)
            => BindHorizontal(obj, Bindings2._scope, property);
        public static void BindHorizontal(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.horizontal = func());
        public static void BindHorizontal(this UnityEngine.UI.ScrollRect obj, Func<System.Boolean> func)
            => BindHorizontal(obj, Bindings2._scope, func);
        public static void BindHorizontalInterval(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.horizontal = func());
        public static void BindHorizontalInterval(this UnityEngine.UI.ScrollRect obj, float seconds, Func<System.Boolean> func)
            => BindHorizontalInterval(obj, Bindings2._scope, seconds, func);
        public static void BindVertical(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.vertical = v);
        public static void BindVertical(this UnityEngine.UI.ScrollRect obj, IProperty<System.Boolean> property)
            => BindVertical(obj, Bindings2._scope, property);
        public static void BindVertical(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.vertical = func());
        public static void BindVertical(this UnityEngine.UI.ScrollRect obj, Func<System.Boolean> func)
            => BindVertical(obj, Bindings2._scope, func);
        public static void BindVerticalInterval(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.vertical = func());
        public static void BindVerticalInterval(this UnityEngine.UI.ScrollRect obj, float seconds, Func<System.Boolean> func)
            => BindVerticalInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMovementType(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, IProperty<UnityEngine.UI.ScrollRect.MovementType> property)
            => bindings.Bind(property, v => obj.movementType = v);
        public static void BindMovementType(this UnityEngine.UI.ScrollRect obj, IProperty<UnityEngine.UI.ScrollRect.MovementType> property)
            => BindMovementType(obj, Bindings2._scope, property);
        public static void BindMovementType(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, Func<UnityEngine.UI.ScrollRect.MovementType> func)
            => bindings.BindUpdate(() => obj.movementType = func());
        public static void BindMovementType(this UnityEngine.UI.ScrollRect obj, Func<UnityEngine.UI.ScrollRect.MovementType> func)
            => BindMovementType(obj, Bindings2._scope, func);
        public static void BindMovementTypeInterval(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.ScrollRect.MovementType> func)
            => bindings.BindInterval(seconds, () => obj.movementType = func());
        public static void BindMovementTypeInterval(this UnityEngine.UI.ScrollRect obj, float seconds, Func<UnityEngine.UI.ScrollRect.MovementType> func)
            => BindMovementTypeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindElasticity(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.elasticity = v);
        public static void BindElasticity(this UnityEngine.UI.ScrollRect obj, IProperty<System.Single> property)
            => BindElasticity(obj, Bindings2._scope, property);
        public static void BindElasticity(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.elasticity = func());
        public static void BindElasticity(this UnityEngine.UI.ScrollRect obj, Func<System.Single> func)
            => BindElasticity(obj, Bindings2._scope, func);
        public static void BindElasticityInterval(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.elasticity = func());
        public static void BindElasticityInterval(this UnityEngine.UI.ScrollRect obj, float seconds, Func<System.Single> func)
            => BindElasticityInterval(obj, Bindings2._scope, seconds, func);
        public static void BindInertia(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.inertia = v);
        public static void BindInertia(this UnityEngine.UI.ScrollRect obj, IProperty<System.Boolean> property)
            => BindInertia(obj, Bindings2._scope, property);
        public static void BindInertia(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.inertia = func());
        public static void BindInertia(this UnityEngine.UI.ScrollRect obj, Func<System.Boolean> func)
            => BindInertia(obj, Bindings2._scope, func);
        public static void BindInertiaInterval(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.inertia = func());
        public static void BindInertiaInterval(this UnityEngine.UI.ScrollRect obj, float seconds, Func<System.Boolean> func)
            => BindInertiaInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDecelerationRate(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.decelerationRate = v);
        public static void BindDecelerationRate(this UnityEngine.UI.ScrollRect obj, IProperty<System.Single> property)
            => BindDecelerationRate(obj, Bindings2._scope, property);
        public static void BindDecelerationRate(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.decelerationRate = func());
        public static void BindDecelerationRate(this UnityEngine.UI.ScrollRect obj, Func<System.Single> func)
            => BindDecelerationRate(obj, Bindings2._scope, func);
        public static void BindDecelerationRateInterval(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.decelerationRate = func());
        public static void BindDecelerationRateInterval(this UnityEngine.UI.ScrollRect obj, float seconds, Func<System.Single> func)
            => BindDecelerationRateInterval(obj, Bindings2._scope, seconds, func);
        public static void BindScrollSensitivity(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.scrollSensitivity = v);
        public static void BindScrollSensitivity(this UnityEngine.UI.ScrollRect obj, IProperty<System.Single> property)
            => BindScrollSensitivity(obj, Bindings2._scope, property);
        public static void BindScrollSensitivity(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.scrollSensitivity = func());
        public static void BindScrollSensitivity(this UnityEngine.UI.ScrollRect obj, Func<System.Single> func)
            => BindScrollSensitivity(obj, Bindings2._scope, func);
        public static void BindScrollSensitivityInterval(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.scrollSensitivity = func());
        public static void BindScrollSensitivityInterval(this UnityEngine.UI.ScrollRect obj, float seconds, Func<System.Single> func)
            => BindScrollSensitivityInterval(obj, Bindings2._scope, seconds, func);
        public static void BindViewport(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, IProperty<UnityEngine.RectTransform> property)
            => bindings.Bind(property, v => obj.viewport = v);
        public static void BindViewport(this UnityEngine.UI.ScrollRect obj, IProperty<UnityEngine.RectTransform> property)
            => BindViewport(obj, Bindings2._scope, property);
        public static void BindViewport(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, Func<UnityEngine.RectTransform> func)
            => bindings.BindUpdate(() => obj.viewport = func());
        public static void BindViewport(this UnityEngine.UI.ScrollRect obj, Func<UnityEngine.RectTransform> func)
            => BindViewport(obj, Bindings2._scope, func);
        public static void BindViewportInterval(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, float seconds, Func<UnityEngine.RectTransform> func)
            => bindings.BindInterval(seconds, () => obj.viewport = func());
        public static void BindViewportInterval(this UnityEngine.UI.ScrollRect obj, float seconds, Func<UnityEngine.RectTransform> func)
            => BindViewportInterval(obj, Bindings2._scope, seconds, func);
        public static void BindHorizontalScrollbar(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, IProperty<UnityEngine.UI.Scrollbar> property)
            => bindings.Bind(property, v => obj.horizontalScrollbar = v);
        public static void BindHorizontalScrollbar(this UnityEngine.UI.ScrollRect obj, IProperty<UnityEngine.UI.Scrollbar> property)
            => BindHorizontalScrollbar(obj, Bindings2._scope, property);
        public static void BindHorizontalScrollbar(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, Func<UnityEngine.UI.Scrollbar> func)
            => bindings.BindUpdate(() => obj.horizontalScrollbar = func());
        public static void BindHorizontalScrollbar(this UnityEngine.UI.ScrollRect obj, Func<UnityEngine.UI.Scrollbar> func)
            => BindHorizontalScrollbar(obj, Bindings2._scope, func);
        public static void BindHorizontalScrollbarInterval(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Scrollbar> func)
            => bindings.BindInterval(seconds, () => obj.horizontalScrollbar = func());
        public static void BindHorizontalScrollbarInterval(this UnityEngine.UI.ScrollRect obj, float seconds, Func<UnityEngine.UI.Scrollbar> func)
            => BindHorizontalScrollbarInterval(obj, Bindings2._scope, seconds, func);
        public static void BindVerticalScrollbar(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, IProperty<UnityEngine.UI.Scrollbar> property)
            => bindings.Bind(property, v => obj.verticalScrollbar = v);
        public static void BindVerticalScrollbar(this UnityEngine.UI.ScrollRect obj, IProperty<UnityEngine.UI.Scrollbar> property)
            => BindVerticalScrollbar(obj, Bindings2._scope, property);
        public static void BindVerticalScrollbar(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, Func<UnityEngine.UI.Scrollbar> func)
            => bindings.BindUpdate(() => obj.verticalScrollbar = func());
        public static void BindVerticalScrollbar(this UnityEngine.UI.ScrollRect obj, Func<UnityEngine.UI.Scrollbar> func)
            => BindVerticalScrollbar(obj, Bindings2._scope, func);
        public static void BindVerticalScrollbarInterval(this UnityEngine.UI.ScrollRect obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Scrollbar> func)
            => bindings.BindInterval(seconds, () => obj.verticalScrollbar = func());
        public static void BindVerticalScrollbarInterval(this UnityEngine.UI.ScrollRect obj, float seconds, Func<UnityEngine.UI.Scrollbar> func)
            => BindVerticalScrollbarInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindEffectColor(this UnityEngine.UI.Shadow obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.effectColor = v);
        public static void BindEffectColor(this UnityEngine.UI.Shadow obj, IProperty<UnityEngine.Color> property)
            => BindEffectColor(obj, Bindings2._scope, property);
        public static void BindEffectColor(this UnityEngine.UI.Shadow obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.effectColor = func());
        public static void BindEffectColor(this UnityEngine.UI.Shadow obj, Func<UnityEngine.Color> func)
            => BindEffectColor(obj, Bindings2._scope, func);
        public static void BindEffectColorInterval(this UnityEngine.UI.Shadow obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.effectColor = func());
        public static void BindEffectColorInterval(this UnityEngine.UI.Shadow obj, float seconds, Func<UnityEngine.Color> func)
            => BindEffectColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEffectDistance(this UnityEngine.UI.Shadow obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.effectDistance = v);
        public static void BindEffectDistance(this UnityEngine.UI.Shadow obj, IProperty<UnityEngine.Vector2> property)
            => BindEffectDistance(obj, Bindings2._scope, property);
        public static void BindEffectDistance(this UnityEngine.UI.Shadow obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.effectDistance = func());
        public static void BindEffectDistance(this UnityEngine.UI.Shadow obj, Func<UnityEngine.Vector2> func)
            => BindEffectDistance(obj, Bindings2._scope, func);
        public static void BindEffectDistanceInterval(this UnityEngine.UI.Shadow obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.effectDistance = func());
        public static void BindEffectDistanceInterval(this UnityEngine.UI.Shadow obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindEffectDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseGraphicAlpha(this UnityEngine.UI.Shadow obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useGraphicAlpha = v);
        public static void BindUseGraphicAlpha(this UnityEngine.UI.Shadow obj, IProperty<System.Boolean> property)
            => BindUseGraphicAlpha(obj, Bindings2._scope, property);
        public static void BindUseGraphicAlpha(this UnityEngine.UI.Shadow obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useGraphicAlpha = func());
        public static void BindUseGraphicAlpha(this UnityEngine.UI.Shadow obj, Func<System.Boolean> func)
            => BindUseGraphicAlpha(obj, Bindings2._scope, func);
        public static void BindUseGraphicAlphaInterval(this UnityEngine.UI.Shadow obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useGraphicAlpha = func());
        public static void BindUseGraphicAlphaInterval(this UnityEngine.UI.Shadow obj, float seconds, Func<System.Boolean> func)
            => BindUseGraphicAlphaInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_2021_2_OR_NEWER
        public static void BindBounds(this SkinnedMeshRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Bounds> property)
            => bindings.Bind(property, v => obj.bounds = v);
        public static void BindBounds(this SkinnedMeshRenderer obj, IProperty<UnityEngine.Bounds> property)
            => BindBounds(obj, Bindings2._scope, property);
        public static void BindBounds(this SkinnedMeshRenderer obj, Bindings2 bindings, Func<UnityEngine.Bounds> func)
            => bindings.BindUpdate(() => obj.bounds = func());
        public static void BindBounds(this SkinnedMeshRenderer obj, Func<UnityEngine.Bounds> func)
            => BindBounds(obj, Bindings2._scope, func);
        public static void BindBoundsInterval(this SkinnedMeshRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Bounds> func)
            => bindings.BindInterval(seconds, () => obj.bounds = func());
        public static void BindBoundsInterval(this SkinnedMeshRenderer obj, float seconds, Func<UnityEngine.Bounds> func)
            => BindBoundsInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindQuality(this SkinnedMeshRenderer obj, Bindings2 bindings, IProperty<UnityEngine.SkinQuality> property)
            => bindings.Bind(property, v => obj.quality = v);
        public static void BindQuality(this SkinnedMeshRenderer obj, IProperty<UnityEngine.SkinQuality> property)
            => BindQuality(obj, Bindings2._scope, property);
        public static void BindQuality(this SkinnedMeshRenderer obj, Bindings2 bindings, Func<UnityEngine.SkinQuality> func)
            => bindings.BindUpdate(() => obj.quality = func());
        public static void BindQuality(this SkinnedMeshRenderer obj, Func<UnityEngine.SkinQuality> func)
            => BindQuality(obj, Bindings2._scope, func);
        public static void BindQualityInterval(this SkinnedMeshRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.SkinQuality> func)
            => bindings.BindInterval(seconds, () => obj.quality = func());
        public static void BindQualityInterval(this SkinnedMeshRenderer obj, float seconds, Func<UnityEngine.SkinQuality> func)
            => BindQualityInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUpdateWhenOffscreen(this SkinnedMeshRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.updateWhenOffscreen = v);
        public static void BindUpdateWhenOffscreen(this SkinnedMeshRenderer obj, IProperty<System.Boolean> property)
            => BindUpdateWhenOffscreen(obj, Bindings2._scope, property);
        public static void BindUpdateWhenOffscreen(this SkinnedMeshRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.updateWhenOffscreen = func());
        public static void BindUpdateWhenOffscreen(this SkinnedMeshRenderer obj, Func<System.Boolean> func)
            => BindUpdateWhenOffscreen(obj, Bindings2._scope, func);
        public static void BindUpdateWhenOffscreenInterval(this SkinnedMeshRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.updateWhenOffscreen = func());
        public static void BindUpdateWhenOffscreenInterval(this SkinnedMeshRenderer obj, float seconds, Func<System.Boolean> func)
            => BindUpdateWhenOffscreenInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSharedMesh(this SkinnedMeshRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Mesh> property)
            => bindings.Bind(property, v => obj.sharedMesh = v);
        public static void BindSharedMesh(this SkinnedMeshRenderer obj, IProperty<UnityEngine.Mesh> property)
            => BindSharedMesh(obj, Bindings2._scope, property);
        public static void BindSharedMesh(this SkinnedMeshRenderer obj, Bindings2 bindings, Func<UnityEngine.Mesh> func)
            => bindings.BindUpdate(() => obj.sharedMesh = func());
        public static void BindSharedMesh(this SkinnedMeshRenderer obj, Func<UnityEngine.Mesh> func)
            => BindSharedMesh(obj, Bindings2._scope, func);
        public static void BindSharedMeshInterval(this SkinnedMeshRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Mesh> func)
            => bindings.BindInterval(seconds, () => obj.sharedMesh = func());
        public static void BindSharedMeshInterval(this SkinnedMeshRenderer obj, float seconds, Func<UnityEngine.Mesh> func)
            => BindSharedMeshInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRootBone(this SkinnedMeshRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Transform> property)
            => bindings.Bind(property, v => obj.rootBone = v);
        public static void BindRootBone(this SkinnedMeshRenderer obj, IProperty<UnityEngine.Transform> property)
            => BindRootBone(obj, Bindings2._scope, property);
        public static void BindRootBone(this SkinnedMeshRenderer obj, Bindings2 bindings, Func<UnityEngine.Transform> func)
            => bindings.BindUpdate(() => obj.rootBone = func());
        public static void BindRootBone(this SkinnedMeshRenderer obj, Func<UnityEngine.Transform> func)
            => BindRootBone(obj, Bindings2._scope, func);
        public static void BindRootBoneInterval(this SkinnedMeshRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Transform> func)
            => bindings.BindInterval(seconds, () => obj.rootBone = func());
        public static void BindRootBoneInterval(this SkinnedMeshRenderer obj, float seconds, Func<UnityEngine.Transform> func)
            => BindRootBoneInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSharedMaterials(this SkinnedMeshRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Material[]> property)
            => bindings.Bind(property, v => obj.sharedMaterials = v);
        public static void BindSharedMaterials(this SkinnedMeshRenderer obj, IProperty<UnityEngine.Material[]> property)
            => BindSharedMaterials(obj, Bindings2._scope, property);
        public static void BindSharedMaterials(this SkinnedMeshRenderer obj, Bindings2 bindings, Func<UnityEngine.Material[]> func)
            => bindings.BindUpdate(() => obj.sharedMaterials = func());
        public static void BindSharedMaterials(this SkinnedMeshRenderer obj, Func<UnityEngine.Material[]> func)
            => BindSharedMaterials(obj, Bindings2._scope, func);
        public static void BindSharedMaterialsInterval(this SkinnedMeshRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Material[]> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterials = func());
        public static void BindSharedMaterialsInterval(this SkinnedMeshRenderer obj, float seconds, Func<UnityEngine.Material[]> func)
            => BindSharedMaterialsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindShadowCastingMode(this SkinnedMeshRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Rendering.ShadowCastingMode> property)
            => bindings.Bind(property, v => obj.shadowCastingMode = v);
        public static void BindShadowCastingMode(this SkinnedMeshRenderer obj, IProperty<UnityEngine.Rendering.ShadowCastingMode> property)
            => BindShadowCastingMode(obj, Bindings2._scope, property);
        public static void BindShadowCastingMode(this SkinnedMeshRenderer obj, Bindings2 bindings, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => bindings.BindUpdate(() => obj.shadowCastingMode = func());
        public static void BindShadowCastingMode(this SkinnedMeshRenderer obj, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => BindShadowCastingMode(obj, Bindings2._scope, func);
        public static void BindShadowCastingModeInterval(this SkinnedMeshRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => bindings.BindInterval(seconds, () => obj.shadowCastingMode = func());
        public static void BindShadowCastingModeInterval(this SkinnedMeshRenderer obj, float seconds, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => BindShadowCastingModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReceiveShadows(this SkinnedMeshRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.receiveShadows = v);
        public static void BindReceiveShadows(this SkinnedMeshRenderer obj, IProperty<System.Boolean> property)
            => BindReceiveShadows(obj, Bindings2._scope, property);
        public static void BindReceiveShadows(this SkinnedMeshRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.receiveShadows = func());
        public static void BindReceiveShadows(this SkinnedMeshRenderer obj, Func<System.Boolean> func)
            => BindReceiveShadows(obj, Bindings2._scope, func);
        public static void BindReceiveShadowsInterval(this SkinnedMeshRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.receiveShadows = func());
        public static void BindReceiveShadowsInterval(this SkinnedMeshRenderer obj, float seconds, Func<System.Boolean> func)
            => BindReceiveShadowsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLightProbeUsage(this SkinnedMeshRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Rendering.LightProbeUsage> property)
            => bindings.Bind(property, v => obj.lightProbeUsage = v);
        public static void BindLightProbeUsage(this SkinnedMeshRenderer obj, IProperty<UnityEngine.Rendering.LightProbeUsage> property)
            => BindLightProbeUsage(obj, Bindings2._scope, property);
        public static void BindLightProbeUsage(this SkinnedMeshRenderer obj, Bindings2 bindings, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => bindings.BindUpdate(() => obj.lightProbeUsage = func());
        public static void BindLightProbeUsage(this SkinnedMeshRenderer obj, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => BindLightProbeUsage(obj, Bindings2._scope, func);
        public static void BindLightProbeUsageInterval(this SkinnedMeshRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => bindings.BindInterval(seconds, () => obj.lightProbeUsage = func());
        public static void BindLightProbeUsageInterval(this SkinnedMeshRenderer obj, float seconds, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => BindLightProbeUsageInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReflectionProbeUsage(this SkinnedMeshRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Rendering.ReflectionProbeUsage> property)
            => bindings.Bind(property, v => obj.reflectionProbeUsage = v);
        public static void BindReflectionProbeUsage(this SkinnedMeshRenderer obj, IProperty<UnityEngine.Rendering.ReflectionProbeUsage> property)
            => BindReflectionProbeUsage(obj, Bindings2._scope, property);
        public static void BindReflectionProbeUsage(this SkinnedMeshRenderer obj, Bindings2 bindings, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => bindings.BindUpdate(() => obj.reflectionProbeUsage = func());
        public static void BindReflectionProbeUsage(this SkinnedMeshRenderer obj, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => BindReflectionProbeUsage(obj, Bindings2._scope, func);
        public static void BindReflectionProbeUsageInterval(this SkinnedMeshRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => bindings.BindInterval(seconds, () => obj.reflectionProbeUsage = func());
        public static void BindReflectionProbeUsageInterval(this SkinnedMeshRenderer obj, float seconds, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => BindReflectionProbeUsageInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMotionVectorGenerationMode(this SkinnedMeshRenderer obj, Bindings2 bindings, IProperty<UnityEngine.MotionVectorGenerationMode> property)
            => bindings.Bind(property, v => obj.motionVectorGenerationMode = v);
        public static void BindMotionVectorGenerationMode(this SkinnedMeshRenderer obj, IProperty<UnityEngine.MotionVectorGenerationMode> property)
            => BindMotionVectorGenerationMode(obj, Bindings2._scope, property);
        public static void BindMotionVectorGenerationMode(this SkinnedMeshRenderer obj, Bindings2 bindings, Func<UnityEngine.MotionVectorGenerationMode> func)
            => bindings.BindUpdate(() => obj.motionVectorGenerationMode = func());
        public static void BindMotionVectorGenerationMode(this SkinnedMeshRenderer obj, Func<UnityEngine.MotionVectorGenerationMode> func)
            => BindMotionVectorGenerationMode(obj, Bindings2._scope, func);
        public static void BindMotionVectorGenerationModeInterval(this SkinnedMeshRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.MotionVectorGenerationMode> func)
            => bindings.BindInterval(seconds, () => obj.motionVectorGenerationMode = func());
        public static void BindMotionVectorGenerationModeInterval(this SkinnedMeshRenderer obj, float seconds, Func<UnityEngine.MotionVectorGenerationMode> func)
            => BindMotionVectorGenerationModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAllowOcclusionWhenDynamic(this SkinnedMeshRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.allowOcclusionWhenDynamic = v);
        public static void BindAllowOcclusionWhenDynamic(this SkinnedMeshRenderer obj, IProperty<System.Boolean> property)
            => BindAllowOcclusionWhenDynamic(obj, Bindings2._scope, property);
        public static void BindAllowOcclusionWhenDynamic(this SkinnedMeshRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.allowOcclusionWhenDynamic = func());
        public static void BindAllowOcclusionWhenDynamic(this SkinnedMeshRenderer obj, Func<System.Boolean> func)
            => BindAllowOcclusionWhenDynamic(obj, Bindings2._scope, func);
        public static void BindAllowOcclusionWhenDynamicInterval(this SkinnedMeshRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.allowOcclusionWhenDynamic = func());
        public static void BindAllowOcclusionWhenDynamicInterval(this SkinnedMeshRenderer obj, float seconds, Func<System.Boolean> func)
            => BindAllowOcclusionWhenDynamicInterval(obj, Bindings2._scope, seconds, func);


        public static void BindMaterial(this Skybox obj, Bindings2 bindings, IProperty<UnityEngine.Material> property)
            => bindings.Bind(property, v => obj.material = v);
        public static void BindMaterial(this Skybox obj, IProperty<UnityEngine.Material> property)
            => BindMaterial(obj, Bindings2._scope, property);
        public static void BindMaterial(this Skybox obj, Bindings2 bindings, Func<UnityEngine.Material> func)
            => bindings.BindUpdate(() => obj.material = func());
        public static void BindMaterial(this Skybox obj, Func<UnityEngine.Material> func)
            => BindMaterial(obj, Bindings2._scope, func);
        public static void BindMaterialInterval(this Skybox obj, Bindings2 bindings, float seconds, Func<UnityEngine.Material> func)
            => bindings.BindInterval(seconds, () => obj.material = func());
        public static void BindMaterialInterval(this Skybox obj, float seconds, Func<UnityEngine.Material> func)
            => BindMaterialInterval(obj, Bindings2._scope, seconds, func);


        #if UNITY_GUI
        public static void BindInteractable(this UnityEngine.UI.Slider obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.interactable = v);
        public static void BindInteractable(this UnityEngine.UI.Slider obj, IProperty<System.Boolean> property)
            => BindInteractable(obj, Bindings2._scope, property);
        public static void BindInteractable(this UnityEngine.UI.Slider obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.interactable = func());
        public static void BindInteractable(this UnityEngine.UI.Slider obj, Func<System.Boolean> func)
            => BindInteractable(obj, Bindings2._scope, func);
        public static void BindInteractableInterval(this UnityEngine.UI.Slider obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.interactable = func());
        public static void BindInteractableInterval(this UnityEngine.UI.Slider obj, float seconds, Func<System.Boolean> func)
            => BindInteractableInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTransition(this UnityEngine.UI.Slider obj, Bindings2 bindings, IProperty<UnityEngine.UI.Selectable.Transition> property)
            => bindings.Bind(property, v => obj.transition = v);
        public static void BindTransition(this UnityEngine.UI.Slider obj, IProperty<UnityEngine.UI.Selectable.Transition> property)
            => BindTransition(obj, Bindings2._scope, property);
        public static void BindTransition(this UnityEngine.UI.Slider obj, Bindings2 bindings, Func<UnityEngine.UI.Selectable.Transition> func)
            => bindings.BindUpdate(() => obj.transition = func());
        public static void BindTransition(this UnityEngine.UI.Slider obj, Func<UnityEngine.UI.Selectable.Transition> func)
            => BindTransition(obj, Bindings2._scope, func);
        public static void BindTransitionInterval(this UnityEngine.UI.Slider obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Selectable.Transition> func)
            => bindings.BindInterval(seconds, () => obj.transition = func());
        public static void BindTransitionInterval(this UnityEngine.UI.Slider obj, float seconds, Func<UnityEngine.UI.Selectable.Transition> func)
            => BindTransitionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetGraphic(this UnityEngine.UI.Slider obj, Bindings2 bindings, IProperty<UnityEngine.UI.Graphic> property)
            => bindings.Bind(property, v => obj.targetGraphic = v);
        public static void BindTargetGraphic(this UnityEngine.UI.Slider obj, IProperty<UnityEngine.UI.Graphic> property)
            => BindTargetGraphic(obj, Bindings2._scope, property);
        public static void BindTargetGraphic(this UnityEngine.UI.Slider obj, Bindings2 bindings, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindUpdate(() => obj.targetGraphic = func());
        public static void BindTargetGraphic(this UnityEngine.UI.Slider obj, Func<UnityEngine.UI.Graphic> func)
            => BindTargetGraphic(obj, Bindings2._scope, func);
        public static void BindTargetGraphicInterval(this UnityEngine.UI.Slider obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindInterval(seconds, () => obj.targetGraphic = func());
        public static void BindTargetGraphicInterval(this UnityEngine.UI.Slider obj, float seconds, Func<UnityEngine.UI.Graphic> func)
            => BindTargetGraphicInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColors(this UnityEngine.UI.Slider obj, Bindings2 bindings, IProperty<UnityEngine.UI.ColorBlock> property)
            => bindings.Bind(property, v => obj.colors = v);
        public static void BindColors(this UnityEngine.UI.Slider obj, IProperty<UnityEngine.UI.ColorBlock> property)
            => BindColors(obj, Bindings2._scope, property);
        public static void BindColors(this UnityEngine.UI.Slider obj, Bindings2 bindings, Func<UnityEngine.UI.ColorBlock> func)
            => bindings.BindUpdate(() => obj.colors = func());
        public static void BindColors(this UnityEngine.UI.Slider obj, Func<UnityEngine.UI.ColorBlock> func)
            => BindColors(obj, Bindings2._scope, func);
        public static void BindColorsInterval(this UnityEngine.UI.Slider obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.ColorBlock> func)
            => bindings.BindInterval(seconds, () => obj.colors = func());
        public static void BindColorsInterval(this UnityEngine.UI.Slider obj, float seconds, Func<UnityEngine.UI.ColorBlock> func)
            => BindColorsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindNavigation(this UnityEngine.UI.Slider obj, Bindings2 bindings, IProperty<UnityEngine.UI.Navigation> property)
            => bindings.Bind(property, v => obj.navigation = v);
        public static void BindNavigation(this UnityEngine.UI.Slider obj, IProperty<UnityEngine.UI.Navigation> property)
            => BindNavigation(obj, Bindings2._scope, property);
        public static void BindNavigation(this UnityEngine.UI.Slider obj, Bindings2 bindings, Func<UnityEngine.UI.Navigation> func)
            => bindings.BindUpdate(() => obj.navigation = func());
        public static void BindNavigation(this UnityEngine.UI.Slider obj, Func<UnityEngine.UI.Navigation> func)
            => BindNavigation(obj, Bindings2._scope, func);
        public static void BindNavigationInterval(this UnityEngine.UI.Slider obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Navigation> func)
            => bindings.BindInterval(seconds, () => obj.navigation = func());
        public static void BindNavigationInterval(this UnityEngine.UI.Slider obj, float seconds, Func<UnityEngine.UI.Navigation> func)
            => BindNavigationInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFillRect(this UnityEngine.UI.Slider obj, Bindings2 bindings, IProperty<UnityEngine.RectTransform> property)
            => bindings.Bind(property, v => obj.fillRect = v);
        public static void BindFillRect(this UnityEngine.UI.Slider obj, IProperty<UnityEngine.RectTransform> property)
            => BindFillRect(obj, Bindings2._scope, property);
        public static void BindFillRect(this UnityEngine.UI.Slider obj, Bindings2 bindings, Func<UnityEngine.RectTransform> func)
            => bindings.BindUpdate(() => obj.fillRect = func());
        public static void BindFillRect(this UnityEngine.UI.Slider obj, Func<UnityEngine.RectTransform> func)
            => BindFillRect(obj, Bindings2._scope, func);
        public static void BindFillRectInterval(this UnityEngine.UI.Slider obj, Bindings2 bindings, float seconds, Func<UnityEngine.RectTransform> func)
            => bindings.BindInterval(seconds, () => obj.fillRect = func());
        public static void BindFillRectInterval(this UnityEngine.UI.Slider obj, float seconds, Func<UnityEngine.RectTransform> func)
            => BindFillRectInterval(obj, Bindings2._scope, seconds, func);
        public static void BindHandleRect(this UnityEngine.UI.Slider obj, Bindings2 bindings, IProperty<UnityEngine.RectTransform> property)
            => bindings.Bind(property, v => obj.handleRect = v);
        public static void BindHandleRect(this UnityEngine.UI.Slider obj, IProperty<UnityEngine.RectTransform> property)
            => BindHandleRect(obj, Bindings2._scope, property);
        public static void BindHandleRect(this UnityEngine.UI.Slider obj, Bindings2 bindings, Func<UnityEngine.RectTransform> func)
            => bindings.BindUpdate(() => obj.handleRect = func());
        public static void BindHandleRect(this UnityEngine.UI.Slider obj, Func<UnityEngine.RectTransform> func)
            => BindHandleRect(obj, Bindings2._scope, func);
        public static void BindHandleRectInterval(this UnityEngine.UI.Slider obj, Bindings2 bindings, float seconds, Func<UnityEngine.RectTransform> func)
            => bindings.BindInterval(seconds, () => obj.handleRect = func());
        public static void BindHandleRectInterval(this UnityEngine.UI.Slider obj, float seconds, Func<UnityEngine.RectTransform> func)
            => BindHandleRectInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDirection(this UnityEngine.UI.Slider obj, Bindings2 bindings, IProperty<UnityEngine.UI.Slider.Direction> property)
            => bindings.Bind(property, v => obj.direction = v);
        public static void BindDirection(this UnityEngine.UI.Slider obj, IProperty<UnityEngine.UI.Slider.Direction> property)
            => BindDirection(obj, Bindings2._scope, property);
        public static void BindDirection(this UnityEngine.UI.Slider obj, Bindings2 bindings, Func<UnityEngine.UI.Slider.Direction> func)
            => bindings.BindUpdate(() => obj.direction = func());
        public static void BindDirection(this UnityEngine.UI.Slider obj, Func<UnityEngine.UI.Slider.Direction> func)
            => BindDirection(obj, Bindings2._scope, func);
        public static void BindDirectionInterval(this UnityEngine.UI.Slider obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Slider.Direction> func)
            => bindings.BindInterval(seconds, () => obj.direction = func());
        public static void BindDirectionInterval(this UnityEngine.UI.Slider obj, float seconds, Func<UnityEngine.UI.Slider.Direction> func)
            => BindDirectionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMinValue(this UnityEngine.UI.Slider obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.minValue = v);
        public static void BindMinValue(this UnityEngine.UI.Slider obj, IProperty<System.Single> property)
            => BindMinValue(obj, Bindings2._scope, property);
        public static void BindMinValue(this UnityEngine.UI.Slider obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.minValue = func());
        public static void BindMinValue(this UnityEngine.UI.Slider obj, Func<System.Single> func)
            => BindMinValue(obj, Bindings2._scope, func);
        public static void BindMinValueInterval(this UnityEngine.UI.Slider obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.minValue = func());
        public static void BindMinValueInterval(this UnityEngine.UI.Slider obj, float seconds, Func<System.Single> func)
            => BindMinValueInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMaxValue(this UnityEngine.UI.Slider obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.maxValue = v);
        public static void BindMaxValue(this UnityEngine.UI.Slider obj, IProperty<System.Single> property)
            => BindMaxValue(obj, Bindings2._scope, property);
        public static void BindMaxValue(this UnityEngine.UI.Slider obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.maxValue = func());
        public static void BindMaxValue(this UnityEngine.UI.Slider obj, Func<System.Single> func)
            => BindMaxValue(obj, Bindings2._scope, func);
        public static void BindMaxValueInterval(this UnityEngine.UI.Slider obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.maxValue = func());
        public static void BindMaxValueInterval(this UnityEngine.UI.Slider obj, float seconds, Func<System.Single> func)
            => BindMaxValueInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWholeNumbers(this UnityEngine.UI.Slider obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.wholeNumbers = v);
        public static void BindWholeNumbers(this UnityEngine.UI.Slider obj, IProperty<System.Boolean> property)
            => BindWholeNumbers(obj, Bindings2._scope, property);
        public static void BindWholeNumbers(this UnityEngine.UI.Slider obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.wholeNumbers = func());
        public static void BindWholeNumbers(this UnityEngine.UI.Slider obj, Func<System.Boolean> func)
            => BindWholeNumbers(obj, Bindings2._scope, func);
        public static void BindWholeNumbersInterval(this UnityEngine.UI.Slider obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.wholeNumbers = func());
        public static void BindWholeNumbersInterval(this UnityEngine.UI.Slider obj, float seconds, Func<System.Boolean> func)
            => BindWholeNumbersInterval(obj, Bindings2._scope, seconds, func);
        public static void BindValue(this UnityEngine.UI.Slider obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.value = v);
        public static void BindValue(this UnityEngine.UI.Slider obj, IProperty<System.Single> property)
            => BindValue(obj, Bindings2._scope, property);
        public static void BindValue(this UnityEngine.UI.Slider obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.value = func());
        public static void BindValue(this UnityEngine.UI.Slider obj, Func<System.Single> func)
            => BindValue(obj, Bindings2._scope, func);
        public static void BindValueInterval(this UnityEngine.UI.Slider obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.value = func());
        public static void BindValueInterval(this UnityEngine.UI.Slider obj, float seconds, Func<System.Single> func)
            => BindValueInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindEnableCollision(this SliderJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enableCollision = v);
        public static void BindEnableCollision(this SliderJoint2D obj, IProperty<System.Boolean> property)
            => BindEnableCollision(obj, Bindings2._scope, property);
        public static void BindEnableCollision(this SliderJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enableCollision = func());
        public static void BindEnableCollision(this SliderJoint2D obj, Func<System.Boolean> func)
            => BindEnableCollision(obj, Bindings2._scope, func);
        public static void BindEnableCollisionInterval(this SliderJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enableCollision = func());
        public static void BindEnableCollisionInterval(this SliderJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindEnableCollisionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedBody(this SliderJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Rigidbody2D> property)
            => bindings.Bind(property, v => obj.connectedBody = v);
        public static void BindConnectedBody(this SliderJoint2D obj, IProperty<UnityEngine.Rigidbody2D> property)
            => BindConnectedBody(obj, Bindings2._scope, property);
        public static void BindConnectedBody(this SliderJoint2D obj, Bindings2 bindings, Func<UnityEngine.Rigidbody2D> func)
            => bindings.BindUpdate(() => obj.connectedBody = func());
        public static void BindConnectedBody(this SliderJoint2D obj, Func<UnityEngine.Rigidbody2D> func)
            => BindConnectedBody(obj, Bindings2._scope, func);
        public static void BindConnectedBodyInterval(this SliderJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rigidbody2D> func)
            => bindings.BindInterval(seconds, () => obj.connectedBody = func());
        public static void BindConnectedBodyInterval(this SliderJoint2D obj, float seconds, Func<UnityEngine.Rigidbody2D> func)
            => BindConnectedBodyInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoConfigureConnectedAnchor(this SliderJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoConfigureConnectedAnchor = v);
        public static void BindAutoConfigureConnectedAnchor(this SliderJoint2D obj, IProperty<System.Boolean> property)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindAutoConfigureConnectedAnchor(this SliderJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchor(this SliderJoint2D obj, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindAutoConfigureConnectedAnchorInterval(this SliderJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchorInterval(this SliderJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAnchor(this SliderJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.anchor = v);
        public static void BindAnchor(this SliderJoint2D obj, IProperty<UnityEngine.Vector2> property)
            => BindAnchor(obj, Bindings2._scope, property);
        public static void BindAnchor(this SliderJoint2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.anchor = func());
        public static void BindAnchor(this SliderJoint2D obj, Func<UnityEngine.Vector2> func)
            => BindAnchor(obj, Bindings2._scope, func);
        public static void BindAnchorInterval(this SliderJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.anchor = func());
        public static void BindAnchorInterval(this SliderJoint2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedAnchor(this SliderJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.connectedAnchor = v);
        public static void BindConnectedAnchor(this SliderJoint2D obj, IProperty<UnityEngine.Vector2> property)
            => BindConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindConnectedAnchor(this SliderJoint2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = func());
        public static void BindConnectedAnchor(this SliderJoint2D obj, Func<UnityEngine.Vector2> func)
            => BindConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindConnectedAnchorInterval(this SliderJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.connectedAnchor = func());
        public static void BindConnectedAnchorInterval(this SliderJoint2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoConfigureAngle(this SliderJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoConfigureAngle = v);
        public static void BindAutoConfigureAngle(this SliderJoint2D obj, IProperty<System.Boolean> property)
            => BindAutoConfigureAngle(obj, Bindings2._scope, property);
        public static void BindAutoConfigureAngle(this SliderJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoConfigureAngle = func());
        public static void BindAutoConfigureAngle(this SliderJoint2D obj, Func<System.Boolean> func)
            => BindAutoConfigureAngle(obj, Bindings2._scope, func);
        public static void BindAutoConfigureAngleInterval(this SliderJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoConfigureAngle = func());
        public static void BindAutoConfigureAngleInterval(this SliderJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindAutoConfigureAngleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAngle(this SliderJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.angle = v);
        public static void BindAngle(this SliderJoint2D obj, IProperty<System.Single> property)
            => BindAngle(obj, Bindings2._scope, property);
        public static void BindAngle(this SliderJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.angle = func());
        public static void BindAngle(this SliderJoint2D obj, Func<System.Single> func)
            => BindAngle(obj, Bindings2._scope, func);
        public static void BindAngleInterval(this SliderJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.angle = func());
        public static void BindAngleInterval(this SliderJoint2D obj, float seconds, Func<System.Single> func)
            => BindAngleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseMotor(this SliderJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useMotor = v);
        public static void BindUseMotor(this SliderJoint2D obj, IProperty<System.Boolean> property)
            => BindUseMotor(obj, Bindings2._scope, property);
        public static void BindUseMotor(this SliderJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useMotor = func());
        public static void BindUseMotor(this SliderJoint2D obj, Func<System.Boolean> func)
            => BindUseMotor(obj, Bindings2._scope, func);
        public static void BindUseMotorInterval(this SliderJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useMotor = func());
        public static void BindUseMotorInterval(this SliderJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindUseMotorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMotor(this SliderJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.JointMotor2D> property)
            => bindings.Bind(property, v => obj.motor = v);
        public static void BindMotor(this SliderJoint2D obj, IProperty<UnityEngine.JointMotor2D> property)
            => BindMotor(obj, Bindings2._scope, property);
        public static void BindMotor(this SliderJoint2D obj, Bindings2 bindings, Func<UnityEngine.JointMotor2D> func)
            => bindings.BindUpdate(() => obj.motor = func());
        public static void BindMotor(this SliderJoint2D obj, Func<UnityEngine.JointMotor2D> func)
            => BindMotor(obj, Bindings2._scope, func);
        public static void BindMotorInterval(this SliderJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.JointMotor2D> func)
            => bindings.BindInterval(seconds, () => obj.motor = func());
        public static void BindMotorInterval(this SliderJoint2D obj, float seconds, Func<UnityEngine.JointMotor2D> func)
            => BindMotorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseLimits(this SliderJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useLimits = v);
        public static void BindUseLimits(this SliderJoint2D obj, IProperty<System.Boolean> property)
            => BindUseLimits(obj, Bindings2._scope, property);
        public static void BindUseLimits(this SliderJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useLimits = func());
        public static void BindUseLimits(this SliderJoint2D obj, Func<System.Boolean> func)
            => BindUseLimits(obj, Bindings2._scope, func);
        public static void BindUseLimitsInterval(this SliderJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useLimits = func());
        public static void BindUseLimitsInterval(this SliderJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindUseLimitsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLimits(this SliderJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.JointTranslationLimits2D> property)
            => bindings.Bind(property, v => obj.limits = v);
        public static void BindLimits(this SliderJoint2D obj, IProperty<UnityEngine.JointTranslationLimits2D> property)
            => BindLimits(obj, Bindings2._scope, property);
        public static void BindLimits(this SliderJoint2D obj, Bindings2 bindings, Func<UnityEngine.JointTranslationLimits2D> func)
            => bindings.BindUpdate(() => obj.limits = func());
        public static void BindLimits(this SliderJoint2D obj, Func<UnityEngine.JointTranslationLimits2D> func)
            => BindLimits(obj, Bindings2._scope, func);
        public static void BindLimitsInterval(this SliderJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.JointTranslationLimits2D> func)
            => bindings.BindInterval(seconds, () => obj.limits = func());
        public static void BindLimitsInterval(this SliderJoint2D obj, float seconds, Func<UnityEngine.JointTranslationLimits2D> func)
            => BindLimitsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakForce(this SliderJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakForce = v);
        public static void BindBreakForce(this SliderJoint2D obj, IProperty<System.Single> property)
            => BindBreakForce(obj, Bindings2._scope, property);
        public static void BindBreakForce(this SliderJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakForce = func());
        public static void BindBreakForce(this SliderJoint2D obj, Func<System.Single> func)
            => BindBreakForce(obj, Bindings2._scope, func);
        public static void BindBreakForceInterval(this SliderJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakForce = func());
        public static void BindBreakForceInterval(this SliderJoint2D obj, float seconds, Func<System.Single> func)
            => BindBreakForceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakTorque(this SliderJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakTorque = v);
        public static void BindBreakTorque(this SliderJoint2D obj, IProperty<System.Single> property)
            => BindBreakTorque(obj, Bindings2._scope, property);
        public static void BindBreakTorque(this SliderJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakTorque = func());
        public static void BindBreakTorque(this SliderJoint2D obj, Func<System.Single> func)
            => BindBreakTorque(obj, Bindings2._scope, func);
        public static void BindBreakTorqueInterval(this SliderJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakTorque = func());
        public static void BindBreakTorqueInterval(this SliderJoint2D obj, float seconds, Func<System.Single> func)
            => BindBreakTorqueInterval(obj, Bindings2._scope, seconds, func);
        #endif


        public static void BindSortingLayerID(this UnityEngine.Rendering.SortingGroup obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.sortingLayerID = v);
        public static void BindSortingLayerID(this UnityEngine.Rendering.SortingGroup obj, IProperty<System.Int32> property)
            => BindSortingLayerID(obj, Bindings2._scope, property);
        public static void BindSortingLayerID(this UnityEngine.Rendering.SortingGroup obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.sortingLayerID = func());
        public static void BindSortingLayerID(this UnityEngine.Rendering.SortingGroup obj, Func<System.Int32> func)
            => BindSortingLayerID(obj, Bindings2._scope, func);
        public static void BindSortingLayerIDInterval(this UnityEngine.Rendering.SortingGroup obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.sortingLayerID = func());
        public static void BindSortingLayerIDInterval(this UnityEngine.Rendering.SortingGroup obj, float seconds, Func<System.Int32> func)
            => BindSortingLayerIDInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSortingOrder(this UnityEngine.Rendering.SortingGroup obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.sortingOrder = v);
        public static void BindSortingOrder(this UnityEngine.Rendering.SortingGroup obj, IProperty<System.Int32> property)
            => BindSortingOrder(obj, Bindings2._scope, property);
        public static void BindSortingOrder(this UnityEngine.Rendering.SortingGroup obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.sortingOrder = func());
        public static void BindSortingOrder(this UnityEngine.Rendering.SortingGroup obj, Func<System.Int32> func)
            => BindSortingOrder(obj, Bindings2._scope, func);
        public static void BindSortingOrderInterval(this UnityEngine.Rendering.SortingGroup obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.sortingOrder = func());
        public static void BindSortingOrderInterval(this UnityEngine.Rendering.SortingGroup obj, float seconds, Func<System.Int32> func)
            => BindSortingOrderInterval(obj, Bindings2._scope, seconds, func);


        #if UNITY_PHYSICS
        public static void BindIsTrigger(this SphereCollider obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isTrigger = v);
        public static void BindIsTrigger(this SphereCollider obj, IProperty<System.Boolean> property)
            => BindIsTrigger(obj, Bindings2._scope, property);
        public static void BindIsTrigger(this SphereCollider obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isTrigger = func());
        public static void BindIsTrigger(this SphereCollider obj, Func<System.Boolean> func)
            => BindIsTrigger(obj, Bindings2._scope, func);
        public static void BindIsTriggerInterval(this SphereCollider obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isTrigger = func());
        public static void BindIsTriggerInterval(this SphereCollider obj, float seconds, Func<System.Boolean> func)
            => BindIsTriggerInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_6000_0_OR_NEWER
        public static void BindSharedMaterial(this SphereCollider obj, Bindings2 bindings, IProperty<PhysicMaterial> property)
            => bindings.Bind(property, v => obj.sharedMaterial = v);
        public static void BindSharedMaterial(this SphereCollider obj, IProperty<PhysicMaterial> property)
            => BindSharedMaterial(obj, Bindings2._scope, property);
        public static void BindSharedMaterial(this SphereCollider obj, Bindings2 bindings, Func<PhysicMaterial> func)
            => bindings.BindUpdate(() => obj.sharedMaterial = func());
        public static void BindSharedMaterial(this SphereCollider obj, Func<PhysicMaterial> func)
            => BindSharedMaterial(obj, Bindings2._scope, func);
        public static void BindSharedMaterialInterval(this SphereCollider obj, Bindings2 bindings, float seconds, Func<PhysicMaterial> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterial = func());
        public static void BindSharedMaterialInterval(this SphereCollider obj, float seconds, Func<PhysicMaterial> func)
            => BindSharedMaterialInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_6000_0_OR_NEWER
        public static void BindSharedMaterial(this SphereCollider obj, Bindings2 bindings, IProperty<PhysicsMaterial> property)
            => bindings.Bind(property, v => obj.sharedMaterial = v);
        public static void BindSharedMaterial(this SphereCollider obj, IProperty<PhysicsMaterial> property)
            => BindSharedMaterial(obj, Bindings2._scope, property);
        public static void BindSharedMaterial(this SphereCollider obj, Bindings2 bindings, Func<PhysicsMaterial> func)
            => bindings.BindUpdate(() => obj.sharedMaterial = func());
        public static void BindSharedMaterial(this SphereCollider obj, Func<PhysicsMaterial> func)
            => BindSharedMaterial(obj, Bindings2._scope, func);
        public static void BindSharedMaterialInterval(this SphereCollider obj, Bindings2 bindings, float seconds, Func<PhysicsMaterial> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterial = func());
        public static void BindSharedMaterialInterval(this SphereCollider obj, float seconds, Func<PhysicsMaterial> func)
            => BindSharedMaterialInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindCenter(this SphereCollider obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.center = v);
        public static void BindCenter(this SphereCollider obj, IProperty<UnityEngine.Vector3> property)
            => BindCenter(obj, Bindings2._scope, property);
        public static void BindCenter(this SphereCollider obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = func());
        public static void BindCenter(this SphereCollider obj, Func<UnityEngine.Vector3> func)
            => BindCenter(obj, Bindings2._scope, func);
        public static void BindCenterInterval(this SphereCollider obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.center = func());
        public static void BindCenterInterval(this SphereCollider obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindCenterInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCenterLerp(this SphereCollider obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.center = Vector3.Lerp(obj.center, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCenterLerp(this SphereCollider obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCenterLerp(obj, Bindings2._scope, speed, property);
        public static void BindCenterLerp(this SphereCollider obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = Vector3.Lerp(obj.center, func(), speed * Time.smoothDeltaTime));
        public static void BindCenterLerp(this SphereCollider obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCenterLerp(obj, Bindings2._scope, speed, func);
        public static void BindCenterTowards(this SphereCollider obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.center = Vector3.MoveTowards(obj.center, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCenterTowards(this SphereCollider obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCenterTowards(obj, Bindings2._scope, speed, property);
        public static void BindCenterTowards(this SphereCollider obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = Vector3.MoveTowards(obj.center, func(), speed * Time.smoothDeltaTime));
        public static void BindCenterTowards(this SphereCollider obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCenterTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateCenter(this SphereCollider obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.center = Vector3.Lerp(start, end, t));
        public static void AnimateCenter(this SphereCollider obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, start, end, curve);
        public static void AnimateCenter(this SphereCollider obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, obj.center, end, curve);
        public static void AnimateCenter(this SphereCollider obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, end, curve);
        public static void BindRadius(this SphereCollider obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.radius = v);
        public static void BindRadius(this SphereCollider obj, IProperty<System.Single> property)
            => BindRadius(obj, Bindings2._scope, property);
        public static void BindRadius(this SphereCollider obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.radius = func());
        public static void BindRadius(this SphereCollider obj, Func<System.Single> func)
            => BindRadius(obj, Bindings2._scope, func);
        public static void BindRadiusInterval(this SphereCollider obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.radius = func());
        public static void BindRadiusInterval(this SphereCollider obj, float seconds, Func<System.Single> func)
            => BindRadiusInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS
        public static void BindConnectedBody(this SpringJoint obj, Bindings2 bindings, IProperty<UnityEngine.Rigidbody> property)
            => bindings.Bind(property, v => obj.connectedBody = v);
        public static void BindConnectedBody(this SpringJoint obj, IProperty<UnityEngine.Rigidbody> property)
            => BindConnectedBody(obj, Bindings2._scope, property);
        public static void BindConnectedBody(this SpringJoint obj, Bindings2 bindings, Func<UnityEngine.Rigidbody> func)
            => bindings.BindUpdate(() => obj.connectedBody = func());
        public static void BindConnectedBody(this SpringJoint obj, Func<UnityEngine.Rigidbody> func)
            => BindConnectedBody(obj, Bindings2._scope, func);
        public static void BindConnectedBodyInterval(this SpringJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rigidbody> func)
            => bindings.BindInterval(seconds, () => obj.connectedBody = func());
        public static void BindConnectedBodyInterval(this SpringJoint obj, float seconds, Func<UnityEngine.Rigidbody> func)
            => BindConnectedBodyInterval(obj, Bindings2._scope, seconds, func);
        #if UNITY_2020_2_OR_NEWER
        public static void BindConnectedArticulationBody(this SpringJoint obj, Bindings2 bindings, IProperty<UnityEngine.ArticulationBody> property)
            => bindings.Bind(property, v => obj.connectedArticulationBody = v);
        public static void BindConnectedArticulationBody(this SpringJoint obj, IProperty<UnityEngine.ArticulationBody> property)
            => BindConnectedArticulationBody(obj, Bindings2._scope, property);
        public static void BindConnectedArticulationBody(this SpringJoint obj, Bindings2 bindings, Func<UnityEngine.ArticulationBody> func)
            => bindings.BindUpdate(() => obj.connectedArticulationBody = func());
        public static void BindConnectedArticulationBody(this SpringJoint obj, Func<UnityEngine.ArticulationBody> func)
            => BindConnectedArticulationBody(obj, Bindings2._scope, func);
        public static void BindConnectedArticulationBodyInterval(this SpringJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.ArticulationBody> func)
            => bindings.BindInterval(seconds, () => obj.connectedArticulationBody = func());
        public static void BindConnectedArticulationBodyInterval(this SpringJoint obj, float seconds, Func<UnityEngine.ArticulationBody> func)
            => BindConnectedArticulationBodyInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindAnchor(this SpringJoint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.anchor = v);
        public static void BindAnchor(this SpringJoint obj, IProperty<UnityEngine.Vector3> property)
            => BindAnchor(obj, Bindings2._scope, property);
        public static void BindAnchor(this SpringJoint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.anchor = func());
        public static void BindAnchor(this SpringJoint obj, Func<UnityEngine.Vector3> func)
            => BindAnchor(obj, Bindings2._scope, func);
        public static void BindAnchorInterval(this SpringJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.anchor = func());
        public static void BindAnchorInterval(this SpringJoint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAnchorLerp(this SpringJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.anchor = Vector3.Lerp(obj.anchor, property.Value, speed * Time.smoothDeltaTime));
        public static void BindAnchorLerp(this SpringJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindAnchorLerp(obj, Bindings2._scope, speed, property);
        public static void BindAnchorLerp(this SpringJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.anchor = Vector3.Lerp(obj.anchor, func(), speed * Time.smoothDeltaTime));
        public static void BindAnchorLerp(this SpringJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindAnchorLerp(obj, Bindings2._scope, speed, func);
        public static void BindAnchorTowards(this SpringJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.anchor = Vector3.MoveTowards(obj.anchor, property.Value, speed * Time.smoothDeltaTime));
        public static void BindAnchorTowards(this SpringJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindAnchorTowards(obj, Bindings2._scope, speed, property);
        public static void BindAnchorTowards(this SpringJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.anchor = Vector3.MoveTowards(obj.anchor, func(), speed * Time.smoothDeltaTime));
        public static void BindAnchorTowards(this SpringJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindAnchorTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateAnchor(this SpringJoint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.anchor = Vector3.Lerp(start, end, t));
        public static void AnimateAnchor(this SpringJoint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAnchor(obj, Bindings2._scope, start, end, curve);
        public static void AnimateAnchor(this SpringJoint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAnchor(obj, Bindings2._scope, obj.anchor, end, curve);
        public static void AnimateAnchor(this SpringJoint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAnchor(obj, Bindings2._scope, end, curve);
        public static void BindAxis(this SpringJoint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.axis = v);
        public static void BindAxis(this SpringJoint obj, IProperty<UnityEngine.Vector3> property)
            => BindAxis(obj, Bindings2._scope, property);
        public static void BindAxis(this SpringJoint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.axis = func());
        public static void BindAxis(this SpringJoint obj, Func<UnityEngine.Vector3> func)
            => BindAxis(obj, Bindings2._scope, func);
        public static void BindAxisInterval(this SpringJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.axis = func());
        public static void BindAxisInterval(this SpringJoint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindAxisInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAxisLerp(this SpringJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.axis = Vector3.Lerp(obj.axis, property.Value, speed * Time.smoothDeltaTime));
        public static void BindAxisLerp(this SpringJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindAxisLerp(obj, Bindings2._scope, speed, property);
        public static void BindAxisLerp(this SpringJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.axis = Vector3.Lerp(obj.axis, func(), speed * Time.smoothDeltaTime));
        public static void BindAxisLerp(this SpringJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindAxisLerp(obj, Bindings2._scope, speed, func);
        public static void BindAxisTowards(this SpringJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.axis = Vector3.MoveTowards(obj.axis, property.Value, speed * Time.smoothDeltaTime));
        public static void BindAxisTowards(this SpringJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindAxisTowards(obj, Bindings2._scope, speed, property);
        public static void BindAxisTowards(this SpringJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.axis = Vector3.MoveTowards(obj.axis, func(), speed * Time.smoothDeltaTime));
        public static void BindAxisTowards(this SpringJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindAxisTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateAxis(this SpringJoint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.axis = Vector3.Lerp(start, end, t));
        public static void AnimateAxis(this SpringJoint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAxis(obj, Bindings2._scope, start, end, curve);
        public static void AnimateAxis(this SpringJoint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAxis(obj, Bindings2._scope, obj.axis, end, curve);
        public static void AnimateAxis(this SpringJoint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateAxis(obj, Bindings2._scope, end, curve);
        public static void BindAutoConfigureConnectedAnchor(this SpringJoint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoConfigureConnectedAnchor = v);
        public static void BindAutoConfigureConnectedAnchor(this SpringJoint obj, IProperty<System.Boolean> property)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindAutoConfigureConnectedAnchor(this SpringJoint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchor(this SpringJoint obj, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindAutoConfigureConnectedAnchorInterval(this SpringJoint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchorInterval(this SpringJoint obj, float seconds, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedAnchor(this SpringJoint obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.connectedAnchor = v);
        public static void BindConnectedAnchor(this SpringJoint obj, IProperty<UnityEngine.Vector3> property)
            => BindConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindConnectedAnchor(this SpringJoint obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = func());
        public static void BindConnectedAnchor(this SpringJoint obj, Func<UnityEngine.Vector3> func)
            => BindConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindConnectedAnchorInterval(this SpringJoint obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.connectedAnchor = func());
        public static void BindConnectedAnchorInterval(this SpringJoint obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedAnchorLerp(this SpringJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.connectedAnchor = Vector3.Lerp(obj.connectedAnchor, property.Value, speed * Time.smoothDeltaTime));
        public static void BindConnectedAnchorLerp(this SpringJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindConnectedAnchorLerp(obj, Bindings2._scope, speed, property);
        public static void BindConnectedAnchorLerp(this SpringJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = Vector3.Lerp(obj.connectedAnchor, func(), speed * Time.smoothDeltaTime));
        public static void BindConnectedAnchorLerp(this SpringJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindConnectedAnchorLerp(obj, Bindings2._scope, speed, func);
        public static void BindConnectedAnchorTowards(this SpringJoint obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.connectedAnchor = Vector3.MoveTowards(obj.connectedAnchor, property.Value, speed * Time.smoothDeltaTime));
        public static void BindConnectedAnchorTowards(this SpringJoint obj, float speed, Property<UnityEngine.Vector3> property)
            => BindConnectedAnchorTowards(obj, Bindings2._scope, speed, property);
        public static void BindConnectedAnchorTowards(this SpringJoint obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = Vector3.MoveTowards(obj.connectedAnchor, func(), speed * Time.smoothDeltaTime));
        public static void BindConnectedAnchorTowards(this SpringJoint obj, float speed, Func<UnityEngine.Vector3> func)
            => BindConnectedAnchorTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateConnectedAnchor(this SpringJoint obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.connectedAnchor = Vector3.Lerp(start, end, t));
        public static void AnimateConnectedAnchor(this SpringJoint obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateConnectedAnchor(obj, Bindings2._scope, start, end, curve);
        public static void AnimateConnectedAnchor(this SpringJoint obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateConnectedAnchor(obj, Bindings2._scope, obj.connectedAnchor, end, curve);
        public static void AnimateConnectedAnchor(this SpringJoint obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateConnectedAnchor(obj, Bindings2._scope, end, curve);
        public static void BindSpring(this SpringJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.spring = v);
        public static void BindSpring(this SpringJoint obj, IProperty<System.Single> property)
            => BindSpring(obj, Bindings2._scope, property);
        public static void BindSpring(this SpringJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.spring = func());
        public static void BindSpring(this SpringJoint obj, Func<System.Single> func)
            => BindSpring(obj, Bindings2._scope, func);
        public static void BindSpringInterval(this SpringJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.spring = func());
        public static void BindSpringInterval(this SpringJoint obj, float seconds, Func<System.Single> func)
            => BindSpringInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDamper(this SpringJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.damper = v);
        public static void BindDamper(this SpringJoint obj, IProperty<System.Single> property)
            => BindDamper(obj, Bindings2._scope, property);
        public static void BindDamper(this SpringJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.damper = func());
        public static void BindDamper(this SpringJoint obj, Func<System.Single> func)
            => BindDamper(obj, Bindings2._scope, func);
        public static void BindDamperInterval(this SpringJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.damper = func());
        public static void BindDamperInterval(this SpringJoint obj, float seconds, Func<System.Single> func)
            => BindDamperInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMinDistance(this SpringJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.minDistance = v);
        public static void BindMinDistance(this SpringJoint obj, IProperty<System.Single> property)
            => BindMinDistance(obj, Bindings2._scope, property);
        public static void BindMinDistance(this SpringJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.minDistance = func());
        public static void BindMinDistance(this SpringJoint obj, Func<System.Single> func)
            => BindMinDistance(obj, Bindings2._scope, func);
        public static void BindMinDistanceInterval(this SpringJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.minDistance = func());
        public static void BindMinDistanceInterval(this SpringJoint obj, float seconds, Func<System.Single> func)
            => BindMinDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMaxDistance(this SpringJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.maxDistance = v);
        public static void BindMaxDistance(this SpringJoint obj, IProperty<System.Single> property)
            => BindMaxDistance(obj, Bindings2._scope, property);
        public static void BindMaxDistance(this SpringJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.maxDistance = func());
        public static void BindMaxDistance(this SpringJoint obj, Func<System.Single> func)
            => BindMaxDistance(obj, Bindings2._scope, func);
        public static void BindMaxDistanceInterval(this SpringJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.maxDistance = func());
        public static void BindMaxDistanceInterval(this SpringJoint obj, float seconds, Func<System.Single> func)
            => BindMaxDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTolerance(this SpringJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.tolerance = v);
        public static void BindTolerance(this SpringJoint obj, IProperty<System.Single> property)
            => BindTolerance(obj, Bindings2._scope, property);
        public static void BindTolerance(this SpringJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.tolerance = func());
        public static void BindTolerance(this SpringJoint obj, Func<System.Single> func)
            => BindTolerance(obj, Bindings2._scope, func);
        public static void BindToleranceInterval(this SpringJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.tolerance = func());
        public static void BindToleranceInterval(this SpringJoint obj, float seconds, Func<System.Single> func)
            => BindToleranceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakForce(this SpringJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakForce = v);
        public static void BindBreakForce(this SpringJoint obj, IProperty<System.Single> property)
            => BindBreakForce(obj, Bindings2._scope, property);
        public static void BindBreakForce(this SpringJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakForce = func());
        public static void BindBreakForce(this SpringJoint obj, Func<System.Single> func)
            => BindBreakForce(obj, Bindings2._scope, func);
        public static void BindBreakForceInterval(this SpringJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakForce = func());
        public static void BindBreakForceInterval(this SpringJoint obj, float seconds, Func<System.Single> func)
            => BindBreakForceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakTorque(this SpringJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakTorque = v);
        public static void BindBreakTorque(this SpringJoint obj, IProperty<System.Single> property)
            => BindBreakTorque(obj, Bindings2._scope, property);
        public static void BindBreakTorque(this SpringJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakTorque = func());
        public static void BindBreakTorque(this SpringJoint obj, Func<System.Single> func)
            => BindBreakTorque(obj, Bindings2._scope, func);
        public static void BindBreakTorqueInterval(this SpringJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakTorque = func());
        public static void BindBreakTorqueInterval(this SpringJoint obj, float seconds, Func<System.Single> func)
            => BindBreakTorqueInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEnableCollision(this SpringJoint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enableCollision = v);
        public static void BindEnableCollision(this SpringJoint obj, IProperty<System.Boolean> property)
            => BindEnableCollision(obj, Bindings2._scope, property);
        public static void BindEnableCollision(this SpringJoint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enableCollision = func());
        public static void BindEnableCollision(this SpringJoint obj, Func<System.Boolean> func)
            => BindEnableCollision(obj, Bindings2._scope, func);
        public static void BindEnableCollisionInterval(this SpringJoint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enableCollision = func());
        public static void BindEnableCollisionInterval(this SpringJoint obj, float seconds, Func<System.Boolean> func)
            => BindEnableCollisionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEnablePreprocessing(this SpringJoint obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enablePreprocessing = v);
        public static void BindEnablePreprocessing(this SpringJoint obj, IProperty<System.Boolean> property)
            => BindEnablePreprocessing(obj, Bindings2._scope, property);
        public static void BindEnablePreprocessing(this SpringJoint obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enablePreprocessing = func());
        public static void BindEnablePreprocessing(this SpringJoint obj, Func<System.Boolean> func)
            => BindEnablePreprocessing(obj, Bindings2._scope, func);
        public static void BindEnablePreprocessingInterval(this SpringJoint obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enablePreprocessing = func());
        public static void BindEnablePreprocessingInterval(this SpringJoint obj, float seconds, Func<System.Boolean> func)
            => BindEnablePreprocessingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMassScale(this SpringJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.massScale = v);
        public static void BindMassScale(this SpringJoint obj, IProperty<System.Single> property)
            => BindMassScale(obj, Bindings2._scope, property);
        public static void BindMassScale(this SpringJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.massScale = func());
        public static void BindMassScale(this SpringJoint obj, Func<System.Single> func)
            => BindMassScale(obj, Bindings2._scope, func);
        public static void BindMassScaleInterval(this SpringJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.massScale = func());
        public static void BindMassScaleInterval(this SpringJoint obj, float seconds, Func<System.Single> func)
            => BindMassScaleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedMassScale(this SpringJoint obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.connectedMassScale = v);
        public static void BindConnectedMassScale(this SpringJoint obj, IProperty<System.Single> property)
            => BindConnectedMassScale(obj, Bindings2._scope, property);
        public static void BindConnectedMassScale(this SpringJoint obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.connectedMassScale = func());
        public static void BindConnectedMassScale(this SpringJoint obj, Func<System.Single> func)
            => BindConnectedMassScale(obj, Bindings2._scope, func);
        public static void BindConnectedMassScaleInterval(this SpringJoint obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.connectedMassScale = func());
        public static void BindConnectedMassScaleInterval(this SpringJoint obj, float seconds, Func<System.Single> func)
            => BindConnectedMassScaleInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindEnableCollision(this SpringJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enableCollision = v);
        public static void BindEnableCollision(this SpringJoint2D obj, IProperty<System.Boolean> property)
            => BindEnableCollision(obj, Bindings2._scope, property);
        public static void BindEnableCollision(this SpringJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enableCollision = func());
        public static void BindEnableCollision(this SpringJoint2D obj, Func<System.Boolean> func)
            => BindEnableCollision(obj, Bindings2._scope, func);
        public static void BindEnableCollisionInterval(this SpringJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enableCollision = func());
        public static void BindEnableCollisionInterval(this SpringJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindEnableCollisionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedBody(this SpringJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Rigidbody2D> property)
            => bindings.Bind(property, v => obj.connectedBody = v);
        public static void BindConnectedBody(this SpringJoint2D obj, IProperty<UnityEngine.Rigidbody2D> property)
            => BindConnectedBody(obj, Bindings2._scope, property);
        public static void BindConnectedBody(this SpringJoint2D obj, Bindings2 bindings, Func<UnityEngine.Rigidbody2D> func)
            => bindings.BindUpdate(() => obj.connectedBody = func());
        public static void BindConnectedBody(this SpringJoint2D obj, Func<UnityEngine.Rigidbody2D> func)
            => BindConnectedBody(obj, Bindings2._scope, func);
        public static void BindConnectedBodyInterval(this SpringJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rigidbody2D> func)
            => bindings.BindInterval(seconds, () => obj.connectedBody = func());
        public static void BindConnectedBodyInterval(this SpringJoint2D obj, float seconds, Func<UnityEngine.Rigidbody2D> func)
            => BindConnectedBodyInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoConfigureConnectedAnchor(this SpringJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoConfigureConnectedAnchor = v);
        public static void BindAutoConfigureConnectedAnchor(this SpringJoint2D obj, IProperty<System.Boolean> property)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindAutoConfigureConnectedAnchor(this SpringJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchor(this SpringJoint2D obj, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindAutoConfigureConnectedAnchorInterval(this SpringJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchorInterval(this SpringJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAnchor(this SpringJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.anchor = v);
        public static void BindAnchor(this SpringJoint2D obj, IProperty<UnityEngine.Vector2> property)
            => BindAnchor(obj, Bindings2._scope, property);
        public static void BindAnchor(this SpringJoint2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.anchor = func());
        public static void BindAnchor(this SpringJoint2D obj, Func<UnityEngine.Vector2> func)
            => BindAnchor(obj, Bindings2._scope, func);
        public static void BindAnchorInterval(this SpringJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.anchor = func());
        public static void BindAnchorInterval(this SpringJoint2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedAnchor(this SpringJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.connectedAnchor = v);
        public static void BindConnectedAnchor(this SpringJoint2D obj, IProperty<UnityEngine.Vector2> property)
            => BindConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindConnectedAnchor(this SpringJoint2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = func());
        public static void BindConnectedAnchor(this SpringJoint2D obj, Func<UnityEngine.Vector2> func)
            => BindConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindConnectedAnchorInterval(this SpringJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.connectedAnchor = func());
        public static void BindConnectedAnchorInterval(this SpringJoint2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoConfigureDistance(this SpringJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoConfigureDistance = v);
        public static void BindAutoConfigureDistance(this SpringJoint2D obj, IProperty<System.Boolean> property)
            => BindAutoConfigureDistance(obj, Bindings2._scope, property);
        public static void BindAutoConfigureDistance(this SpringJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoConfigureDistance = func());
        public static void BindAutoConfigureDistance(this SpringJoint2D obj, Func<System.Boolean> func)
            => BindAutoConfigureDistance(obj, Bindings2._scope, func);
        public static void BindAutoConfigureDistanceInterval(this SpringJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoConfigureDistance = func());
        public static void BindAutoConfigureDistanceInterval(this SpringJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindAutoConfigureDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDistance(this SpringJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.distance = v);
        public static void BindDistance(this SpringJoint2D obj, IProperty<System.Single> property)
            => BindDistance(obj, Bindings2._scope, property);
        public static void BindDistance(this SpringJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.distance = func());
        public static void BindDistance(this SpringJoint2D obj, Func<System.Single> func)
            => BindDistance(obj, Bindings2._scope, func);
        public static void BindDistanceInterval(this SpringJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.distance = func());
        public static void BindDistanceInterval(this SpringJoint2D obj, float seconds, Func<System.Single> func)
            => BindDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDampingRatio(this SpringJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.dampingRatio = v);
        public static void BindDampingRatio(this SpringJoint2D obj, IProperty<System.Single> property)
            => BindDampingRatio(obj, Bindings2._scope, property);
        public static void BindDampingRatio(this SpringJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.dampingRatio = func());
        public static void BindDampingRatio(this SpringJoint2D obj, Func<System.Single> func)
            => BindDampingRatio(obj, Bindings2._scope, func);
        public static void BindDampingRatioInterval(this SpringJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.dampingRatio = func());
        public static void BindDampingRatioInterval(this SpringJoint2D obj, float seconds, Func<System.Single> func)
            => BindDampingRatioInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFrequency(this SpringJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.frequency = v);
        public static void BindFrequency(this SpringJoint2D obj, IProperty<System.Single> property)
            => BindFrequency(obj, Bindings2._scope, property);
        public static void BindFrequency(this SpringJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.frequency = func());
        public static void BindFrequency(this SpringJoint2D obj, Func<System.Single> func)
            => BindFrequency(obj, Bindings2._scope, func);
        public static void BindFrequencyInterval(this SpringJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.frequency = func());
        public static void BindFrequencyInterval(this SpringJoint2D obj, float seconds, Func<System.Single> func)
            => BindFrequencyInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakForce(this SpringJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakForce = v);
        public static void BindBreakForce(this SpringJoint2D obj, IProperty<System.Single> property)
            => BindBreakForce(obj, Bindings2._scope, property);
        public static void BindBreakForce(this SpringJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakForce = func());
        public static void BindBreakForce(this SpringJoint2D obj, Func<System.Single> func)
            => BindBreakForce(obj, Bindings2._scope, func);
        public static void BindBreakForceInterval(this SpringJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakForce = func());
        public static void BindBreakForceInterval(this SpringJoint2D obj, float seconds, Func<System.Single> func)
            => BindBreakForceInterval(obj, Bindings2._scope, seconds, func);
        #endif


        public static void BindSprite(this SpriteMask obj, Bindings2 bindings, IProperty<UnityEngine.Sprite> property)
            => bindings.Bind(property, v => obj.sprite = v);
        public static void BindSprite(this SpriteMask obj, IProperty<UnityEngine.Sprite> property)
            => BindSprite(obj, Bindings2._scope, property);
        public static void BindSprite(this SpriteMask obj, Bindings2 bindings, Func<UnityEngine.Sprite> func)
            => bindings.BindUpdate(() => obj.sprite = func());
        public static void BindSprite(this SpriteMask obj, Func<UnityEngine.Sprite> func)
            => BindSprite(obj, Bindings2._scope, func);
        public static void BindSpriteInterval(this SpriteMask obj, Bindings2 bindings, float seconds, Func<UnityEngine.Sprite> func)
            => bindings.BindInterval(seconds, () => obj.sprite = func());
        public static void BindSpriteInterval(this SpriteMask obj, float seconds, Func<UnityEngine.Sprite> func)
            => BindSpriteInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAlphaCutoff(this SpriteMask obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.alphaCutoff = v);
        public static void BindAlphaCutoff(this SpriteMask obj, IProperty<System.Single> property)
            => BindAlphaCutoff(obj, Bindings2._scope, property);
        public static void BindAlphaCutoff(this SpriteMask obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.alphaCutoff = func());
        public static void BindAlphaCutoff(this SpriteMask obj, Func<System.Single> func)
            => BindAlphaCutoff(obj, Bindings2._scope, func);
        public static void BindAlphaCutoffInterval(this SpriteMask obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.alphaCutoff = func());
        public static void BindAlphaCutoffInterval(this SpriteMask obj, float seconds, Func<System.Single> func)
            => BindAlphaCutoffInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIsCustomRangeActive(this SpriteMask obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isCustomRangeActive = v);
        public static void BindIsCustomRangeActive(this SpriteMask obj, IProperty<System.Boolean> property)
            => BindIsCustomRangeActive(obj, Bindings2._scope, property);
        public static void BindIsCustomRangeActive(this SpriteMask obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isCustomRangeActive = func());
        public static void BindIsCustomRangeActive(this SpriteMask obj, Func<System.Boolean> func)
            => BindIsCustomRangeActive(obj, Bindings2._scope, func);
        public static void BindIsCustomRangeActiveInterval(this SpriteMask obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isCustomRangeActive = func());
        public static void BindIsCustomRangeActiveInterval(this SpriteMask obj, float seconds, Func<System.Boolean> func)
            => BindIsCustomRangeActiveInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFrontSortingOrder(this SpriteMask obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.frontSortingOrder = v);
        public static void BindFrontSortingOrder(this SpriteMask obj, IProperty<System.Int32> property)
            => BindFrontSortingOrder(obj, Bindings2._scope, property);
        public static void BindFrontSortingOrder(this SpriteMask obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.frontSortingOrder = func());
        public static void BindFrontSortingOrder(this SpriteMask obj, Func<System.Int32> func)
            => BindFrontSortingOrder(obj, Bindings2._scope, func);
        public static void BindFrontSortingOrderInterval(this SpriteMask obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.frontSortingOrder = func());
        public static void BindFrontSortingOrderInterval(this SpriteMask obj, float seconds, Func<System.Int32> func)
            => BindFrontSortingOrderInterval(obj, Bindings2._scope, seconds, func);


        public static void BindSprite(this SpriteRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Sprite> property)
            => bindings.Bind(property, v => obj.sprite = v);
        public static void BindSprite(this SpriteRenderer obj, IProperty<UnityEngine.Sprite> property)
            => BindSprite(obj, Bindings2._scope, property);
        public static void BindSprite(this SpriteRenderer obj, Bindings2 bindings, Func<UnityEngine.Sprite> func)
            => bindings.BindUpdate(() => obj.sprite = func());
        public static void BindSprite(this SpriteRenderer obj, Func<UnityEngine.Sprite> func)
            => BindSprite(obj, Bindings2._scope, func);
        public static void BindSpriteInterval(this SpriteRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Sprite> func)
            => bindings.BindInterval(seconds, () => obj.sprite = func());
        public static void BindSpriteInterval(this SpriteRenderer obj, float seconds, Func<UnityEngine.Sprite> func)
            => BindSpriteInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColor(this SpriteRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.color = v);
        public static void BindColor(this SpriteRenderer obj, IProperty<UnityEngine.Color> property)
            => BindColor(obj, Bindings2._scope, property);
        public static void BindColor(this SpriteRenderer obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.color = func());
        public static void BindColor(this SpriteRenderer obj, Func<UnityEngine.Color> func)
            => BindColor(obj, Bindings2._scope, func);
        public static void BindColorInterval(this SpriteRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.color = func());
        public static void BindColorInterval(this SpriteRenderer obj, float seconds, Func<UnityEngine.Color> func)
            => BindColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFlipX(this SpriteRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.flipX = v);
        public static void BindFlipX(this SpriteRenderer obj, IProperty<System.Boolean> property)
            => BindFlipX(obj, Bindings2._scope, property);
        public static void BindFlipX(this SpriteRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.flipX = func());
        public static void BindFlipX(this SpriteRenderer obj, Func<System.Boolean> func)
            => BindFlipX(obj, Bindings2._scope, func);
        public static void BindFlipXInterval(this SpriteRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.flipX = func());
        public static void BindFlipXInterval(this SpriteRenderer obj, float seconds, Func<System.Boolean> func)
            => BindFlipXInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFlipY(this SpriteRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.flipY = v);
        public static void BindFlipY(this SpriteRenderer obj, IProperty<System.Boolean> property)
            => BindFlipY(obj, Bindings2._scope, property);
        public static void BindFlipY(this SpriteRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.flipY = func());
        public static void BindFlipY(this SpriteRenderer obj, Func<System.Boolean> func)
            => BindFlipY(obj, Bindings2._scope, func);
        public static void BindFlipYInterval(this SpriteRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.flipY = func());
        public static void BindFlipYInterval(this SpriteRenderer obj, float seconds, Func<System.Boolean> func)
            => BindFlipYInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDrawMode(this SpriteRenderer obj, Bindings2 bindings, IProperty<UnityEngine.SpriteDrawMode> property)
            => bindings.Bind(property, v => obj.drawMode = v);
        public static void BindDrawMode(this SpriteRenderer obj, IProperty<UnityEngine.SpriteDrawMode> property)
            => BindDrawMode(obj, Bindings2._scope, property);
        public static void BindDrawMode(this SpriteRenderer obj, Bindings2 bindings, Func<UnityEngine.SpriteDrawMode> func)
            => bindings.BindUpdate(() => obj.drawMode = func());
        public static void BindDrawMode(this SpriteRenderer obj, Func<UnityEngine.SpriteDrawMode> func)
            => BindDrawMode(obj, Bindings2._scope, func);
        public static void BindDrawModeInterval(this SpriteRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.SpriteDrawMode> func)
            => bindings.BindInterval(seconds, () => obj.drawMode = func());
        public static void BindDrawModeInterval(this SpriteRenderer obj, float seconds, Func<UnityEngine.SpriteDrawMode> func)
            => BindDrawModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMaskInteraction(this SpriteRenderer obj, Bindings2 bindings, IProperty<UnityEngine.SpriteMaskInteraction> property)
            => bindings.Bind(property, v => obj.maskInteraction = v);
        public static void BindMaskInteraction(this SpriteRenderer obj, IProperty<UnityEngine.SpriteMaskInteraction> property)
            => BindMaskInteraction(obj, Bindings2._scope, property);
        public static void BindMaskInteraction(this SpriteRenderer obj, Bindings2 bindings, Func<UnityEngine.SpriteMaskInteraction> func)
            => bindings.BindUpdate(() => obj.maskInteraction = func());
        public static void BindMaskInteraction(this SpriteRenderer obj, Func<UnityEngine.SpriteMaskInteraction> func)
            => BindMaskInteraction(obj, Bindings2._scope, func);
        public static void BindMaskInteractionInterval(this SpriteRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.SpriteMaskInteraction> func)
            => bindings.BindInterval(seconds, () => obj.maskInteraction = func());
        public static void BindMaskInteractionInterval(this SpriteRenderer obj, float seconds, Func<UnityEngine.SpriteMaskInteraction> func)
            => BindMaskInteractionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSpriteSortPoint(this SpriteRenderer obj, Bindings2 bindings, IProperty<UnityEngine.SpriteSortPoint> property)
            => bindings.Bind(property, v => obj.spriteSortPoint = v);
        public static void BindSpriteSortPoint(this SpriteRenderer obj, IProperty<UnityEngine.SpriteSortPoint> property)
            => BindSpriteSortPoint(obj, Bindings2._scope, property);
        public static void BindSpriteSortPoint(this SpriteRenderer obj, Bindings2 bindings, Func<UnityEngine.SpriteSortPoint> func)
            => bindings.BindUpdate(() => obj.spriteSortPoint = func());
        public static void BindSpriteSortPoint(this SpriteRenderer obj, Func<UnityEngine.SpriteSortPoint> func)
            => BindSpriteSortPoint(obj, Bindings2._scope, func);
        public static void BindSpriteSortPointInterval(this SpriteRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.SpriteSortPoint> func)
            => bindings.BindInterval(seconds, () => obj.spriteSortPoint = func());
        public static void BindSpriteSortPointInterval(this SpriteRenderer obj, float seconds, Func<UnityEngine.SpriteSortPoint> func)
            => BindSpriteSortPointInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSharedMaterials(this SpriteRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Material[]> property)
            => bindings.Bind(property, v => obj.sharedMaterials = v);
        public static void BindSharedMaterials(this SpriteRenderer obj, IProperty<UnityEngine.Material[]> property)
            => BindSharedMaterials(obj, Bindings2._scope, property);
        public static void BindSharedMaterials(this SpriteRenderer obj, Bindings2 bindings, Func<UnityEngine.Material[]> func)
            => bindings.BindUpdate(() => obj.sharedMaterials = func());
        public static void BindSharedMaterials(this SpriteRenderer obj, Func<UnityEngine.Material[]> func)
            => BindSharedMaterials(obj, Bindings2._scope, func);
        public static void BindSharedMaterialsInterval(this SpriteRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Material[]> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterials = func());
        public static void BindSharedMaterialsInterval(this SpriteRenderer obj, float seconds, Func<UnityEngine.Material[]> func)
            => BindSharedMaterialsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSortingLayerID(this SpriteRenderer obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.sortingLayerID = v);
        public static void BindSortingLayerID(this SpriteRenderer obj, IProperty<System.Int32> property)
            => BindSortingLayerID(obj, Bindings2._scope, property);
        public static void BindSortingLayerID(this SpriteRenderer obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.sortingLayerID = func());
        public static void BindSortingLayerID(this SpriteRenderer obj, Func<System.Int32> func)
            => BindSortingLayerID(obj, Bindings2._scope, func);
        public static void BindSortingLayerIDInterval(this SpriteRenderer obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.sortingLayerID = func());
        public static void BindSortingLayerIDInterval(this SpriteRenderer obj, float seconds, Func<System.Int32> func)
            => BindSortingLayerIDInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSortingOrder(this SpriteRenderer obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.sortingOrder = v);
        public static void BindSortingOrder(this SpriteRenderer obj, IProperty<System.Int32> property)
            => BindSortingOrder(obj, Bindings2._scope, property);
        public static void BindSortingOrder(this SpriteRenderer obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.sortingOrder = func());
        public static void BindSortingOrder(this SpriteRenderer obj, Func<System.Int32> func)
            => BindSortingOrder(obj, Bindings2._scope, func);
        public static void BindSortingOrderInterval(this SpriteRenderer obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.sortingOrder = func());
        public static void BindSortingOrderInterval(this SpriteRenderer obj, float seconds, Func<System.Int32> func)
            => BindSortingOrderInterval(obj, Bindings2._scope, seconds, func);


        #if UNITY_UI
        public static void BindColor(this UnityEngine.U2D.SpriteShapeRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.color = v);
        public static void BindColor(this UnityEngine.U2D.SpriteShapeRenderer obj, IProperty<UnityEngine.Color> property)
            => BindColor(obj, Bindings2._scope, property);
        public static void BindColor(this UnityEngine.U2D.SpriteShapeRenderer obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.color = func());
        public static void BindColor(this UnityEngine.U2D.SpriteShapeRenderer obj, Func<UnityEngine.Color> func)
            => BindColor(obj, Bindings2._scope, func);
        public static void BindColorInterval(this UnityEngine.U2D.SpriteShapeRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.color = func());
        public static void BindColorInterval(this UnityEngine.U2D.SpriteShapeRenderer obj, float seconds, Func<UnityEngine.Color> func)
            => BindColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMaskInteraction(this UnityEngine.U2D.SpriteShapeRenderer obj, Bindings2 bindings, IProperty<UnityEngine.SpriteMaskInteraction> property)
            => bindings.Bind(property, v => obj.maskInteraction = v);
        public static void BindMaskInteraction(this UnityEngine.U2D.SpriteShapeRenderer obj, IProperty<UnityEngine.SpriteMaskInteraction> property)
            => BindMaskInteraction(obj, Bindings2._scope, property);
        public static void BindMaskInteraction(this UnityEngine.U2D.SpriteShapeRenderer obj, Bindings2 bindings, Func<UnityEngine.SpriteMaskInteraction> func)
            => bindings.BindUpdate(() => obj.maskInteraction = func());
        public static void BindMaskInteraction(this UnityEngine.U2D.SpriteShapeRenderer obj, Func<UnityEngine.SpriteMaskInteraction> func)
            => BindMaskInteraction(obj, Bindings2._scope, func);
        public static void BindMaskInteractionInterval(this UnityEngine.U2D.SpriteShapeRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.SpriteMaskInteraction> func)
            => bindings.BindInterval(seconds, () => obj.maskInteraction = func());
        public static void BindMaskInteractionInterval(this UnityEngine.U2D.SpriteShapeRenderer obj, float seconds, Func<UnityEngine.SpriteMaskInteraction> func)
            => BindMaskInteractionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSharedMaterials(this UnityEngine.U2D.SpriteShapeRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Material[]> property)
            => bindings.Bind(property, v => obj.sharedMaterials = v);
        public static void BindSharedMaterials(this UnityEngine.U2D.SpriteShapeRenderer obj, IProperty<UnityEngine.Material[]> property)
            => BindSharedMaterials(obj, Bindings2._scope, property);
        public static void BindSharedMaterials(this UnityEngine.U2D.SpriteShapeRenderer obj, Bindings2 bindings, Func<UnityEngine.Material[]> func)
            => bindings.BindUpdate(() => obj.sharedMaterials = func());
        public static void BindSharedMaterials(this UnityEngine.U2D.SpriteShapeRenderer obj, Func<UnityEngine.Material[]> func)
            => BindSharedMaterials(obj, Bindings2._scope, func);
        public static void BindSharedMaterialsInterval(this UnityEngine.U2D.SpriteShapeRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Material[]> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterials = func());
        public static void BindSharedMaterialsInterval(this UnityEngine.U2D.SpriteShapeRenderer obj, float seconds, Func<UnityEngine.Material[]> func)
            => BindSharedMaterialsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSortingLayerID(this UnityEngine.U2D.SpriteShapeRenderer obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.sortingLayerID = v);
        public static void BindSortingLayerID(this UnityEngine.U2D.SpriteShapeRenderer obj, IProperty<System.Int32> property)
            => BindSortingLayerID(obj, Bindings2._scope, property);
        public static void BindSortingLayerID(this UnityEngine.U2D.SpriteShapeRenderer obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.sortingLayerID = func());
        public static void BindSortingLayerID(this UnityEngine.U2D.SpriteShapeRenderer obj, Func<System.Int32> func)
            => BindSortingLayerID(obj, Bindings2._scope, func);
        public static void BindSortingLayerIDInterval(this UnityEngine.U2D.SpriteShapeRenderer obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.sortingLayerID = func());
        public static void BindSortingLayerIDInterval(this UnityEngine.U2D.SpriteShapeRenderer obj, float seconds, Func<System.Int32> func)
            => BindSortingLayerIDInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSortingOrder(this UnityEngine.U2D.SpriteShapeRenderer obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.sortingOrder = v);
        public static void BindSortingOrder(this UnityEngine.U2D.SpriteShapeRenderer obj, IProperty<System.Int32> property)
            => BindSortingOrder(obj, Bindings2._scope, property);
        public static void BindSortingOrder(this UnityEngine.U2D.SpriteShapeRenderer obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.sortingOrder = func());
        public static void BindSortingOrder(this UnityEngine.U2D.SpriteShapeRenderer obj, Func<System.Int32> func)
            => BindSortingOrder(obj, Bindings2._scope, func);
        public static void BindSortingOrderInterval(this UnityEngine.U2D.SpriteShapeRenderer obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.sortingOrder = func());
        public static void BindSortingOrderInterval(this UnityEngine.U2D.SpriteShapeRenderer obj, float seconds, Func<System.Int32> func)
            => BindSortingOrderInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindHorizontalAxis<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, Bindings2 bindings, IProperty<T> property)
            => bindings.Bind(property, v => obj.horizontalAxis = v.ToString());
        public static void BindHorizontalAxis<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, IProperty<T> property)
            => BindHorizontalAxis(obj, Bindings2._scope, property);
        public static void BindHorizontalAxis<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, Bindings2 bindings, Func<T> func)
            => bindings.BindUpdate(() => obj.horizontalAxis = func().ToString());
        public static void BindHorizontalAxis<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, Func<T> func)
            => BindHorizontalAxis(obj, Bindings2._scope, func);
        public static void BindHorizontalAxisInterval<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, Bindings2 bindings, float seconds, Func<T> func)
            => bindings.BindInterval(seconds, () => obj.horizontalAxis = func().ToString());
        public static void BindHorizontalAxisInterval<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, float seconds, Func<T> func)
            => BindHorizontalAxisInterval(obj, Bindings2._scope, seconds, func);
        public static void BindVerticalAxis<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, Bindings2 bindings, IProperty<T> property)
            => bindings.Bind(property, v => obj.verticalAxis = v.ToString());
        public static void BindVerticalAxis<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, IProperty<T> property)
            => BindVerticalAxis(obj, Bindings2._scope, property);
        public static void BindVerticalAxis<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, Bindings2 bindings, Func<T> func)
            => bindings.BindUpdate(() => obj.verticalAxis = func().ToString());
        public static void BindVerticalAxis<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, Func<T> func)
            => BindVerticalAxis(obj, Bindings2._scope, func);
        public static void BindVerticalAxisInterval<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, Bindings2 bindings, float seconds, Func<T> func)
            => bindings.BindInterval(seconds, () => obj.verticalAxis = func().ToString());
        public static void BindVerticalAxisInterval<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, float seconds, Func<T> func)
            => BindVerticalAxisInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSubmitButton<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, Bindings2 bindings, IProperty<T> property)
            => bindings.Bind(property, v => obj.submitButton = v.ToString());
        public static void BindSubmitButton<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, IProperty<T> property)
            => BindSubmitButton(obj, Bindings2._scope, property);
        public static void BindSubmitButton<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, Bindings2 bindings, Func<T> func)
            => bindings.BindUpdate(() => obj.submitButton = func().ToString());
        public static void BindSubmitButton<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, Func<T> func)
            => BindSubmitButton(obj, Bindings2._scope, func);
        public static void BindSubmitButtonInterval<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, Bindings2 bindings, float seconds, Func<T> func)
            => bindings.BindInterval(seconds, () => obj.submitButton = func().ToString());
        public static void BindSubmitButtonInterval<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, float seconds, Func<T> func)
            => BindSubmitButtonInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCancelButton<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, Bindings2 bindings, IProperty<T> property)
            => bindings.Bind(property, v => obj.cancelButton = v.ToString());
        public static void BindCancelButton<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, IProperty<T> property)
            => BindCancelButton(obj, Bindings2._scope, property);
        public static void BindCancelButton<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, Bindings2 bindings, Func<T> func)
            => bindings.BindUpdate(() => obj.cancelButton = func().ToString());
        public static void BindCancelButton<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, Func<T> func)
            => BindCancelButton(obj, Bindings2._scope, func);
        public static void BindCancelButtonInterval<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, Bindings2 bindings, float seconds, Func<T> func)
            => bindings.BindInterval(seconds, () => obj.cancelButton = func().ToString());
        public static void BindCancelButtonInterval<T>(this UnityEngine.EventSystems.StandaloneInputModule obj, float seconds, Func<T> func)
            => BindCancelButtonInterval(obj, Bindings2._scope, seconds, func);
        public static void BindInputActionsPerSecond(this UnityEngine.EventSystems.StandaloneInputModule obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.inputActionsPerSecond = v);
        public static void BindInputActionsPerSecond(this UnityEngine.EventSystems.StandaloneInputModule obj, IProperty<System.Single> property)
            => BindInputActionsPerSecond(obj, Bindings2._scope, property);
        public static void BindInputActionsPerSecond(this UnityEngine.EventSystems.StandaloneInputModule obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.inputActionsPerSecond = func());
        public static void BindInputActionsPerSecond(this UnityEngine.EventSystems.StandaloneInputModule obj, Func<System.Single> func)
            => BindInputActionsPerSecond(obj, Bindings2._scope, func);
        public static void BindInputActionsPerSecondInterval(this UnityEngine.EventSystems.StandaloneInputModule obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.inputActionsPerSecond = func());
        public static void BindInputActionsPerSecondInterval(this UnityEngine.EventSystems.StandaloneInputModule obj, float seconds, Func<System.Single> func)
            => BindInputActionsPerSecondInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRepeatDelay(this UnityEngine.EventSystems.StandaloneInputModule obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.repeatDelay = v);
        public static void BindRepeatDelay(this UnityEngine.EventSystems.StandaloneInputModule obj, IProperty<System.Single> property)
            => BindRepeatDelay(obj, Bindings2._scope, property);
        public static void BindRepeatDelay(this UnityEngine.EventSystems.StandaloneInputModule obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.repeatDelay = func());
        public static void BindRepeatDelay(this UnityEngine.EventSystems.StandaloneInputModule obj, Func<System.Single> func)
            => BindRepeatDelay(obj, Bindings2._scope, func);
        public static void BindRepeatDelayInterval(this UnityEngine.EventSystems.StandaloneInputModule obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.repeatDelay = func());
        public static void BindRepeatDelayInterval(this UnityEngine.EventSystems.StandaloneInputModule obj, float seconds, Func<System.Single> func)
            => BindRepeatDelayInterval(obj, Bindings2._scope, seconds, func);
        #endif


        public static void BindStreamingMipmapBias(this StreamingController obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.streamingMipmapBias = v);
        public static void BindStreamingMipmapBias(this StreamingController obj, IProperty<System.Single> property)
            => BindStreamingMipmapBias(obj, Bindings2._scope, property);
        public static void BindStreamingMipmapBias(this StreamingController obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.streamingMipmapBias = func());
        public static void BindStreamingMipmapBias(this StreamingController obj, Func<System.Single> func)
            => BindStreamingMipmapBias(obj, Bindings2._scope, func);
        public static void BindStreamingMipmapBiasInterval(this StreamingController obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.streamingMipmapBias = func());
        public static void BindStreamingMipmapBiasInterval(this StreamingController obj, float seconds, Func<System.Single> func)
            => BindStreamingMipmapBiasInterval(obj, Bindings2._scope, seconds, func);


        #if UNITY_PHYSICS_2D
        public static void BindUseColliderMask(this SurfaceEffector2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useColliderMask = v);
        public static void BindUseColliderMask(this SurfaceEffector2D obj, IProperty<System.Boolean> property)
            => BindUseColliderMask(obj, Bindings2._scope, property);
        public static void BindUseColliderMask(this SurfaceEffector2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useColliderMask = func());
        public static void BindUseColliderMask(this SurfaceEffector2D obj, Func<System.Boolean> func)
            => BindUseColliderMask(obj, Bindings2._scope, func);
        public static void BindUseColliderMaskInterval(this SurfaceEffector2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useColliderMask = func());
        public static void BindUseColliderMaskInterval(this SurfaceEffector2D obj, float seconds, Func<System.Boolean> func)
            => BindUseColliderMaskInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColliderMask(this SurfaceEffector2D obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.colliderMask = v);
        public static void BindColliderMask(this SurfaceEffector2D obj, IProperty<System.Int32> property)
            => BindColliderMask(obj, Bindings2._scope, property);
        public static void BindColliderMask(this SurfaceEffector2D obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.colliderMask = func());
        public static void BindColliderMask(this SurfaceEffector2D obj, Func<System.Int32> func)
            => BindColliderMask(obj, Bindings2._scope, func);
        public static void BindColliderMaskInterval(this SurfaceEffector2D obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.colliderMask = func());
        public static void BindColliderMaskInterval(this SurfaceEffector2D obj, float seconds, Func<System.Int32> func)
            => BindColliderMaskInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSpeed(this SurfaceEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.speed = v);
        public static void BindSpeed(this SurfaceEffector2D obj, IProperty<System.Single> property)
            => BindSpeed(obj, Bindings2._scope, property);
        public static void BindSpeed(this SurfaceEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.speed = func());
        public static void BindSpeed(this SurfaceEffector2D obj, Func<System.Single> func)
            => BindSpeed(obj, Bindings2._scope, func);
        public static void BindSpeedInterval(this SurfaceEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.speed = func());
        public static void BindSpeedInterval(this SurfaceEffector2D obj, float seconds, Func<System.Single> func)
            => BindSpeedInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSpeedVariation(this SurfaceEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.speedVariation = v);
        public static void BindSpeedVariation(this SurfaceEffector2D obj, IProperty<System.Single> property)
            => BindSpeedVariation(obj, Bindings2._scope, property);
        public static void BindSpeedVariation(this SurfaceEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.speedVariation = func());
        public static void BindSpeedVariation(this SurfaceEffector2D obj, Func<System.Single> func)
            => BindSpeedVariation(obj, Bindings2._scope, func);
        public static void BindSpeedVariationInterval(this SurfaceEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.speedVariation = func());
        public static void BindSpeedVariationInterval(this SurfaceEffector2D obj, float seconds, Func<System.Single> func)
            => BindSpeedVariationInterval(obj, Bindings2._scope, seconds, func);
        public static void BindForceScale(this SurfaceEffector2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.forceScale = v);
        public static void BindForceScale(this SurfaceEffector2D obj, IProperty<System.Single> property)
            => BindForceScale(obj, Bindings2._scope, property);
        public static void BindForceScale(this SurfaceEffector2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.forceScale = func());
        public static void BindForceScale(this SurfaceEffector2D obj, Func<System.Single> func)
            => BindForceScale(obj, Bindings2._scope, func);
        public static void BindForceScaleInterval(this SurfaceEffector2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.forceScale = func());
        public static void BindForceScaleInterval(this SurfaceEffector2D obj, float seconds, Func<System.Single> func)
            => BindForceScaleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseContactForce(this SurfaceEffector2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useContactForce = v);
        public static void BindUseContactForce(this SurfaceEffector2D obj, IProperty<System.Boolean> property)
            => BindUseContactForce(obj, Bindings2._scope, property);
        public static void BindUseContactForce(this SurfaceEffector2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useContactForce = func());
        public static void BindUseContactForce(this SurfaceEffector2D obj, Func<System.Boolean> func)
            => BindUseContactForce(obj, Bindings2._scope, func);
        public static void BindUseContactForceInterval(this SurfaceEffector2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useContactForce = func());
        public static void BindUseContactForceInterval(this SurfaceEffector2D obj, float seconds, Func<System.Boolean> func)
            => BindUseContactForceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseFriction(this SurfaceEffector2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useFriction = v);
        public static void BindUseFriction(this SurfaceEffector2D obj, IProperty<System.Boolean> property)
            => BindUseFriction(obj, Bindings2._scope, property);
        public static void BindUseFriction(this SurfaceEffector2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useFriction = func());
        public static void BindUseFriction(this SurfaceEffector2D obj, Func<System.Boolean> func)
            => BindUseFriction(obj, Bindings2._scope, func);
        public static void BindUseFrictionInterval(this SurfaceEffector2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useFriction = func());
        public static void BindUseFrictionInterval(this SurfaceEffector2D obj, float seconds, Func<System.Boolean> func)
            => BindUseFrictionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseBounce(this SurfaceEffector2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useBounce = v);
        public static void BindUseBounce(this SurfaceEffector2D obj, IProperty<System.Boolean> property)
            => BindUseBounce(obj, Bindings2._scope, property);
        public static void BindUseBounce(this SurfaceEffector2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useBounce = func());
        public static void BindUseBounce(this SurfaceEffector2D obj, Func<System.Boolean> func)
            => BindUseBounce(obj, Bindings2._scope, func);
        public static void BindUseBounceInterval(this SurfaceEffector2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useBounce = func());
        public static void BindUseBounceInterval(this SurfaceEffector2D obj, float seconds, Func<System.Boolean> func)
            => BindUseBounceInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindAnchor(this TargetJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.anchor = v);
        public static void BindAnchor(this TargetJoint2D obj, IProperty<UnityEngine.Vector2> property)
            => BindAnchor(obj, Bindings2._scope, property);
        public static void BindAnchor(this TargetJoint2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.anchor = func());
        public static void BindAnchor(this TargetJoint2D obj, Func<UnityEngine.Vector2> func)
            => BindAnchor(obj, Bindings2._scope, func);
        public static void BindAnchorInterval(this TargetJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.anchor = func());
        public static void BindAnchorInterval(this TargetJoint2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTarget(this TargetJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.target = v);
        public static void BindTarget(this TargetJoint2D obj, IProperty<UnityEngine.Vector2> property)
            => BindTarget(obj, Bindings2._scope, property);
        public static void BindTarget(this TargetJoint2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.target = func());
        public static void BindTarget(this TargetJoint2D obj, Func<UnityEngine.Vector2> func)
            => BindTarget(obj, Bindings2._scope, func);
        public static void BindTargetInterval(this TargetJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.target = func());
        public static void BindTargetInterval(this TargetJoint2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindTargetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoConfigureTarget(this TargetJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoConfigureTarget = v);
        public static void BindAutoConfigureTarget(this TargetJoint2D obj, IProperty<System.Boolean> property)
            => BindAutoConfigureTarget(obj, Bindings2._scope, property);
        public static void BindAutoConfigureTarget(this TargetJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoConfigureTarget = func());
        public static void BindAutoConfigureTarget(this TargetJoint2D obj, Func<System.Boolean> func)
            => BindAutoConfigureTarget(obj, Bindings2._scope, func);
        public static void BindAutoConfigureTargetInterval(this TargetJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoConfigureTarget = func());
        public static void BindAutoConfigureTargetInterval(this TargetJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindAutoConfigureTargetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMaxForce(this TargetJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.maxForce = v);
        public static void BindMaxForce(this TargetJoint2D obj, IProperty<System.Single> property)
            => BindMaxForce(obj, Bindings2._scope, property);
        public static void BindMaxForce(this TargetJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.maxForce = func());
        public static void BindMaxForce(this TargetJoint2D obj, Func<System.Single> func)
            => BindMaxForce(obj, Bindings2._scope, func);
        public static void BindMaxForceInterval(this TargetJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.maxForce = func());
        public static void BindMaxForceInterval(this TargetJoint2D obj, float seconds, Func<System.Single> func)
            => BindMaxForceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDampingRatio(this TargetJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.dampingRatio = v);
        public static void BindDampingRatio(this TargetJoint2D obj, IProperty<System.Single> property)
            => BindDampingRatio(obj, Bindings2._scope, property);
        public static void BindDampingRatio(this TargetJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.dampingRatio = func());
        public static void BindDampingRatio(this TargetJoint2D obj, Func<System.Single> func)
            => BindDampingRatio(obj, Bindings2._scope, func);
        public static void BindDampingRatioInterval(this TargetJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.dampingRatio = func());
        public static void BindDampingRatioInterval(this TargetJoint2D obj, float seconds, Func<System.Single> func)
            => BindDampingRatioInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFrequency(this TargetJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.frequency = v);
        public static void BindFrequency(this TargetJoint2D obj, IProperty<System.Single> property)
            => BindFrequency(obj, Bindings2._scope, property);
        public static void BindFrequency(this TargetJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.frequency = func());
        public static void BindFrequency(this TargetJoint2D obj, Func<System.Single> func)
            => BindFrequency(obj, Bindings2._scope, func);
        public static void BindFrequencyInterval(this TargetJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.frequency = func());
        public static void BindFrequencyInterval(this TargetJoint2D obj, float seconds, Func<System.Single> func)
            => BindFrequencyInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakForce(this TargetJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakForce = v);
        public static void BindBreakForce(this TargetJoint2D obj, IProperty<System.Single> property)
            => BindBreakForce(obj, Bindings2._scope, property);
        public static void BindBreakForce(this TargetJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakForce = func());
        public static void BindBreakForce(this TargetJoint2D obj, Func<System.Single> func)
            => BindBreakForce(obj, Bindings2._scope, func);
        public static void BindBreakForceInterval(this TargetJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakForce = func());
        public static void BindBreakForceInterval(this TargetJoint2D obj, float seconds, Func<System.Single> func)
            => BindBreakForceInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_TERRAIN_PHYSICS
        public static void BindIsTrigger(this TerrainCollider obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isTrigger = v);
        public static void BindIsTrigger(this TerrainCollider obj, IProperty<System.Boolean> property)
            => BindIsTrigger(obj, Bindings2._scope, property);
        public static void BindIsTrigger(this TerrainCollider obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isTrigger = func());
        public static void BindIsTrigger(this TerrainCollider obj, Func<System.Boolean> func)
            => BindIsTrigger(obj, Bindings2._scope, func);
        public static void BindIsTriggerInterval(this TerrainCollider obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isTrigger = func());
        public static void BindIsTriggerInterval(this TerrainCollider obj, float seconds, Func<System.Boolean> func)
            => BindIsTriggerInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_6000_0_OR_NEWER
        public static void BindSharedMaterial(this TerrainCollider obj, Bindings2 bindings, IProperty<PhysicMaterial> property)
            => bindings.Bind(property, v => obj.sharedMaterial = v);
        public static void BindSharedMaterial(this TerrainCollider obj, IProperty<PhysicMaterial> property)
            => BindSharedMaterial(obj, Bindings2._scope, property);
        public static void BindSharedMaterial(this TerrainCollider obj, Bindings2 bindings, Func<PhysicMaterial> func)
            => bindings.BindUpdate(() => obj.sharedMaterial = func());
        public static void BindSharedMaterial(this TerrainCollider obj, Func<PhysicMaterial> func)
            => BindSharedMaterial(obj, Bindings2._scope, func);
        public static void BindSharedMaterialInterval(this TerrainCollider obj, Bindings2 bindings, float seconds, Func<PhysicMaterial> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterial = func());
        public static void BindSharedMaterialInterval(this TerrainCollider obj, float seconds, Func<PhysicMaterial> func)
            => BindSharedMaterialInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_6000_0_OR_NEWER
        public static void BindSharedMaterial(this TerrainCollider obj, Bindings2 bindings, IProperty<PhysicsMaterial> property)
            => bindings.Bind(property, v => obj.sharedMaterial = v);
        public static void BindSharedMaterial(this TerrainCollider obj, IProperty<PhysicsMaterial> property)
            => BindSharedMaterial(obj, Bindings2._scope, property);
        public static void BindSharedMaterial(this TerrainCollider obj, Bindings2 bindings, Func<PhysicsMaterial> func)
            => bindings.BindUpdate(() => obj.sharedMaterial = func());
        public static void BindSharedMaterial(this TerrainCollider obj, Func<PhysicsMaterial> func)
            => BindSharedMaterial(obj, Bindings2._scope, func);
        public static void BindSharedMaterialInterval(this TerrainCollider obj, Bindings2 bindings, float seconds, Func<PhysicsMaterial> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterial = func());
        public static void BindSharedMaterialInterval(this TerrainCollider obj, float seconds, Func<PhysicsMaterial> func)
            => BindSharedMaterialInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindTerrainData(this TerrainCollider obj, Bindings2 bindings, IProperty<UnityEngine.TerrainData> property)
            => bindings.Bind(property, v => obj.terrainData = v);
        public static void BindTerrainData(this TerrainCollider obj, IProperty<UnityEngine.TerrainData> property)
            => BindTerrainData(obj, Bindings2._scope, property);
        public static void BindTerrainData(this TerrainCollider obj, Bindings2 bindings, Func<UnityEngine.TerrainData> func)
            => bindings.BindUpdate(() => obj.terrainData = func());
        public static void BindTerrainData(this TerrainCollider obj, Func<UnityEngine.TerrainData> func)
            => BindTerrainData(obj, Bindings2._scope, func);
        public static void BindTerrainDataInterval(this TerrainCollider obj, Bindings2 bindings, float seconds, Func<UnityEngine.TerrainData> func)
            => bindings.BindInterval(seconds, () => obj.terrainData = func());
        public static void BindTerrainDataInterval(this TerrainCollider obj, float seconds, Func<UnityEngine.TerrainData> func)
            => BindTerrainDataInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindText<T>(this UnityEngine.UI.Text obj, Bindings2 bindings, IProperty<T> property)
            => bindings.Bind(property, v => obj.text = v.ToString());
        public static void BindText<T>(this UnityEngine.UI.Text obj, IProperty<T> property)
            => BindText(obj, Bindings2._scope, property);
        public static void BindText<T>(this UnityEngine.UI.Text obj, Bindings2 bindings, Func<T> func)
            => bindings.BindUpdate(() => obj.text = func().ToString());
        public static void BindText<T>(this UnityEngine.UI.Text obj, Func<T> func)
            => BindText(obj, Bindings2._scope, func);
        public static void BindTextInterval<T>(this UnityEngine.UI.Text obj, Bindings2 bindings, float seconds, Func<T> func)
            => bindings.BindInterval(seconds, () => obj.text = func().ToString());
        public static void BindTextInterval<T>(this UnityEngine.UI.Text obj, float seconds, Func<T> func)
            => BindTextInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFont(this UnityEngine.UI.Text obj, Bindings2 bindings, IProperty<UnityEngine.Font> property)
            => bindings.Bind(property, v => obj.font = v);
        public static void BindFont(this UnityEngine.UI.Text obj, IProperty<UnityEngine.Font> property)
            => BindFont(obj, Bindings2._scope, property);
        public static void BindFont(this UnityEngine.UI.Text obj, Bindings2 bindings, Func<UnityEngine.Font> func)
            => bindings.BindUpdate(() => obj.font = func());
        public static void BindFont(this UnityEngine.UI.Text obj, Func<UnityEngine.Font> func)
            => BindFont(obj, Bindings2._scope, func);
        public static void BindFontInterval(this UnityEngine.UI.Text obj, Bindings2 bindings, float seconds, Func<UnityEngine.Font> func)
            => bindings.BindInterval(seconds, () => obj.font = func());
        public static void BindFontInterval(this UnityEngine.UI.Text obj, float seconds, Func<UnityEngine.Font> func)
            => BindFontInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFontStyle(this UnityEngine.UI.Text obj, Bindings2 bindings, IProperty<UnityEngine.FontStyle> property)
            => bindings.Bind(property, v => obj.fontStyle = v);
        public static void BindFontStyle(this UnityEngine.UI.Text obj, IProperty<UnityEngine.FontStyle> property)
            => BindFontStyle(obj, Bindings2._scope, property);
        public static void BindFontStyle(this UnityEngine.UI.Text obj, Bindings2 bindings, Func<UnityEngine.FontStyle> func)
            => bindings.BindUpdate(() => obj.fontStyle = func());
        public static void BindFontStyle(this UnityEngine.UI.Text obj, Func<UnityEngine.FontStyle> func)
            => BindFontStyle(obj, Bindings2._scope, func);
        public static void BindFontStyleInterval(this UnityEngine.UI.Text obj, Bindings2 bindings, float seconds, Func<UnityEngine.FontStyle> func)
            => bindings.BindInterval(seconds, () => obj.fontStyle = func());
        public static void BindFontStyleInterval(this UnityEngine.UI.Text obj, float seconds, Func<UnityEngine.FontStyle> func)
            => BindFontStyleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFontSize(this UnityEngine.UI.Text obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.fontSize = v);
        public static void BindFontSize(this UnityEngine.UI.Text obj, IProperty<System.Int32> property)
            => BindFontSize(obj, Bindings2._scope, property);
        public static void BindFontSize(this UnityEngine.UI.Text obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.fontSize = func());
        public static void BindFontSize(this UnityEngine.UI.Text obj, Func<System.Int32> func)
            => BindFontSize(obj, Bindings2._scope, func);
        public static void BindFontSizeInterval(this UnityEngine.UI.Text obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.fontSize = func());
        public static void BindFontSizeInterval(this UnityEngine.UI.Text obj, float seconds, Func<System.Int32> func)
            => BindFontSizeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLineSpacing(this UnityEngine.UI.Text obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.lineSpacing = v);
        public static void BindLineSpacing(this UnityEngine.UI.Text obj, IProperty<System.Single> property)
            => BindLineSpacing(obj, Bindings2._scope, property);
        public static void BindLineSpacing(this UnityEngine.UI.Text obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.lineSpacing = func());
        public static void BindLineSpacing(this UnityEngine.UI.Text obj, Func<System.Single> func)
            => BindLineSpacing(obj, Bindings2._scope, func);
        public static void BindLineSpacingInterval(this UnityEngine.UI.Text obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.lineSpacing = func());
        public static void BindLineSpacingInterval(this UnityEngine.UI.Text obj, float seconds, Func<System.Single> func)
            => BindLineSpacingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSupportRichText(this UnityEngine.UI.Text obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.supportRichText = v);
        public static void BindSupportRichText(this UnityEngine.UI.Text obj, IProperty<System.Boolean> property)
            => BindSupportRichText(obj, Bindings2._scope, property);
        public static void BindSupportRichText(this UnityEngine.UI.Text obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.supportRichText = func());
        public static void BindSupportRichText(this UnityEngine.UI.Text obj, Func<System.Boolean> func)
            => BindSupportRichText(obj, Bindings2._scope, func);
        public static void BindSupportRichTextInterval(this UnityEngine.UI.Text obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.supportRichText = func());
        public static void BindSupportRichTextInterval(this UnityEngine.UI.Text obj, float seconds, Func<System.Boolean> func)
            => BindSupportRichTextInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAlignment(this UnityEngine.UI.Text obj, Bindings2 bindings, IProperty<UnityEngine.TextAnchor> property)
            => bindings.Bind(property, v => obj.alignment = v);
        public static void BindAlignment(this UnityEngine.UI.Text obj, IProperty<UnityEngine.TextAnchor> property)
            => BindAlignment(obj, Bindings2._scope, property);
        public static void BindAlignment(this UnityEngine.UI.Text obj, Bindings2 bindings, Func<UnityEngine.TextAnchor> func)
            => bindings.BindUpdate(() => obj.alignment = func());
        public static void BindAlignment(this UnityEngine.UI.Text obj, Func<UnityEngine.TextAnchor> func)
            => BindAlignment(obj, Bindings2._scope, func);
        public static void BindAlignmentInterval(this UnityEngine.UI.Text obj, Bindings2 bindings, float seconds, Func<UnityEngine.TextAnchor> func)
            => bindings.BindInterval(seconds, () => obj.alignment = func());
        public static void BindAlignmentInterval(this UnityEngine.UI.Text obj, float seconds, Func<UnityEngine.TextAnchor> func)
            => BindAlignmentInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAlignByGeometry(this UnityEngine.UI.Text obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.alignByGeometry = v);
        public static void BindAlignByGeometry(this UnityEngine.UI.Text obj, IProperty<System.Boolean> property)
            => BindAlignByGeometry(obj, Bindings2._scope, property);
        public static void BindAlignByGeometry(this UnityEngine.UI.Text obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.alignByGeometry = func());
        public static void BindAlignByGeometry(this UnityEngine.UI.Text obj, Func<System.Boolean> func)
            => BindAlignByGeometry(obj, Bindings2._scope, func);
        public static void BindAlignByGeometryInterval(this UnityEngine.UI.Text obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.alignByGeometry = func());
        public static void BindAlignByGeometryInterval(this UnityEngine.UI.Text obj, float seconds, Func<System.Boolean> func)
            => BindAlignByGeometryInterval(obj, Bindings2._scope, seconds, func);
        public static void BindHorizontalOverflow(this UnityEngine.UI.Text obj, Bindings2 bindings, IProperty<UnityEngine.HorizontalWrapMode> property)
            => bindings.Bind(property, v => obj.horizontalOverflow = v);
        public static void BindHorizontalOverflow(this UnityEngine.UI.Text obj, IProperty<UnityEngine.HorizontalWrapMode> property)
            => BindHorizontalOverflow(obj, Bindings2._scope, property);
        public static void BindHorizontalOverflow(this UnityEngine.UI.Text obj, Bindings2 bindings, Func<UnityEngine.HorizontalWrapMode> func)
            => bindings.BindUpdate(() => obj.horizontalOverflow = func());
        public static void BindHorizontalOverflow(this UnityEngine.UI.Text obj, Func<UnityEngine.HorizontalWrapMode> func)
            => BindHorizontalOverflow(obj, Bindings2._scope, func);
        public static void BindHorizontalOverflowInterval(this UnityEngine.UI.Text obj, Bindings2 bindings, float seconds, Func<UnityEngine.HorizontalWrapMode> func)
            => bindings.BindInterval(seconds, () => obj.horizontalOverflow = func());
        public static void BindHorizontalOverflowInterval(this UnityEngine.UI.Text obj, float seconds, Func<UnityEngine.HorizontalWrapMode> func)
            => BindHorizontalOverflowInterval(obj, Bindings2._scope, seconds, func);
        public static void BindVerticalOverflow(this UnityEngine.UI.Text obj, Bindings2 bindings, IProperty<UnityEngine.VerticalWrapMode> property)
            => bindings.Bind(property, v => obj.verticalOverflow = v);
        public static void BindVerticalOverflow(this UnityEngine.UI.Text obj, IProperty<UnityEngine.VerticalWrapMode> property)
            => BindVerticalOverflow(obj, Bindings2._scope, property);
        public static void BindVerticalOverflow(this UnityEngine.UI.Text obj, Bindings2 bindings, Func<UnityEngine.VerticalWrapMode> func)
            => bindings.BindUpdate(() => obj.verticalOverflow = func());
        public static void BindVerticalOverflow(this UnityEngine.UI.Text obj, Func<UnityEngine.VerticalWrapMode> func)
            => BindVerticalOverflow(obj, Bindings2._scope, func);
        public static void BindVerticalOverflowInterval(this UnityEngine.UI.Text obj, Bindings2 bindings, float seconds, Func<UnityEngine.VerticalWrapMode> func)
            => bindings.BindInterval(seconds, () => obj.verticalOverflow = func());
        public static void BindVerticalOverflowInterval(this UnityEngine.UI.Text obj, float seconds, Func<UnityEngine.VerticalWrapMode> func)
            => BindVerticalOverflowInterval(obj, Bindings2._scope, seconds, func);
        public static void BindResizeTextForBestFit(this UnityEngine.UI.Text obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.resizeTextForBestFit = v);
        public static void BindResizeTextForBestFit(this UnityEngine.UI.Text obj, IProperty<System.Boolean> property)
            => BindResizeTextForBestFit(obj, Bindings2._scope, property);
        public static void BindResizeTextForBestFit(this UnityEngine.UI.Text obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.resizeTextForBestFit = func());
        public static void BindResizeTextForBestFit(this UnityEngine.UI.Text obj, Func<System.Boolean> func)
            => BindResizeTextForBestFit(obj, Bindings2._scope, func);
        public static void BindResizeTextForBestFitInterval(this UnityEngine.UI.Text obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.resizeTextForBestFit = func());
        public static void BindResizeTextForBestFitInterval(this UnityEngine.UI.Text obj, float seconds, Func<System.Boolean> func)
            => BindResizeTextForBestFitInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColor(this UnityEngine.UI.Text obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.color = v);
        public static void BindColor(this UnityEngine.UI.Text obj, IProperty<UnityEngine.Color> property)
            => BindColor(obj, Bindings2._scope, property);
        public static void BindColor(this UnityEngine.UI.Text obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.color = func());
        public static void BindColor(this UnityEngine.UI.Text obj, Func<UnityEngine.Color> func)
            => BindColor(obj, Bindings2._scope, func);
        public static void BindColorInterval(this UnityEngine.UI.Text obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.color = func());
        public static void BindColorInterval(this UnityEngine.UI.Text obj, float seconds, Func<UnityEngine.Color> func)
            => BindColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRaycastTarget(this UnityEngine.UI.Text obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.raycastTarget = v);
        public static void BindRaycastTarget(this UnityEngine.UI.Text obj, IProperty<System.Boolean> property)
            => BindRaycastTarget(obj, Bindings2._scope, property);
        public static void BindRaycastTarget(this UnityEngine.UI.Text obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.raycastTarget = func());
        public static void BindRaycastTarget(this UnityEngine.UI.Text obj, Func<System.Boolean> func)
            => BindRaycastTarget(obj, Bindings2._scope, func);
        public static void BindRaycastTargetInterval(this UnityEngine.UI.Text obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.raycastTarget = func());
        public static void BindRaycastTargetInterval(this UnityEngine.UI.Text obj, float seconds, Func<System.Boolean> func)
            => BindRaycastTargetInterval(obj, Bindings2._scope, seconds, func);
        #if UNITY_2020_1_OR_NEWER
        public static void BindRaycastPadding(this UnityEngine.UI.Text obj, Bindings2 bindings, IProperty<UnityEngine.Vector4> property)
            => bindings.Bind(property, v => obj.raycastPadding = v);
        public static void BindRaycastPadding(this UnityEngine.UI.Text obj, IProperty<UnityEngine.Vector4> property)
            => BindRaycastPadding(obj, Bindings2._scope, property);
        public static void BindRaycastPadding(this UnityEngine.UI.Text obj, Bindings2 bindings, Func<UnityEngine.Vector4> func)
            => bindings.BindUpdate(() => obj.raycastPadding = func());
        public static void BindRaycastPadding(this UnityEngine.UI.Text obj, Func<UnityEngine.Vector4> func)
            => BindRaycastPadding(obj, Bindings2._scope, func);
        public static void BindRaycastPaddingInterval(this UnityEngine.UI.Text obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector4> func)
            => bindings.BindInterval(seconds, () => obj.raycastPadding = func());
        public static void BindRaycastPaddingInterval(this UnityEngine.UI.Text obj, float seconds, Func<UnityEngine.Vector4> func)
            => BindRaycastPaddingInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindMaskable(this UnityEngine.UI.Text obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.maskable = v);
        public static void BindMaskable(this UnityEngine.UI.Text obj, IProperty<System.Boolean> property)
            => BindMaskable(obj, Bindings2._scope, property);
        public static void BindMaskable(this UnityEngine.UI.Text obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.maskable = func());
        public static void BindMaskable(this UnityEngine.UI.Text obj, Func<System.Boolean> func)
            => BindMaskable(obj, Bindings2._scope, func);
        public static void BindMaskableInterval(this UnityEngine.UI.Text obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.maskable = func());
        public static void BindMaskableInterval(this UnityEngine.UI.Text obj, float seconds, Func<System.Boolean> func)
            => BindMaskableInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_TMPRO
        public static void BindAnchorPosition(this TMPro.TextContainer obj, Bindings2 bindings, IProperty<TMPro.TextContainerAnchors> property)
            => bindings.Bind(property, v => obj.anchorPosition = v);
        public static void BindAnchorPosition(this TMPro.TextContainer obj, IProperty<TMPro.TextContainerAnchors> property)
            => BindAnchorPosition(obj, Bindings2._scope, property);
        public static void BindAnchorPosition(this TMPro.TextContainer obj, Bindings2 bindings, Func<TMPro.TextContainerAnchors> func)
            => bindings.BindUpdate(() => obj.anchorPosition = func());
        public static void BindAnchorPosition(this TMPro.TextContainer obj, Func<TMPro.TextContainerAnchors> func)
            => BindAnchorPosition(obj, Bindings2._scope, func);
        public static void BindAnchorPositionInterval(this TMPro.TextContainer obj, Bindings2 bindings, float seconds, Func<TMPro.TextContainerAnchors> func)
            => bindings.BindInterval(seconds, () => obj.anchorPosition = func());
        public static void BindAnchorPositionInterval(this TMPro.TextContainer obj, float seconds, Func<TMPro.TextContainerAnchors> func)
            => BindAnchorPositionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWidth(this TMPro.TextContainer obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.width = v);
        public static void BindWidth(this TMPro.TextContainer obj, IProperty<System.Single> property)
            => BindWidth(obj, Bindings2._scope, property);
        public static void BindWidth(this TMPro.TextContainer obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.width = func());
        public static void BindWidth(this TMPro.TextContainer obj, Func<System.Single> func)
            => BindWidth(obj, Bindings2._scope, func);
        public static void BindWidthInterval(this TMPro.TextContainer obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.width = func());
        public static void BindWidthInterval(this TMPro.TextContainer obj, float seconds, Func<System.Single> func)
            => BindWidthInterval(obj, Bindings2._scope, seconds, func);
        public static void BindHeight(this TMPro.TextContainer obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.height = v);
        public static void BindHeight(this TMPro.TextContainer obj, IProperty<System.Single> property)
            => BindHeight(obj, Bindings2._scope, property);
        public static void BindHeight(this TMPro.TextContainer obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.height = func());
        public static void BindHeight(this TMPro.TextContainer obj, Func<System.Single> func)
            => BindHeight(obj, Bindings2._scope, func);
        public static void BindHeightInterval(this TMPro.TextContainer obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.height = func());
        public static void BindHeightInterval(this TMPro.TextContainer obj, float seconds, Func<System.Single> func)
            => BindHeightInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMargins(this TMPro.TextContainer obj, Bindings2 bindings, IProperty<UnityEngine.Vector4> property)
            => bindings.Bind(property, v => obj.margins = v);
        public static void BindMargins(this TMPro.TextContainer obj, IProperty<UnityEngine.Vector4> property)
            => BindMargins(obj, Bindings2._scope, property);
        public static void BindMargins(this TMPro.TextContainer obj, Bindings2 bindings, Func<UnityEngine.Vector4> func)
            => bindings.BindUpdate(() => obj.margins = func());
        public static void BindMargins(this TMPro.TextContainer obj, Func<UnityEngine.Vector4> func)
            => BindMargins(obj, Bindings2._scope, func);
        public static void BindMarginsInterval(this TMPro.TextContainer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector4> func)
            => bindings.BindInterval(seconds, () => obj.margins = func());
        public static void BindMarginsInterval(this TMPro.TextContainer obj, float seconds, Func<UnityEngine.Vector4> func)
            => BindMarginsInterval(obj, Bindings2._scope, seconds, func);
        #endif


        public static void BindText<T>(this TextMesh obj, Bindings2 bindings, IProperty<T> property)
            => bindings.Bind(property, v => obj.text = v.ToString());
        public static void BindText<T>(this TextMesh obj, IProperty<T> property)
            => BindText(obj, Bindings2._scope, property);
        public static void BindText<T>(this TextMesh obj, Bindings2 bindings, Func<T> func)
            => bindings.BindUpdate(() => obj.text = func().ToString());
        public static void BindText<T>(this TextMesh obj, Func<T> func)
            => BindText(obj, Bindings2._scope, func);
        public static void BindTextInterval<T>(this TextMesh obj, Bindings2 bindings, float seconds, Func<T> func)
            => bindings.BindInterval(seconds, () => obj.text = func().ToString());
        public static void BindTextInterval<T>(this TextMesh obj, float seconds, Func<T> func)
            => BindTextInterval(obj, Bindings2._scope, seconds, func);
        public static void BindOffsetZ(this TextMesh obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.offsetZ = v);
        public static void BindOffsetZ(this TextMesh obj, IProperty<System.Single> property)
            => BindOffsetZ(obj, Bindings2._scope, property);
        public static void BindOffsetZ(this TextMesh obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.offsetZ = func());
        public static void BindOffsetZ(this TextMesh obj, Func<System.Single> func)
            => BindOffsetZ(obj, Bindings2._scope, func);
        public static void BindOffsetZInterval(this TextMesh obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.offsetZ = func());
        public static void BindOffsetZInterval(this TextMesh obj, float seconds, Func<System.Single> func)
            => BindOffsetZInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCharacterSize(this TextMesh obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.characterSize = v);
        public static void BindCharacterSize(this TextMesh obj, IProperty<System.Single> property)
            => BindCharacterSize(obj, Bindings2._scope, property);
        public static void BindCharacterSize(this TextMesh obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.characterSize = func());
        public static void BindCharacterSize(this TextMesh obj, Func<System.Single> func)
            => BindCharacterSize(obj, Bindings2._scope, func);
        public static void BindCharacterSizeInterval(this TextMesh obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.characterSize = func());
        public static void BindCharacterSizeInterval(this TextMesh obj, float seconds, Func<System.Single> func)
            => BindCharacterSizeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLineSpacing(this TextMesh obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.lineSpacing = v);
        public static void BindLineSpacing(this TextMesh obj, IProperty<System.Single> property)
            => BindLineSpacing(obj, Bindings2._scope, property);
        public static void BindLineSpacing(this TextMesh obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.lineSpacing = func());
        public static void BindLineSpacing(this TextMesh obj, Func<System.Single> func)
            => BindLineSpacing(obj, Bindings2._scope, func);
        public static void BindLineSpacingInterval(this TextMesh obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.lineSpacing = func());
        public static void BindLineSpacingInterval(this TextMesh obj, float seconds, Func<System.Single> func)
            => BindLineSpacingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAnchor(this TextMesh obj, Bindings2 bindings, IProperty<UnityEngine.TextAnchor> property)
            => bindings.Bind(property, v => obj.anchor = v);
        public static void BindAnchor(this TextMesh obj, IProperty<UnityEngine.TextAnchor> property)
            => BindAnchor(obj, Bindings2._scope, property);
        public static void BindAnchor(this TextMesh obj, Bindings2 bindings, Func<UnityEngine.TextAnchor> func)
            => bindings.BindUpdate(() => obj.anchor = func());
        public static void BindAnchor(this TextMesh obj, Func<UnityEngine.TextAnchor> func)
            => BindAnchor(obj, Bindings2._scope, func);
        public static void BindAnchorInterval(this TextMesh obj, Bindings2 bindings, float seconds, Func<UnityEngine.TextAnchor> func)
            => bindings.BindInterval(seconds, () => obj.anchor = func());
        public static void BindAnchorInterval(this TextMesh obj, float seconds, Func<UnityEngine.TextAnchor> func)
            => BindAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAlignment(this TextMesh obj, Bindings2 bindings, IProperty<UnityEngine.TextAlignment> property)
            => bindings.Bind(property, v => obj.alignment = v);
        public static void BindAlignment(this TextMesh obj, IProperty<UnityEngine.TextAlignment> property)
            => BindAlignment(obj, Bindings2._scope, property);
        public static void BindAlignment(this TextMesh obj, Bindings2 bindings, Func<UnityEngine.TextAlignment> func)
            => bindings.BindUpdate(() => obj.alignment = func());
        public static void BindAlignment(this TextMesh obj, Func<UnityEngine.TextAlignment> func)
            => BindAlignment(obj, Bindings2._scope, func);
        public static void BindAlignmentInterval(this TextMesh obj, Bindings2 bindings, float seconds, Func<UnityEngine.TextAlignment> func)
            => bindings.BindInterval(seconds, () => obj.alignment = func());
        public static void BindAlignmentInterval(this TextMesh obj, float seconds, Func<UnityEngine.TextAlignment> func)
            => BindAlignmentInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTabSize(this TextMesh obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.tabSize = v);
        public static void BindTabSize(this TextMesh obj, IProperty<System.Single> property)
            => BindTabSize(obj, Bindings2._scope, property);
        public static void BindTabSize(this TextMesh obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.tabSize = func());
        public static void BindTabSize(this TextMesh obj, Func<System.Single> func)
            => BindTabSize(obj, Bindings2._scope, func);
        public static void BindTabSizeInterval(this TextMesh obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.tabSize = func());
        public static void BindTabSizeInterval(this TextMesh obj, float seconds, Func<System.Single> func)
            => BindTabSizeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFontSize(this TextMesh obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.fontSize = v);
        public static void BindFontSize(this TextMesh obj, IProperty<System.Int32> property)
            => BindFontSize(obj, Bindings2._scope, property);
        public static void BindFontSize(this TextMesh obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.fontSize = func());
        public static void BindFontSize(this TextMesh obj, Func<System.Int32> func)
            => BindFontSize(obj, Bindings2._scope, func);
        public static void BindFontSizeInterval(this TextMesh obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.fontSize = func());
        public static void BindFontSizeInterval(this TextMesh obj, float seconds, Func<System.Int32> func)
            => BindFontSizeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFontStyle(this TextMesh obj, Bindings2 bindings, IProperty<UnityEngine.FontStyle> property)
            => bindings.Bind(property, v => obj.fontStyle = v);
        public static void BindFontStyle(this TextMesh obj, IProperty<UnityEngine.FontStyle> property)
            => BindFontStyle(obj, Bindings2._scope, property);
        public static void BindFontStyle(this TextMesh obj, Bindings2 bindings, Func<UnityEngine.FontStyle> func)
            => bindings.BindUpdate(() => obj.fontStyle = func());
        public static void BindFontStyle(this TextMesh obj, Func<UnityEngine.FontStyle> func)
            => BindFontStyle(obj, Bindings2._scope, func);
        public static void BindFontStyleInterval(this TextMesh obj, Bindings2 bindings, float seconds, Func<UnityEngine.FontStyle> func)
            => bindings.BindInterval(seconds, () => obj.fontStyle = func());
        public static void BindFontStyleInterval(this TextMesh obj, float seconds, Func<UnityEngine.FontStyle> func)
            => BindFontStyleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRichText(this TextMesh obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.richText = v);
        public static void BindRichText(this TextMesh obj, IProperty<System.Boolean> property)
            => BindRichText(obj, Bindings2._scope, property);
        public static void BindRichText(this TextMesh obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.richText = func());
        public static void BindRichText(this TextMesh obj, Func<System.Boolean> func)
            => BindRichText(obj, Bindings2._scope, func);
        public static void BindRichTextInterval(this TextMesh obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.richText = func());
        public static void BindRichTextInterval(this TextMesh obj, float seconds, Func<System.Boolean> func)
            => BindRichTextInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFont(this TextMesh obj, Bindings2 bindings, IProperty<UnityEngine.Font> property)
            => bindings.Bind(property, v => obj.font = v);
        public static void BindFont(this TextMesh obj, IProperty<UnityEngine.Font> property)
            => BindFont(obj, Bindings2._scope, property);
        public static void BindFont(this TextMesh obj, Bindings2 bindings, Func<UnityEngine.Font> func)
            => bindings.BindUpdate(() => obj.font = func());
        public static void BindFont(this TextMesh obj, Func<UnityEngine.Font> func)
            => BindFont(obj, Bindings2._scope, func);
        public static void BindFontInterval(this TextMesh obj, Bindings2 bindings, float seconds, Func<UnityEngine.Font> func)
            => bindings.BindInterval(seconds, () => obj.font = func());
        public static void BindFontInterval(this TextMesh obj, float seconds, Func<UnityEngine.Font> func)
            => BindFontInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColor(this TextMesh obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.color = v);
        public static void BindColor(this TextMesh obj, IProperty<UnityEngine.Color> property)
            => BindColor(obj, Bindings2._scope, property);
        public static void BindColor(this TextMesh obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.color = func());
        public static void BindColor(this TextMesh obj, Func<UnityEngine.Color> func)
            => BindColor(obj, Bindings2._scope, func);
        public static void BindColorInterval(this TextMesh obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.color = func());
        public static void BindColorInterval(this TextMesh obj, float seconds, Func<UnityEngine.Color> func)
            => BindColorInterval(obj, Bindings2._scope, seconds, func);


        #if UNITY_TMPRO
        public static void BindText<T>(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<T> property)
            => bindings.Bind(property, v => obj.text = v.ToString());
        public static void BindText<T>(this TMPro.TextMeshPro obj, IProperty<T> property)
            => BindText(obj, Bindings2._scope, property);
        public static void BindText<T>(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<T> func)
            => bindings.BindUpdate(() => obj.text = func().ToString());
        public static void BindText<T>(this TMPro.TextMeshPro obj, Func<T> func)
            => BindText(obj, Bindings2._scope, func);
        public static void BindTextInterval<T>(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<T> func)
            => bindings.BindInterval(seconds, () => obj.text = func().ToString());
        public static void BindTextInterval<T>(this TMPro.TextMeshPro obj, float seconds, Func<T> func)
            => BindTextInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFont(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<TMPro.TMP_FontAsset> property)
            => bindings.Bind(property, v => obj.font = v);
        public static void BindFont(this TMPro.TextMeshPro obj, IProperty<TMPro.TMP_FontAsset> property)
            => BindFont(obj, Bindings2._scope, property);
        public static void BindFont(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<TMPro.TMP_FontAsset> func)
            => bindings.BindUpdate(() => obj.font = func());
        public static void BindFont(this TMPro.TextMeshPro obj, Func<TMPro.TMP_FontAsset> func)
            => BindFont(obj, Bindings2._scope, func);
        public static void BindFontInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<TMPro.TMP_FontAsset> func)
            => bindings.BindInterval(seconds, () => obj.font = func());
        public static void BindFontInterval(this TMPro.TextMeshPro obj, float seconds, Func<TMPro.TMP_FontAsset> func)
            => BindFontInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFontStyle(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<TMPro.FontStyles> property)
            => bindings.Bind(property, v => obj.fontStyle = v);
        public static void BindFontStyle(this TMPro.TextMeshPro obj, IProperty<TMPro.FontStyles> property)
            => BindFontStyle(obj, Bindings2._scope, property);
        public static void BindFontStyle(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<TMPro.FontStyles> func)
            => bindings.BindUpdate(() => obj.fontStyle = func());
        public static void BindFontStyle(this TMPro.TextMeshPro obj, Func<TMPro.FontStyles> func)
            => BindFontStyle(obj, Bindings2._scope, func);
        public static void BindFontStyleInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<TMPro.FontStyles> func)
            => bindings.BindInterval(seconds, () => obj.fontStyle = func());
        public static void BindFontStyleInterval(this TMPro.TextMeshPro obj, float seconds, Func<TMPro.FontStyles> func)
            => BindFontStyleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFontSize(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.fontSize = v);
        public static void BindFontSize(this TMPro.TextMeshPro obj, IProperty<System.Single> property)
            => BindFontSize(obj, Bindings2._scope, property);
        public static void BindFontSize(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.fontSize = func());
        public static void BindFontSize(this TMPro.TextMeshPro obj, Func<System.Single> func)
            => BindFontSize(obj, Bindings2._scope, func);
        public static void BindFontSizeInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.fontSize = func());
        public static void BindFontSizeInterval(this TMPro.TextMeshPro obj, float seconds, Func<System.Single> func)
            => BindFontSizeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoSizeTextContainer(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoSizeTextContainer = v);
        public static void BindAutoSizeTextContainer(this TMPro.TextMeshPro obj, IProperty<System.Boolean> property)
            => BindAutoSizeTextContainer(obj, Bindings2._scope, property);
        public static void BindAutoSizeTextContainer(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoSizeTextContainer = func());
        public static void BindAutoSizeTextContainer(this TMPro.TextMeshPro obj, Func<System.Boolean> func)
            => BindAutoSizeTextContainer(obj, Bindings2._scope, func);
        public static void BindAutoSizeTextContainerInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoSizeTextContainer = func());
        public static void BindAutoSizeTextContainerInterval(this TMPro.TextMeshPro obj, float seconds, Func<System.Boolean> func)
            => BindAutoSizeTextContainerInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColor(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.color = v);
        public static void BindColor(this TMPro.TextMeshPro obj, IProperty<UnityEngine.Color> property)
            => BindColor(obj, Bindings2._scope, property);
        public static void BindColor(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.color = func());
        public static void BindColor(this TMPro.TextMeshPro obj, Func<UnityEngine.Color> func)
            => BindColor(obj, Bindings2._scope, func);
        public static void BindColorInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.color = func());
        public static void BindColorInterval(this TMPro.TextMeshPro obj, float seconds, Func<UnityEngine.Color> func)
            => BindColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColorGradientPreset(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<TMPro.TMP_ColorGradient> property)
            => bindings.Bind(property, v => obj.colorGradientPreset = v);
        public static void BindColorGradientPreset(this TMPro.TextMeshPro obj, IProperty<TMPro.TMP_ColorGradient> property)
            => BindColorGradientPreset(obj, Bindings2._scope, property);
        public static void BindColorGradientPreset(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<TMPro.TMP_ColorGradient> func)
            => bindings.BindUpdate(() => obj.colorGradientPreset = func());
        public static void BindColorGradientPreset(this TMPro.TextMeshPro obj, Func<TMPro.TMP_ColorGradient> func)
            => BindColorGradientPreset(obj, Bindings2._scope, func);
        public static void BindColorGradientPresetInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<TMPro.TMP_ColorGradient> func)
            => bindings.BindInterval(seconds, () => obj.colorGradientPreset = func());
        public static void BindColorGradientPresetInterval(this TMPro.TextMeshPro obj, float seconds, Func<TMPro.TMP_ColorGradient> func)
            => BindColorGradientPresetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColorGradient(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<TMPro.VertexGradient> property)
            => bindings.Bind(property, v => obj.colorGradient = v);
        public static void BindColorGradient(this TMPro.TextMeshPro obj, IProperty<TMPro.VertexGradient> property)
            => BindColorGradient(obj, Bindings2._scope, property);
        public static void BindColorGradient(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<TMPro.VertexGradient> func)
            => bindings.BindUpdate(() => obj.colorGradient = func());
        public static void BindColorGradient(this TMPro.TextMeshPro obj, Func<TMPro.VertexGradient> func)
            => BindColorGradient(obj, Bindings2._scope, func);
        public static void BindColorGradientInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<TMPro.VertexGradient> func)
            => bindings.BindInterval(seconds, () => obj.colorGradient = func());
        public static void BindColorGradientInterval(this TMPro.TextMeshPro obj, float seconds, Func<TMPro.VertexGradient> func)
            => BindColorGradientInterval(obj, Bindings2._scope, seconds, func);
        public static void BindOverrideColorTags(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.overrideColorTags = v);
        public static void BindOverrideColorTags(this TMPro.TextMeshPro obj, IProperty<System.Boolean> property)
            => BindOverrideColorTags(obj, Bindings2._scope, property);
        public static void BindOverrideColorTags(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.overrideColorTags = func());
        public static void BindOverrideColorTags(this TMPro.TextMeshPro obj, Func<System.Boolean> func)
            => BindOverrideColorTags(obj, Bindings2._scope, func);
        public static void BindOverrideColorTagsInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.overrideColorTags = func());
        public static void BindOverrideColorTagsInterval(this TMPro.TextMeshPro obj, float seconds, Func<System.Boolean> func)
            => BindOverrideColorTagsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCharacterSpacing(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.characterSpacing = v);
        public static void BindCharacterSpacing(this TMPro.TextMeshPro obj, IProperty<System.Single> property)
            => BindCharacterSpacing(obj, Bindings2._scope, property);
        public static void BindCharacterSpacing(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.characterSpacing = func());
        public static void BindCharacterSpacing(this TMPro.TextMeshPro obj, Func<System.Single> func)
            => BindCharacterSpacing(obj, Bindings2._scope, func);
        public static void BindCharacterSpacingInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.characterSpacing = func());
        public static void BindCharacterSpacingInterval(this TMPro.TextMeshPro obj, float seconds, Func<System.Single> func)
            => BindCharacterSpacingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWordSpacing(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.wordSpacing = v);
        public static void BindWordSpacing(this TMPro.TextMeshPro obj, IProperty<System.Single> property)
            => BindWordSpacing(obj, Bindings2._scope, property);
        public static void BindWordSpacing(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.wordSpacing = func());
        public static void BindWordSpacing(this TMPro.TextMeshPro obj, Func<System.Single> func)
            => BindWordSpacing(obj, Bindings2._scope, func);
        public static void BindWordSpacingInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.wordSpacing = func());
        public static void BindWordSpacingInterval(this TMPro.TextMeshPro obj, float seconds, Func<System.Single> func)
            => BindWordSpacingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLineSpacing(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.lineSpacing = v);
        public static void BindLineSpacing(this TMPro.TextMeshPro obj, IProperty<System.Single> property)
            => BindLineSpacing(obj, Bindings2._scope, property);
        public static void BindLineSpacing(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.lineSpacing = func());
        public static void BindLineSpacing(this TMPro.TextMeshPro obj, Func<System.Single> func)
            => BindLineSpacing(obj, Bindings2._scope, func);
        public static void BindLineSpacingInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.lineSpacing = func());
        public static void BindLineSpacingInterval(this TMPro.TextMeshPro obj, float seconds, Func<System.Single> func)
            => BindLineSpacingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindParagraphSpacing(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.paragraphSpacing = v);
        public static void BindParagraphSpacing(this TMPro.TextMeshPro obj, IProperty<System.Single> property)
            => BindParagraphSpacing(obj, Bindings2._scope, property);
        public static void BindParagraphSpacing(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.paragraphSpacing = func());
        public static void BindParagraphSpacing(this TMPro.TextMeshPro obj, Func<System.Single> func)
            => BindParagraphSpacing(obj, Bindings2._scope, func);
        public static void BindParagraphSpacingInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.paragraphSpacing = func());
        public static void BindParagraphSpacingInterval(this TMPro.TextMeshPro obj, float seconds, Func<System.Single> func)
            => BindParagraphSpacingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAlignment(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<TMPro.TextAlignmentOptions> property)
            => bindings.Bind(property, v => obj.alignment = v);
        public static void BindAlignment(this TMPro.TextMeshPro obj, IProperty<TMPro.TextAlignmentOptions> property)
            => BindAlignment(obj, Bindings2._scope, property);
        public static void BindAlignment(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<TMPro.TextAlignmentOptions> func)
            => bindings.BindUpdate(() => obj.alignment = func());
        public static void BindAlignment(this TMPro.TextMeshPro obj, Func<TMPro.TextAlignmentOptions> func)
            => BindAlignment(obj, Bindings2._scope, func);
        public static void BindAlignmentInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<TMPro.TextAlignmentOptions> func)
            => bindings.BindInterval(seconds, () => obj.alignment = func());
        public static void BindAlignmentInterval(this TMPro.TextMeshPro obj, float seconds, Func<TMPro.TextAlignmentOptions> func)
            => BindAlignmentInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_2023_2_OR_NEWER
        public static void BindEnableWordWrapping(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enableWordWrapping = v);
        public static void BindEnableWordWrapping(this TMPro.TextMeshPro obj, IProperty<System.Boolean> property)
            => BindEnableWordWrapping(obj, Bindings2._scope, property);
        public static void BindEnableWordWrapping(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enableWordWrapping = func());
        public static void BindEnableWordWrapping(this TMPro.TextMeshPro obj, Func<System.Boolean> func)
            => BindEnableWordWrapping(obj, Bindings2._scope, func);
        public static void BindEnableWordWrappingInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enableWordWrapping = func());
        public static void BindEnableWordWrappingInterval(this TMPro.TextMeshPro obj, float seconds, Func<System.Boolean> func)
            => BindEnableWordWrappingInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_2023_2_OR_NEWER
        public static void BindTextWrappingMode(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<TMPro.TextWrappingModes> property)
            => bindings.Bind(property, v => obj.textWrappingMode = v);
        public static void BindTextWrappingMode(this TMPro.TextMeshPro obj, IProperty<TMPro.TextWrappingModes> property)
            => BindTextWrappingMode(obj, Bindings2._scope, property);
        public static void BindTextWrappingMode(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<TMPro.TextWrappingModes> func)
            => bindings.BindUpdate(() => obj.textWrappingMode = func());
        public static void BindTextWrappingMode(this TMPro.TextMeshPro obj, Func<TMPro.TextWrappingModes> func)
            => BindTextWrappingMode(obj, Bindings2._scope, func);
        public static void BindTextWrappingModeInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<TMPro.TextWrappingModes> func)
            => bindings.BindInterval(seconds, () => obj.textWrappingMode = func());
        public static void BindTextWrappingModeInterval(this TMPro.TextMeshPro obj, float seconds, Func<TMPro.TextWrappingModes> func)
            => BindTextWrappingModeInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindOverflowMode(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<TMPro.TextOverflowModes> property)
            => bindings.Bind(property, v => obj.overflowMode = v);
        public static void BindOverflowMode(this TMPro.TextMeshPro obj, IProperty<TMPro.TextOverflowModes> property)
            => BindOverflowMode(obj, Bindings2._scope, property);
        public static void BindOverflowMode(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<TMPro.TextOverflowModes> func)
            => bindings.BindUpdate(() => obj.overflowMode = func());
        public static void BindOverflowMode(this TMPro.TextMeshPro obj, Func<TMPro.TextOverflowModes> func)
            => BindOverflowMode(obj, Bindings2._scope, func);
        public static void BindOverflowModeInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<TMPro.TextOverflowModes> func)
            => bindings.BindInterval(seconds, () => obj.overflowMode = func());
        public static void BindOverflowModeInterval(this TMPro.TextMeshPro obj, float seconds, Func<TMPro.TextOverflowModes> func)
            => BindOverflowModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindHorizontalMapping(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<TMPro.TextureMappingOptions> property)
            => bindings.Bind(property, v => obj.horizontalMapping = v);
        public static void BindHorizontalMapping(this TMPro.TextMeshPro obj, IProperty<TMPro.TextureMappingOptions> property)
            => BindHorizontalMapping(obj, Bindings2._scope, property);
        public static void BindHorizontalMapping(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<TMPro.TextureMappingOptions> func)
            => bindings.BindUpdate(() => obj.horizontalMapping = func());
        public static void BindHorizontalMapping(this TMPro.TextMeshPro obj, Func<TMPro.TextureMappingOptions> func)
            => BindHorizontalMapping(obj, Bindings2._scope, func);
        public static void BindHorizontalMappingInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<TMPro.TextureMappingOptions> func)
            => bindings.BindInterval(seconds, () => obj.horizontalMapping = func());
        public static void BindHorizontalMappingInterval(this TMPro.TextMeshPro obj, float seconds, Func<TMPro.TextureMappingOptions> func)
            => BindHorizontalMappingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindVerticalMapping(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<TMPro.TextureMappingOptions> property)
            => bindings.Bind(property, v => obj.verticalMapping = v);
        public static void BindVerticalMapping(this TMPro.TextMeshPro obj, IProperty<TMPro.TextureMappingOptions> property)
            => BindVerticalMapping(obj, Bindings2._scope, property);
        public static void BindVerticalMapping(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<TMPro.TextureMappingOptions> func)
            => bindings.BindUpdate(() => obj.verticalMapping = func());
        public static void BindVerticalMapping(this TMPro.TextMeshPro obj, Func<TMPro.TextureMappingOptions> func)
            => BindVerticalMapping(obj, Bindings2._scope, func);
        public static void BindVerticalMappingInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<TMPro.TextureMappingOptions> func)
            => bindings.BindInterval(seconds, () => obj.verticalMapping = func());
        public static void BindVerticalMappingInterval(this TMPro.TextMeshPro obj, float seconds, Func<TMPro.TextureMappingOptions> func)
            => BindVerticalMappingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMargin(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<UnityEngine.Vector4> property)
            => bindings.Bind(property, v => obj.margin = v);
        public static void BindMargin(this TMPro.TextMeshPro obj, IProperty<UnityEngine.Vector4> property)
            => BindMargin(obj, Bindings2._scope, property);
        public static void BindMargin(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<UnityEngine.Vector4> func)
            => bindings.BindUpdate(() => obj.margin = func());
        public static void BindMargin(this TMPro.TextMeshPro obj, Func<UnityEngine.Vector4> func)
            => BindMargin(obj, Bindings2._scope, func);
        public static void BindMarginInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector4> func)
            => bindings.BindInterval(seconds, () => obj.margin = func());
        public static void BindMarginInterval(this TMPro.TextMeshPro obj, float seconds, Func<UnityEngine.Vector4> func)
            => BindMarginInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSortingLayerID(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.sortingLayerID = v);
        public static void BindSortingLayerID(this TMPro.TextMeshPro obj, IProperty<System.Int32> property)
            => BindSortingLayerID(obj, Bindings2._scope, property);
        public static void BindSortingLayerID(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.sortingLayerID = func());
        public static void BindSortingLayerID(this TMPro.TextMeshPro obj, Func<System.Int32> func)
            => BindSortingLayerID(obj, Bindings2._scope, func);
        public static void BindSortingLayerIDInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.sortingLayerID = func());
        public static void BindSortingLayerIDInterval(this TMPro.TextMeshPro obj, float seconds, Func<System.Int32> func)
            => BindSortingLayerIDInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSortingOrder(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.sortingOrder = v);
        public static void BindSortingOrder(this TMPro.TextMeshPro obj, IProperty<System.Int32> property)
            => BindSortingOrder(obj, Bindings2._scope, property);
        public static void BindSortingOrder(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.sortingOrder = func());
        public static void BindSortingOrder(this TMPro.TextMeshPro obj, Func<System.Int32> func)
            => BindSortingOrder(obj, Bindings2._scope, func);
        public static void BindSortingOrderInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.sortingOrder = func());
        public static void BindSortingOrderInterval(this TMPro.TextMeshPro obj, float seconds, Func<System.Int32> func)
            => BindSortingOrderInterval(obj, Bindings2._scope, seconds, func);
        public static void BindGeometrySortingOrder(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<TMPro.VertexSortingOrder> property)
            => bindings.Bind(property, v => obj.geometrySortingOrder = v);
        public static void BindGeometrySortingOrder(this TMPro.TextMeshPro obj, IProperty<TMPro.VertexSortingOrder> property)
            => BindGeometrySortingOrder(obj, Bindings2._scope, property);
        public static void BindGeometrySortingOrder(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<TMPro.VertexSortingOrder> func)
            => bindings.BindUpdate(() => obj.geometrySortingOrder = func());
        public static void BindGeometrySortingOrder(this TMPro.TextMeshPro obj, Func<TMPro.VertexSortingOrder> func)
            => BindGeometrySortingOrder(obj, Bindings2._scope, func);
        public static void BindGeometrySortingOrderInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<TMPro.VertexSortingOrder> func)
            => bindings.BindInterval(seconds, () => obj.geometrySortingOrder = func());
        public static void BindGeometrySortingOrderInterval(this TMPro.TextMeshPro obj, float seconds, Func<TMPro.VertexSortingOrder> func)
            => BindGeometrySortingOrderInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIsTextObjectScaleStatic(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isTextObjectScaleStatic = v);
        public static void BindIsTextObjectScaleStatic(this TMPro.TextMeshPro obj, IProperty<System.Boolean> property)
            => BindIsTextObjectScaleStatic(obj, Bindings2._scope, property);
        public static void BindIsTextObjectScaleStatic(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isTextObjectScaleStatic = func());
        public static void BindIsTextObjectScaleStatic(this TMPro.TextMeshPro obj, Func<System.Boolean> func)
            => BindIsTextObjectScaleStatic(obj, Bindings2._scope, func);
        public static void BindIsTextObjectScaleStaticInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isTextObjectScaleStatic = func());
        public static void BindIsTextObjectScaleStaticInterval(this TMPro.TextMeshPro obj, float seconds, Func<System.Boolean> func)
            => BindIsTextObjectScaleStaticInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIsOrthographic(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isOrthographic = v);
        public static void BindIsOrthographic(this TMPro.TextMeshPro obj, IProperty<System.Boolean> property)
            => BindIsOrthographic(obj, Bindings2._scope, property);
        public static void BindIsOrthographic(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isOrthographic = func());
        public static void BindIsOrthographic(this TMPro.TextMeshPro obj, Func<System.Boolean> func)
            => BindIsOrthographic(obj, Bindings2._scope, func);
        public static void BindIsOrthographicInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isOrthographic = func());
        public static void BindIsOrthographicInterval(this TMPro.TextMeshPro obj, float seconds, Func<System.Boolean> func)
            => BindIsOrthographicInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRichText(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.richText = v);
        public static void BindRichText(this TMPro.TextMeshPro obj, IProperty<System.Boolean> property)
            => BindRichText(obj, Bindings2._scope, property);
        public static void BindRichText(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.richText = func());
        public static void BindRichText(this TMPro.TextMeshPro obj, Func<System.Boolean> func)
            => BindRichText(obj, Bindings2._scope, func);
        public static void BindRichTextInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.richText = func());
        public static void BindRichTextInterval(this TMPro.TextMeshPro obj, float seconds, Func<System.Boolean> func)
            => BindRichTextInterval(obj, Bindings2._scope, seconds, func);
        public static void BindParseCtrlCharacters(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.parseCtrlCharacters = v);
        public static void BindParseCtrlCharacters(this TMPro.TextMeshPro obj, IProperty<System.Boolean> property)
            => BindParseCtrlCharacters(obj, Bindings2._scope, property);
        public static void BindParseCtrlCharacters(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.parseCtrlCharacters = func());
        public static void BindParseCtrlCharacters(this TMPro.TextMeshPro obj, Func<System.Boolean> func)
            => BindParseCtrlCharacters(obj, Bindings2._scope, func);
        public static void BindParseCtrlCharactersInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.parseCtrlCharacters = func());
        public static void BindParseCtrlCharactersInterval(this TMPro.TextMeshPro obj, float seconds, Func<System.Boolean> func)
            => BindParseCtrlCharactersInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseMaxVisibleDescender(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useMaxVisibleDescender = v);
        public static void BindUseMaxVisibleDescender(this TMPro.TextMeshPro obj, IProperty<System.Boolean> property)
            => BindUseMaxVisibleDescender(obj, Bindings2._scope, property);
        public static void BindUseMaxVisibleDescender(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useMaxVisibleDescender = func());
        public static void BindUseMaxVisibleDescender(this TMPro.TextMeshPro obj, Func<System.Boolean> func)
            => BindUseMaxVisibleDescender(obj, Bindings2._scope, func);
        public static void BindUseMaxVisibleDescenderInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useMaxVisibleDescender = func());
        public static void BindUseMaxVisibleDescenderInterval(this TMPro.TextMeshPro obj, float seconds, Func<System.Boolean> func)
            => BindUseMaxVisibleDescenderInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSpriteAsset(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<TMPro.TMP_SpriteAsset> property)
            => bindings.Bind(property, v => obj.spriteAsset = v);
        public static void BindSpriteAsset(this TMPro.TextMeshPro obj, IProperty<TMPro.TMP_SpriteAsset> property)
            => BindSpriteAsset(obj, Bindings2._scope, property);
        public static void BindSpriteAsset(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<TMPro.TMP_SpriteAsset> func)
            => bindings.BindUpdate(() => obj.spriteAsset = func());
        public static void BindSpriteAsset(this TMPro.TextMeshPro obj, Func<TMPro.TMP_SpriteAsset> func)
            => BindSpriteAsset(obj, Bindings2._scope, func);
        public static void BindSpriteAssetInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<TMPro.TMP_SpriteAsset> func)
            => bindings.BindInterval(seconds, () => obj.spriteAsset = func());
        public static void BindSpriteAssetInterval(this TMPro.TextMeshPro obj, float seconds, Func<TMPro.TMP_SpriteAsset> func)
            => BindSpriteAssetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindStyleSheet(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<TMPro.TMP_StyleSheet> property)
            => bindings.Bind(property, v => obj.styleSheet = v);
        public static void BindStyleSheet(this TMPro.TextMeshPro obj, IProperty<TMPro.TMP_StyleSheet> property)
            => BindStyleSheet(obj, Bindings2._scope, property);
        public static void BindStyleSheet(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<TMPro.TMP_StyleSheet> func)
            => bindings.BindUpdate(() => obj.styleSheet = func());
        public static void BindStyleSheet(this TMPro.TextMeshPro obj, Func<TMPro.TMP_StyleSheet> func)
            => BindStyleSheet(obj, Bindings2._scope, func);
        public static void BindStyleSheetInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<TMPro.TMP_StyleSheet> func)
            => bindings.BindInterval(seconds, () => obj.styleSheet = func());
        public static void BindStyleSheetInterval(this TMPro.TextMeshPro obj, float seconds, Func<TMPro.TMP_StyleSheet> func)
            => BindStyleSheetInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_2023_2_OR_NEWER
        public static void BindEnableKerning(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enableKerning = v);
        public static void BindEnableKerning(this TMPro.TextMeshPro obj, IProperty<System.Boolean> property)
            => BindEnableKerning(obj, Bindings2._scope, property);
        public static void BindEnableKerning(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enableKerning = func());
        public static void BindEnableKerning(this TMPro.TextMeshPro obj, Func<System.Boolean> func)
            => BindEnableKerning(obj, Bindings2._scope, func);
        public static void BindEnableKerningInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enableKerning = func());
        public static void BindEnableKerningInterval(this TMPro.TextMeshPro obj, float seconds, Func<System.Boolean> func)
            => BindEnableKerningInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_2023_2_OR_NEWER
        public static void BindFontFeatures(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<System.Collections.Generic.List<UnityEngine.TextCore.OTL_FeatureTag>> property)
            => bindings.Bind(property, v => obj.fontFeatures = v);
        public static void BindFontFeatures(this TMPro.TextMeshPro obj, IProperty<System.Collections.Generic.List<UnityEngine.TextCore.OTL_FeatureTag>> property)
            => BindFontFeatures(obj, Bindings2._scope, property);
        public static void BindFontFeatures(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<System.Collections.Generic.List<UnityEngine.TextCore.OTL_FeatureTag>> func)
            => bindings.BindUpdate(() => obj.fontFeatures = func());
        public static void BindFontFeatures(this TMPro.TextMeshPro obj, Func<System.Collections.Generic.List<UnityEngine.TextCore.OTL_FeatureTag>> func)
            => BindFontFeatures(obj, Bindings2._scope, func);
        public static void BindFontFeaturesInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<System.Collections.Generic.List<UnityEngine.TextCore.OTL_FeatureTag>> func)
            => bindings.BindInterval(seconds, () => obj.fontFeatures = func());
        public static void BindFontFeaturesInterval(this TMPro.TextMeshPro obj, float seconds, Func<System.Collections.Generic.List<UnityEngine.TextCore.OTL_FeatureTag>> func)
            => BindFontFeaturesInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindExtraPadding(this TMPro.TextMeshPro obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.extraPadding = v);
        public static void BindExtraPadding(this TMPro.TextMeshPro obj, IProperty<System.Boolean> property)
            => BindExtraPadding(obj, Bindings2._scope, property);
        public static void BindExtraPadding(this TMPro.TextMeshPro obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.extraPadding = func());
        public static void BindExtraPadding(this TMPro.TextMeshPro obj, Func<System.Boolean> func)
            => BindExtraPadding(obj, Bindings2._scope, func);
        public static void BindExtraPaddingInterval(this TMPro.TextMeshPro obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.extraPadding = func());
        public static void BindExtraPaddingInterval(this TMPro.TextMeshPro obj, float seconds, Func<System.Boolean> func)
            => BindExtraPaddingInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_TMPRO
        public static void BindText<T>(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<T> property)
            => bindings.Bind(property, v => obj.text = v.ToString());
        public static void BindText<T>(this TMPro.TextMeshProUGUI obj, IProperty<T> property)
            => BindText(obj, Bindings2._scope, property);
        public static void BindText<T>(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<T> func)
            => bindings.BindUpdate(() => obj.text = func().ToString());
        public static void BindText<T>(this TMPro.TextMeshProUGUI obj, Func<T> func)
            => BindText(obj, Bindings2._scope, func);
        public static void BindTextInterval<T>(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<T> func)
            => bindings.BindInterval(seconds, () => obj.text = func().ToString());
        public static void BindTextInterval<T>(this TMPro.TextMeshProUGUI obj, float seconds, Func<T> func)
            => BindTextInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFont(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<TMPro.TMP_FontAsset> property)
            => bindings.Bind(property, v => obj.font = v);
        public static void BindFont(this TMPro.TextMeshProUGUI obj, IProperty<TMPro.TMP_FontAsset> property)
            => BindFont(obj, Bindings2._scope, property);
        public static void BindFont(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<TMPro.TMP_FontAsset> func)
            => bindings.BindUpdate(() => obj.font = func());
        public static void BindFont(this TMPro.TextMeshProUGUI obj, Func<TMPro.TMP_FontAsset> func)
            => BindFont(obj, Bindings2._scope, func);
        public static void BindFontInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<TMPro.TMP_FontAsset> func)
            => bindings.BindInterval(seconds, () => obj.font = func());
        public static void BindFontInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<TMPro.TMP_FontAsset> func)
            => BindFontInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFontStyle(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<TMPro.FontStyles> property)
            => bindings.Bind(property, v => obj.fontStyle = v);
        public static void BindFontStyle(this TMPro.TextMeshProUGUI obj, IProperty<TMPro.FontStyles> property)
            => BindFontStyle(obj, Bindings2._scope, property);
        public static void BindFontStyle(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<TMPro.FontStyles> func)
            => bindings.BindUpdate(() => obj.fontStyle = func());
        public static void BindFontStyle(this TMPro.TextMeshProUGUI obj, Func<TMPro.FontStyles> func)
            => BindFontStyle(obj, Bindings2._scope, func);
        public static void BindFontStyleInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<TMPro.FontStyles> func)
            => bindings.BindInterval(seconds, () => obj.fontStyle = func());
        public static void BindFontStyleInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<TMPro.FontStyles> func)
            => BindFontStyleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFontSize(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.fontSize = v);
        public static void BindFontSize(this TMPro.TextMeshProUGUI obj, IProperty<System.Single> property)
            => BindFontSize(obj, Bindings2._scope, property);
        public static void BindFontSize(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.fontSize = func());
        public static void BindFontSize(this TMPro.TextMeshProUGUI obj, Func<System.Single> func)
            => BindFontSize(obj, Bindings2._scope, func);
        public static void BindFontSizeInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.fontSize = func());
        public static void BindFontSizeInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<System.Single> func)
            => BindFontSizeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoSizeTextContainer(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoSizeTextContainer = v);
        public static void BindAutoSizeTextContainer(this TMPro.TextMeshProUGUI obj, IProperty<System.Boolean> property)
            => BindAutoSizeTextContainer(obj, Bindings2._scope, property);
        public static void BindAutoSizeTextContainer(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoSizeTextContainer = func());
        public static void BindAutoSizeTextContainer(this TMPro.TextMeshProUGUI obj, Func<System.Boolean> func)
            => BindAutoSizeTextContainer(obj, Bindings2._scope, func);
        public static void BindAutoSizeTextContainerInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoSizeTextContainer = func());
        public static void BindAutoSizeTextContainerInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<System.Boolean> func)
            => BindAutoSizeTextContainerInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColor(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.color = v);
        public static void BindColor(this TMPro.TextMeshProUGUI obj, IProperty<UnityEngine.Color> property)
            => BindColor(obj, Bindings2._scope, property);
        public static void BindColor(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.color = func());
        public static void BindColor(this TMPro.TextMeshProUGUI obj, Func<UnityEngine.Color> func)
            => BindColor(obj, Bindings2._scope, func);
        public static void BindColorInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.color = func());
        public static void BindColorInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<UnityEngine.Color> func)
            => BindColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColorGradientPreset(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<TMPro.TMP_ColorGradient> property)
            => bindings.Bind(property, v => obj.colorGradientPreset = v);
        public static void BindColorGradientPreset(this TMPro.TextMeshProUGUI obj, IProperty<TMPro.TMP_ColorGradient> property)
            => BindColorGradientPreset(obj, Bindings2._scope, property);
        public static void BindColorGradientPreset(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<TMPro.TMP_ColorGradient> func)
            => bindings.BindUpdate(() => obj.colorGradientPreset = func());
        public static void BindColorGradientPreset(this TMPro.TextMeshProUGUI obj, Func<TMPro.TMP_ColorGradient> func)
            => BindColorGradientPreset(obj, Bindings2._scope, func);
        public static void BindColorGradientPresetInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<TMPro.TMP_ColorGradient> func)
            => bindings.BindInterval(seconds, () => obj.colorGradientPreset = func());
        public static void BindColorGradientPresetInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<TMPro.TMP_ColorGradient> func)
            => BindColorGradientPresetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColorGradient(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<TMPro.VertexGradient> property)
            => bindings.Bind(property, v => obj.colorGradient = v);
        public static void BindColorGradient(this TMPro.TextMeshProUGUI obj, IProperty<TMPro.VertexGradient> property)
            => BindColorGradient(obj, Bindings2._scope, property);
        public static void BindColorGradient(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<TMPro.VertexGradient> func)
            => bindings.BindUpdate(() => obj.colorGradient = func());
        public static void BindColorGradient(this TMPro.TextMeshProUGUI obj, Func<TMPro.VertexGradient> func)
            => BindColorGradient(obj, Bindings2._scope, func);
        public static void BindColorGradientInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<TMPro.VertexGradient> func)
            => bindings.BindInterval(seconds, () => obj.colorGradient = func());
        public static void BindColorGradientInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<TMPro.VertexGradient> func)
            => BindColorGradientInterval(obj, Bindings2._scope, seconds, func);
        public static void BindOverrideColorTags(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.overrideColorTags = v);
        public static void BindOverrideColorTags(this TMPro.TextMeshProUGUI obj, IProperty<System.Boolean> property)
            => BindOverrideColorTags(obj, Bindings2._scope, property);
        public static void BindOverrideColorTags(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.overrideColorTags = func());
        public static void BindOverrideColorTags(this TMPro.TextMeshProUGUI obj, Func<System.Boolean> func)
            => BindOverrideColorTags(obj, Bindings2._scope, func);
        public static void BindOverrideColorTagsInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.overrideColorTags = func());
        public static void BindOverrideColorTagsInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<System.Boolean> func)
            => BindOverrideColorTagsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCharacterSpacing(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.characterSpacing = v);
        public static void BindCharacterSpacing(this TMPro.TextMeshProUGUI obj, IProperty<System.Single> property)
            => BindCharacterSpacing(obj, Bindings2._scope, property);
        public static void BindCharacterSpacing(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.characterSpacing = func());
        public static void BindCharacterSpacing(this TMPro.TextMeshProUGUI obj, Func<System.Single> func)
            => BindCharacterSpacing(obj, Bindings2._scope, func);
        public static void BindCharacterSpacingInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.characterSpacing = func());
        public static void BindCharacterSpacingInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<System.Single> func)
            => BindCharacterSpacingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWordSpacing(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.wordSpacing = v);
        public static void BindWordSpacing(this TMPro.TextMeshProUGUI obj, IProperty<System.Single> property)
            => BindWordSpacing(obj, Bindings2._scope, property);
        public static void BindWordSpacing(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.wordSpacing = func());
        public static void BindWordSpacing(this TMPro.TextMeshProUGUI obj, Func<System.Single> func)
            => BindWordSpacing(obj, Bindings2._scope, func);
        public static void BindWordSpacingInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.wordSpacing = func());
        public static void BindWordSpacingInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<System.Single> func)
            => BindWordSpacingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLineSpacing(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.lineSpacing = v);
        public static void BindLineSpacing(this TMPro.TextMeshProUGUI obj, IProperty<System.Single> property)
            => BindLineSpacing(obj, Bindings2._scope, property);
        public static void BindLineSpacing(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.lineSpacing = func());
        public static void BindLineSpacing(this TMPro.TextMeshProUGUI obj, Func<System.Single> func)
            => BindLineSpacing(obj, Bindings2._scope, func);
        public static void BindLineSpacingInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.lineSpacing = func());
        public static void BindLineSpacingInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<System.Single> func)
            => BindLineSpacingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindParagraphSpacing(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.paragraphSpacing = v);
        public static void BindParagraphSpacing(this TMPro.TextMeshProUGUI obj, IProperty<System.Single> property)
            => BindParagraphSpacing(obj, Bindings2._scope, property);
        public static void BindParagraphSpacing(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.paragraphSpacing = func());
        public static void BindParagraphSpacing(this TMPro.TextMeshProUGUI obj, Func<System.Single> func)
            => BindParagraphSpacing(obj, Bindings2._scope, func);
        public static void BindParagraphSpacingInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.paragraphSpacing = func());
        public static void BindParagraphSpacingInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<System.Single> func)
            => BindParagraphSpacingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAlignment(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<TMPro.TextAlignmentOptions> property)
            => bindings.Bind(property, v => obj.alignment = v);
        public static void BindAlignment(this TMPro.TextMeshProUGUI obj, IProperty<TMPro.TextAlignmentOptions> property)
            => BindAlignment(obj, Bindings2._scope, property);
        public static void BindAlignment(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<TMPro.TextAlignmentOptions> func)
            => bindings.BindUpdate(() => obj.alignment = func());
        public static void BindAlignment(this TMPro.TextMeshProUGUI obj, Func<TMPro.TextAlignmentOptions> func)
            => BindAlignment(obj, Bindings2._scope, func);
        public static void BindAlignmentInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<TMPro.TextAlignmentOptions> func)
            => bindings.BindInterval(seconds, () => obj.alignment = func());
        public static void BindAlignmentInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<TMPro.TextAlignmentOptions> func)
            => BindAlignmentInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_2023_2_OR_NEWER
        public static void BindEnableWordWrapping(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enableWordWrapping = v);
        public static void BindEnableWordWrapping(this TMPro.TextMeshProUGUI obj, IProperty<System.Boolean> property)
            => BindEnableWordWrapping(obj, Bindings2._scope, property);
        public static void BindEnableWordWrapping(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enableWordWrapping = func());
        public static void BindEnableWordWrapping(this TMPro.TextMeshProUGUI obj, Func<System.Boolean> func)
            => BindEnableWordWrapping(obj, Bindings2._scope, func);
        public static void BindEnableWordWrappingInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enableWordWrapping = func());
        public static void BindEnableWordWrappingInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<System.Boolean> func)
            => BindEnableWordWrappingInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_2023_2_OR_NEWER
        public static void BindTextWrappingMode(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<TMPro.TextWrappingModes> property)
            => bindings.Bind(property, v => obj.textWrappingMode = v);
        public static void BindTextWrappingMode(this TMPro.TextMeshProUGUI obj, IProperty<TMPro.TextWrappingModes> property)
            => BindTextWrappingMode(obj, Bindings2._scope, property);
        public static void BindTextWrappingMode(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<TMPro.TextWrappingModes> func)
            => bindings.BindUpdate(() => obj.textWrappingMode = func());
        public static void BindTextWrappingMode(this TMPro.TextMeshProUGUI obj, Func<TMPro.TextWrappingModes> func)
            => BindTextWrappingMode(obj, Bindings2._scope, func);
        public static void BindTextWrappingModeInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<TMPro.TextWrappingModes> func)
            => bindings.BindInterval(seconds, () => obj.textWrappingMode = func());
        public static void BindTextWrappingModeInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<TMPro.TextWrappingModes> func)
            => BindTextWrappingModeInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindOverflowMode(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<TMPro.TextOverflowModes> property)
            => bindings.Bind(property, v => obj.overflowMode = v);
        public static void BindOverflowMode(this TMPro.TextMeshProUGUI obj, IProperty<TMPro.TextOverflowModes> property)
            => BindOverflowMode(obj, Bindings2._scope, property);
        public static void BindOverflowMode(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<TMPro.TextOverflowModes> func)
            => bindings.BindUpdate(() => obj.overflowMode = func());
        public static void BindOverflowMode(this TMPro.TextMeshProUGUI obj, Func<TMPro.TextOverflowModes> func)
            => BindOverflowMode(obj, Bindings2._scope, func);
        public static void BindOverflowModeInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<TMPro.TextOverflowModes> func)
            => bindings.BindInterval(seconds, () => obj.overflowMode = func());
        public static void BindOverflowModeInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<TMPro.TextOverflowModes> func)
            => BindOverflowModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindHorizontalMapping(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<TMPro.TextureMappingOptions> property)
            => bindings.Bind(property, v => obj.horizontalMapping = v);
        public static void BindHorizontalMapping(this TMPro.TextMeshProUGUI obj, IProperty<TMPro.TextureMappingOptions> property)
            => BindHorizontalMapping(obj, Bindings2._scope, property);
        public static void BindHorizontalMapping(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<TMPro.TextureMappingOptions> func)
            => bindings.BindUpdate(() => obj.horizontalMapping = func());
        public static void BindHorizontalMapping(this TMPro.TextMeshProUGUI obj, Func<TMPro.TextureMappingOptions> func)
            => BindHorizontalMapping(obj, Bindings2._scope, func);
        public static void BindHorizontalMappingInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<TMPro.TextureMappingOptions> func)
            => bindings.BindInterval(seconds, () => obj.horizontalMapping = func());
        public static void BindHorizontalMappingInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<TMPro.TextureMappingOptions> func)
            => BindHorizontalMappingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindVerticalMapping(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<TMPro.TextureMappingOptions> property)
            => bindings.Bind(property, v => obj.verticalMapping = v);
        public static void BindVerticalMapping(this TMPro.TextMeshProUGUI obj, IProperty<TMPro.TextureMappingOptions> property)
            => BindVerticalMapping(obj, Bindings2._scope, property);
        public static void BindVerticalMapping(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<TMPro.TextureMappingOptions> func)
            => bindings.BindUpdate(() => obj.verticalMapping = func());
        public static void BindVerticalMapping(this TMPro.TextMeshProUGUI obj, Func<TMPro.TextureMappingOptions> func)
            => BindVerticalMapping(obj, Bindings2._scope, func);
        public static void BindVerticalMappingInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<TMPro.TextureMappingOptions> func)
            => bindings.BindInterval(seconds, () => obj.verticalMapping = func());
        public static void BindVerticalMappingInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<TMPro.TextureMappingOptions> func)
            => BindVerticalMappingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMargin(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<UnityEngine.Vector4> property)
            => bindings.Bind(property, v => obj.margin = v);
        public static void BindMargin(this TMPro.TextMeshProUGUI obj, IProperty<UnityEngine.Vector4> property)
            => BindMargin(obj, Bindings2._scope, property);
        public static void BindMargin(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<UnityEngine.Vector4> func)
            => bindings.BindUpdate(() => obj.margin = func());
        public static void BindMargin(this TMPro.TextMeshProUGUI obj, Func<UnityEngine.Vector4> func)
            => BindMargin(obj, Bindings2._scope, func);
        public static void BindMarginInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector4> func)
            => bindings.BindInterval(seconds, () => obj.margin = func());
        public static void BindMarginInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<UnityEngine.Vector4> func)
            => BindMarginInterval(obj, Bindings2._scope, seconds, func);
        public static void BindGeometrySortingOrder(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<TMPro.VertexSortingOrder> property)
            => bindings.Bind(property, v => obj.geometrySortingOrder = v);
        public static void BindGeometrySortingOrder(this TMPro.TextMeshProUGUI obj, IProperty<TMPro.VertexSortingOrder> property)
            => BindGeometrySortingOrder(obj, Bindings2._scope, property);
        public static void BindGeometrySortingOrder(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<TMPro.VertexSortingOrder> func)
            => bindings.BindUpdate(() => obj.geometrySortingOrder = func());
        public static void BindGeometrySortingOrder(this TMPro.TextMeshProUGUI obj, Func<TMPro.VertexSortingOrder> func)
            => BindGeometrySortingOrder(obj, Bindings2._scope, func);
        public static void BindGeometrySortingOrderInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<TMPro.VertexSortingOrder> func)
            => bindings.BindInterval(seconds, () => obj.geometrySortingOrder = func());
        public static void BindGeometrySortingOrderInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<TMPro.VertexSortingOrder> func)
            => BindGeometrySortingOrderInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIsTextObjectScaleStatic(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isTextObjectScaleStatic = v);
        public static void BindIsTextObjectScaleStatic(this TMPro.TextMeshProUGUI obj, IProperty<System.Boolean> property)
            => BindIsTextObjectScaleStatic(obj, Bindings2._scope, property);
        public static void BindIsTextObjectScaleStatic(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isTextObjectScaleStatic = func());
        public static void BindIsTextObjectScaleStatic(this TMPro.TextMeshProUGUI obj, Func<System.Boolean> func)
            => BindIsTextObjectScaleStatic(obj, Bindings2._scope, func);
        public static void BindIsTextObjectScaleStaticInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isTextObjectScaleStatic = func());
        public static void BindIsTextObjectScaleStaticInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<System.Boolean> func)
            => BindIsTextObjectScaleStaticInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIsOrthographic(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isOrthographic = v);
        public static void BindIsOrthographic(this TMPro.TextMeshProUGUI obj, IProperty<System.Boolean> property)
            => BindIsOrthographic(obj, Bindings2._scope, property);
        public static void BindIsOrthographic(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isOrthographic = func());
        public static void BindIsOrthographic(this TMPro.TextMeshProUGUI obj, Func<System.Boolean> func)
            => BindIsOrthographic(obj, Bindings2._scope, func);
        public static void BindIsOrthographicInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isOrthographic = func());
        public static void BindIsOrthographicInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<System.Boolean> func)
            => BindIsOrthographicInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRichText(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.richText = v);
        public static void BindRichText(this TMPro.TextMeshProUGUI obj, IProperty<System.Boolean> property)
            => BindRichText(obj, Bindings2._scope, property);
        public static void BindRichText(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.richText = func());
        public static void BindRichText(this TMPro.TextMeshProUGUI obj, Func<System.Boolean> func)
            => BindRichText(obj, Bindings2._scope, func);
        public static void BindRichTextInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.richText = func());
        public static void BindRichTextInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<System.Boolean> func)
            => BindRichTextInterval(obj, Bindings2._scope, seconds, func);
        public static void BindParseCtrlCharacters(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.parseCtrlCharacters = v);
        public static void BindParseCtrlCharacters(this TMPro.TextMeshProUGUI obj, IProperty<System.Boolean> property)
            => BindParseCtrlCharacters(obj, Bindings2._scope, property);
        public static void BindParseCtrlCharacters(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.parseCtrlCharacters = func());
        public static void BindParseCtrlCharacters(this TMPro.TextMeshProUGUI obj, Func<System.Boolean> func)
            => BindParseCtrlCharacters(obj, Bindings2._scope, func);
        public static void BindParseCtrlCharactersInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.parseCtrlCharacters = func());
        public static void BindParseCtrlCharactersInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<System.Boolean> func)
            => BindParseCtrlCharactersInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseMaxVisibleDescender(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useMaxVisibleDescender = v);
        public static void BindUseMaxVisibleDescender(this TMPro.TextMeshProUGUI obj, IProperty<System.Boolean> property)
            => BindUseMaxVisibleDescender(obj, Bindings2._scope, property);
        public static void BindUseMaxVisibleDescender(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useMaxVisibleDescender = func());
        public static void BindUseMaxVisibleDescender(this TMPro.TextMeshProUGUI obj, Func<System.Boolean> func)
            => BindUseMaxVisibleDescender(obj, Bindings2._scope, func);
        public static void BindUseMaxVisibleDescenderInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useMaxVisibleDescender = func());
        public static void BindUseMaxVisibleDescenderInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<System.Boolean> func)
            => BindUseMaxVisibleDescenderInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSpriteAsset(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<TMPro.TMP_SpriteAsset> property)
            => bindings.Bind(property, v => obj.spriteAsset = v);
        public static void BindSpriteAsset(this TMPro.TextMeshProUGUI obj, IProperty<TMPro.TMP_SpriteAsset> property)
            => BindSpriteAsset(obj, Bindings2._scope, property);
        public static void BindSpriteAsset(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<TMPro.TMP_SpriteAsset> func)
            => bindings.BindUpdate(() => obj.spriteAsset = func());
        public static void BindSpriteAsset(this TMPro.TextMeshProUGUI obj, Func<TMPro.TMP_SpriteAsset> func)
            => BindSpriteAsset(obj, Bindings2._scope, func);
        public static void BindSpriteAssetInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<TMPro.TMP_SpriteAsset> func)
            => bindings.BindInterval(seconds, () => obj.spriteAsset = func());
        public static void BindSpriteAssetInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<TMPro.TMP_SpriteAsset> func)
            => BindSpriteAssetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindStyleSheet(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<TMPro.TMP_StyleSheet> property)
            => bindings.Bind(property, v => obj.styleSheet = v);
        public static void BindStyleSheet(this TMPro.TextMeshProUGUI obj, IProperty<TMPro.TMP_StyleSheet> property)
            => BindStyleSheet(obj, Bindings2._scope, property);
        public static void BindStyleSheet(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<TMPro.TMP_StyleSheet> func)
            => bindings.BindUpdate(() => obj.styleSheet = func());
        public static void BindStyleSheet(this TMPro.TextMeshProUGUI obj, Func<TMPro.TMP_StyleSheet> func)
            => BindStyleSheet(obj, Bindings2._scope, func);
        public static void BindStyleSheetInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<TMPro.TMP_StyleSheet> func)
            => bindings.BindInterval(seconds, () => obj.styleSheet = func());
        public static void BindStyleSheetInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<TMPro.TMP_StyleSheet> func)
            => BindStyleSheetInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_2023_2_OR_NEWER
        public static void BindEnableKerning(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enableKerning = v);
        public static void BindEnableKerning(this TMPro.TextMeshProUGUI obj, IProperty<System.Boolean> property)
            => BindEnableKerning(obj, Bindings2._scope, property);
        public static void BindEnableKerning(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enableKerning = func());
        public static void BindEnableKerning(this TMPro.TextMeshProUGUI obj, Func<System.Boolean> func)
            => BindEnableKerning(obj, Bindings2._scope, func);
        public static void BindEnableKerningInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enableKerning = func());
        public static void BindEnableKerningInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<System.Boolean> func)
            => BindEnableKerningInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_2023_2_OR_NEWER
        public static void BindFontFeatures(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<System.Collections.Generic.List<UnityEngine.TextCore.OTL_FeatureTag>> property)
            => bindings.Bind(property, v => obj.fontFeatures = v);
        public static void BindFontFeatures(this TMPro.TextMeshProUGUI obj, IProperty<System.Collections.Generic.List<UnityEngine.TextCore.OTL_FeatureTag>> property)
            => BindFontFeatures(obj, Bindings2._scope, property);
        public static void BindFontFeatures(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<System.Collections.Generic.List<UnityEngine.TextCore.OTL_FeatureTag>> func)
            => bindings.BindUpdate(() => obj.fontFeatures = func());
        public static void BindFontFeatures(this TMPro.TextMeshProUGUI obj, Func<System.Collections.Generic.List<UnityEngine.TextCore.OTL_FeatureTag>> func)
            => BindFontFeatures(obj, Bindings2._scope, func);
        public static void BindFontFeaturesInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<System.Collections.Generic.List<UnityEngine.TextCore.OTL_FeatureTag>> func)
            => bindings.BindInterval(seconds, () => obj.fontFeatures = func());
        public static void BindFontFeaturesInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<System.Collections.Generic.List<UnityEngine.TextCore.OTL_FeatureTag>> func)
            => BindFontFeaturesInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindExtraPadding(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.extraPadding = v);
        public static void BindExtraPadding(this TMPro.TextMeshProUGUI obj, IProperty<System.Boolean> property)
            => BindExtraPadding(obj, Bindings2._scope, property);
        public static void BindExtraPadding(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.extraPadding = func());
        public static void BindExtraPadding(this TMPro.TextMeshProUGUI obj, Func<System.Boolean> func)
            => BindExtraPadding(obj, Bindings2._scope, func);
        public static void BindExtraPaddingInterval(this TMPro.TextMeshProUGUI obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.extraPadding = func());
        public static void BindExtraPaddingInterval(this TMPro.TextMeshProUGUI obj, float seconds, Func<System.Boolean> func)
            => BindExtraPaddingInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_TILEMAP
        public static void BindAnimationFrameRate(this UnityEngine.Tilemaps.Tilemap obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.animationFrameRate = v);
        public static void BindAnimationFrameRate(this UnityEngine.Tilemaps.Tilemap obj, IProperty<System.Single> property)
            => BindAnimationFrameRate(obj, Bindings2._scope, property);
        public static void BindAnimationFrameRate(this UnityEngine.Tilemaps.Tilemap obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.animationFrameRate = func());
        public static void BindAnimationFrameRate(this UnityEngine.Tilemaps.Tilemap obj, Func<System.Single> func)
            => BindAnimationFrameRate(obj, Bindings2._scope, func);
        public static void BindAnimationFrameRateInterval(this UnityEngine.Tilemaps.Tilemap obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.animationFrameRate = func());
        public static void BindAnimationFrameRateInterval(this UnityEngine.Tilemaps.Tilemap obj, float seconds, Func<System.Single> func)
            => BindAnimationFrameRateInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColor(this UnityEngine.Tilemaps.Tilemap obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.color = v);
        public static void BindColor(this UnityEngine.Tilemaps.Tilemap obj, IProperty<UnityEngine.Color> property)
            => BindColor(obj, Bindings2._scope, property);
        public static void BindColor(this UnityEngine.Tilemaps.Tilemap obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.color = func());
        public static void BindColor(this UnityEngine.Tilemaps.Tilemap obj, Func<UnityEngine.Color> func)
            => BindColor(obj, Bindings2._scope, func);
        public static void BindColorInterval(this UnityEngine.Tilemaps.Tilemap obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.color = func());
        public static void BindColorInterval(this UnityEngine.Tilemaps.Tilemap obj, float seconds, Func<UnityEngine.Color> func)
            => BindColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTileAnchor(this UnityEngine.Tilemaps.Tilemap obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.tileAnchor = v);
        public static void BindTileAnchor(this UnityEngine.Tilemaps.Tilemap obj, IProperty<UnityEngine.Vector3> property)
            => BindTileAnchor(obj, Bindings2._scope, property);
        public static void BindTileAnchor(this UnityEngine.Tilemaps.Tilemap obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.tileAnchor = func());
        public static void BindTileAnchor(this UnityEngine.Tilemaps.Tilemap obj, Func<UnityEngine.Vector3> func)
            => BindTileAnchor(obj, Bindings2._scope, func);
        public static void BindTileAnchorInterval(this UnityEngine.Tilemaps.Tilemap obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.tileAnchor = func());
        public static void BindTileAnchorInterval(this UnityEngine.Tilemaps.Tilemap obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindTileAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTileAnchorLerp(this UnityEngine.Tilemaps.Tilemap obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.tileAnchor = Vector3.Lerp(obj.tileAnchor, property.Value, speed * Time.smoothDeltaTime));
        public static void BindTileAnchorLerp(this UnityEngine.Tilemaps.Tilemap obj, float speed, Property<UnityEngine.Vector3> property)
            => BindTileAnchorLerp(obj, Bindings2._scope, speed, property);
        public static void BindTileAnchorLerp(this UnityEngine.Tilemaps.Tilemap obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.tileAnchor = Vector3.Lerp(obj.tileAnchor, func(), speed * Time.smoothDeltaTime));
        public static void BindTileAnchorLerp(this UnityEngine.Tilemaps.Tilemap obj, float speed, Func<UnityEngine.Vector3> func)
            => BindTileAnchorLerp(obj, Bindings2._scope, speed, func);
        public static void BindTileAnchorTowards(this UnityEngine.Tilemaps.Tilemap obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.tileAnchor = Vector3.MoveTowards(obj.tileAnchor, property.Value, speed * Time.smoothDeltaTime));
        public static void BindTileAnchorTowards(this UnityEngine.Tilemaps.Tilemap obj, float speed, Property<UnityEngine.Vector3> property)
            => BindTileAnchorTowards(obj, Bindings2._scope, speed, property);
        public static void BindTileAnchorTowards(this UnityEngine.Tilemaps.Tilemap obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.tileAnchor = Vector3.MoveTowards(obj.tileAnchor, func(), speed * Time.smoothDeltaTime));
        public static void BindTileAnchorTowards(this UnityEngine.Tilemaps.Tilemap obj, float speed, Func<UnityEngine.Vector3> func)
            => BindTileAnchorTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateTileAnchor(this UnityEngine.Tilemaps.Tilemap obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.tileAnchor = Vector3.Lerp(start, end, t));
        public static void AnimateTileAnchor(this UnityEngine.Tilemaps.Tilemap obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTileAnchor(obj, Bindings2._scope, start, end, curve);
        public static void AnimateTileAnchor(this UnityEngine.Tilemaps.Tilemap obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTileAnchor(obj, Bindings2._scope, obj.tileAnchor, end, curve);
        public static void AnimateTileAnchor(this UnityEngine.Tilemaps.Tilemap obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateTileAnchor(obj, Bindings2._scope, end, curve);
        public static void BindOrientation(this UnityEngine.Tilemaps.Tilemap obj, Bindings2 bindings, IProperty<UnityEngine.Tilemaps.Tilemap.Orientation> property)
            => bindings.Bind(property, v => obj.orientation = v);
        public static void BindOrientation(this UnityEngine.Tilemaps.Tilemap obj, IProperty<UnityEngine.Tilemaps.Tilemap.Orientation> property)
            => BindOrientation(obj, Bindings2._scope, property);
        public static void BindOrientation(this UnityEngine.Tilemaps.Tilemap obj, Bindings2 bindings, Func<UnityEngine.Tilemaps.Tilemap.Orientation> func)
            => bindings.BindUpdate(() => obj.orientation = func());
        public static void BindOrientation(this UnityEngine.Tilemaps.Tilemap obj, Func<UnityEngine.Tilemaps.Tilemap.Orientation> func)
            => BindOrientation(obj, Bindings2._scope, func);
        public static void BindOrientationInterval(this UnityEngine.Tilemaps.Tilemap obj, Bindings2 bindings, float seconds, Func<UnityEngine.Tilemaps.Tilemap.Orientation> func)
            => bindings.BindInterval(seconds, () => obj.orientation = func());
        public static void BindOrientationInterval(this UnityEngine.Tilemaps.Tilemap obj, float seconds, Func<UnityEngine.Tilemaps.Tilemap.Orientation> func)
            => BindOrientationInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_TILEMAP
        public static void BindMaximumTileChangeCount(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, IProperty<System.UInt32> property)
            => bindings.Bind(property, v => obj.maximumTileChangeCount = v);
        public static void BindMaximumTileChangeCount(this UnityEngine.Tilemaps.TilemapCollider2D obj, IProperty<System.UInt32> property)
            => BindMaximumTileChangeCount(obj, Bindings2._scope, property);
        public static void BindMaximumTileChangeCount(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, Func<System.UInt32> func)
            => bindings.BindUpdate(() => obj.maximumTileChangeCount = func());
        public static void BindMaximumTileChangeCount(this UnityEngine.Tilemaps.TilemapCollider2D obj, Func<System.UInt32> func)
            => BindMaximumTileChangeCount(obj, Bindings2._scope, func);
        public static void BindMaximumTileChangeCountInterval(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, float seconds, Func<System.UInt32> func)
            => bindings.BindInterval(seconds, () => obj.maximumTileChangeCount = func());
        public static void BindMaximumTileChangeCountInterval(this UnityEngine.Tilemaps.TilemapCollider2D obj, float seconds, Func<System.UInt32> func)
            => BindMaximumTileChangeCountInterval(obj, Bindings2._scope, seconds, func);
        public static void BindExtrusionFactor(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.extrusionFactor = v);
        public static void BindExtrusionFactor(this UnityEngine.Tilemaps.TilemapCollider2D obj, IProperty<System.Single> property)
            => BindExtrusionFactor(obj, Bindings2._scope, property);
        public static void BindExtrusionFactor(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.extrusionFactor = func());
        public static void BindExtrusionFactor(this UnityEngine.Tilemaps.TilemapCollider2D obj, Func<System.Single> func)
            => BindExtrusionFactor(obj, Bindings2._scope, func);
        public static void BindExtrusionFactorInterval(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.extrusionFactor = func());
        public static void BindExtrusionFactorInterval(this UnityEngine.Tilemaps.TilemapCollider2D obj, float seconds, Func<System.Single> func)
            => BindExtrusionFactorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSharedMaterial(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.PhysicsMaterial2D> property)
            => bindings.Bind(property, v => obj.sharedMaterial = v);
        public static void BindSharedMaterial(this UnityEngine.Tilemaps.TilemapCollider2D obj, IProperty<UnityEngine.PhysicsMaterial2D> property)
            => BindSharedMaterial(obj, Bindings2._scope, property);
        public static void BindSharedMaterial(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, Func<UnityEngine.PhysicsMaterial2D> func)
            => bindings.BindUpdate(() => obj.sharedMaterial = func());
        public static void BindSharedMaterial(this UnityEngine.Tilemaps.TilemapCollider2D obj, Func<UnityEngine.PhysicsMaterial2D> func)
            => BindSharedMaterial(obj, Bindings2._scope, func);
        public static void BindSharedMaterialInterval(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.PhysicsMaterial2D> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterial = func());
        public static void BindSharedMaterialInterval(this UnityEngine.Tilemaps.TilemapCollider2D obj, float seconds, Func<UnityEngine.PhysicsMaterial2D> func)
            => BindSharedMaterialInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIsTrigger(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isTrigger = v);
        public static void BindIsTrigger(this UnityEngine.Tilemaps.TilemapCollider2D obj, IProperty<System.Boolean> property)
            => BindIsTrigger(obj, Bindings2._scope, property);
        public static void BindIsTrigger(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isTrigger = func());
        public static void BindIsTrigger(this UnityEngine.Tilemaps.TilemapCollider2D obj, Func<System.Boolean> func)
            => BindIsTrigger(obj, Bindings2._scope, func);
        public static void BindIsTriggerInterval(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isTrigger = func());
        public static void BindIsTriggerInterval(this UnityEngine.Tilemaps.TilemapCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindIsTriggerInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUsedByEffector(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.usedByEffector = v);
        public static void BindUsedByEffector(this UnityEngine.Tilemaps.TilemapCollider2D obj, IProperty<System.Boolean> property)
            => BindUsedByEffector(obj, Bindings2._scope, property);
        public static void BindUsedByEffector(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.usedByEffector = func());
        public static void BindUsedByEffector(this UnityEngine.Tilemaps.TilemapCollider2D obj, Func<System.Boolean> func)
            => BindUsedByEffector(obj, Bindings2._scope, func);
        public static void BindUsedByEffectorInterval(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.usedByEffector = func());
        public static void BindUsedByEffectorInterval(this UnityEngine.Tilemaps.TilemapCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindUsedByEffectorInterval(obj, Bindings2._scope, seconds, func);
        #if !UNITY_2023_1_OR_NEWER
        public static void BindUsedByComposite(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.usedByComposite = v);
        public static void BindUsedByComposite(this UnityEngine.Tilemaps.TilemapCollider2D obj, IProperty<System.Boolean> property)
            => BindUsedByComposite(obj, Bindings2._scope, property);
        public static void BindUsedByComposite(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.usedByComposite = func());
        public static void BindUsedByComposite(this UnityEngine.Tilemaps.TilemapCollider2D obj, Func<System.Boolean> func)
            => BindUsedByComposite(obj, Bindings2._scope, func);
        public static void BindUsedByCompositeInterval(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.usedByComposite = func());
        public static void BindUsedByCompositeInterval(this UnityEngine.Tilemaps.TilemapCollider2D obj, float seconds, Func<System.Boolean> func)
            => BindUsedByCompositeInterval(obj, Bindings2._scope, seconds, func);
        #endif
        #if UNITY_2023_1_OR_NEWER
        public static void BindCompositeOperation(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.Collider2D.CompositeOperation> property)
            => bindings.Bind(property, v => obj.compositeOperation = v);
        public static void BindCompositeOperation(this UnityEngine.Tilemaps.TilemapCollider2D obj, IProperty<UnityEngine.Collider2D.CompositeOperation> property)
            => BindCompositeOperation(obj, Bindings2._scope, property);
        public static void BindCompositeOperation(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => bindings.BindUpdate(() => obj.compositeOperation = func());
        public static void BindCompositeOperation(this UnityEngine.Tilemaps.TilemapCollider2D obj, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => BindCompositeOperation(obj, Bindings2._scope, func);
        public static void BindCompositeOperationInterval(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => bindings.BindInterval(seconds, () => obj.compositeOperation = func());
        public static void BindCompositeOperationInterval(this UnityEngine.Tilemaps.TilemapCollider2D obj, float seconds, Func<UnityEngine.Collider2D.CompositeOperation> func)
            => BindCompositeOperationInterval(obj, Bindings2._scope, seconds, func);
        #endif
        public static void BindOffset(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.offset = v);
        public static void BindOffset(this UnityEngine.Tilemaps.TilemapCollider2D obj, IProperty<UnityEngine.Vector2> property)
            => BindOffset(obj, Bindings2._scope, property);
        public static void BindOffset(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.offset = func());
        public static void BindOffset(this UnityEngine.Tilemaps.TilemapCollider2D obj, Func<UnityEngine.Vector2> func)
            => BindOffset(obj, Bindings2._scope, func);
        public static void BindOffsetInterval(this UnityEngine.Tilemaps.TilemapCollider2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.offset = func());
        public static void BindOffsetInterval(this UnityEngine.Tilemaps.TilemapCollider2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindOffsetInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_TILEMAP
        public static void BindSortOrder(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Tilemaps.TilemapRenderer.SortOrder> property)
            => bindings.Bind(property, v => obj.sortOrder = v);
        public static void BindSortOrder(this UnityEngine.Tilemaps.TilemapRenderer obj, IProperty<UnityEngine.Tilemaps.TilemapRenderer.SortOrder> property)
            => BindSortOrder(obj, Bindings2._scope, property);
        public static void BindSortOrder(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, Func<UnityEngine.Tilemaps.TilemapRenderer.SortOrder> func)
            => bindings.BindUpdate(() => obj.sortOrder = func());
        public static void BindSortOrder(this UnityEngine.Tilemaps.TilemapRenderer obj, Func<UnityEngine.Tilemaps.TilemapRenderer.SortOrder> func)
            => BindSortOrder(obj, Bindings2._scope, func);
        public static void BindSortOrderInterval(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Tilemaps.TilemapRenderer.SortOrder> func)
            => bindings.BindInterval(seconds, () => obj.sortOrder = func());
        public static void BindSortOrderInterval(this UnityEngine.Tilemaps.TilemapRenderer obj, float seconds, Func<UnityEngine.Tilemaps.TilemapRenderer.SortOrder> func)
            => BindSortOrderInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMode(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Tilemaps.TilemapRenderer.Mode> property)
            => bindings.Bind(property, v => obj.mode = v);
        public static void BindMode(this UnityEngine.Tilemaps.TilemapRenderer obj, IProperty<UnityEngine.Tilemaps.TilemapRenderer.Mode> property)
            => BindMode(obj, Bindings2._scope, property);
        public static void BindMode(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, Func<UnityEngine.Tilemaps.TilemapRenderer.Mode> func)
            => bindings.BindUpdate(() => obj.mode = func());
        public static void BindMode(this UnityEngine.Tilemaps.TilemapRenderer obj, Func<UnityEngine.Tilemaps.TilemapRenderer.Mode> func)
            => BindMode(obj, Bindings2._scope, func);
        public static void BindModeInterval(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Tilemaps.TilemapRenderer.Mode> func)
            => bindings.BindInterval(seconds, () => obj.mode = func());
        public static void BindModeInterval(this UnityEngine.Tilemaps.TilemapRenderer obj, float seconds, Func<UnityEngine.Tilemaps.TilemapRenderer.Mode> func)
            => BindModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindDetectChunkCullingBounds(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Tilemaps.TilemapRenderer.DetectChunkCullingBounds> property)
            => bindings.Bind(property, v => obj.detectChunkCullingBounds = v);
        public static void BindDetectChunkCullingBounds(this UnityEngine.Tilemaps.TilemapRenderer obj, IProperty<UnityEngine.Tilemaps.TilemapRenderer.DetectChunkCullingBounds> property)
            => BindDetectChunkCullingBounds(obj, Bindings2._scope, property);
        public static void BindDetectChunkCullingBounds(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, Func<UnityEngine.Tilemaps.TilemapRenderer.DetectChunkCullingBounds> func)
            => bindings.BindUpdate(() => obj.detectChunkCullingBounds = func());
        public static void BindDetectChunkCullingBounds(this UnityEngine.Tilemaps.TilemapRenderer obj, Func<UnityEngine.Tilemaps.TilemapRenderer.DetectChunkCullingBounds> func)
            => BindDetectChunkCullingBounds(obj, Bindings2._scope, func);
        public static void BindDetectChunkCullingBoundsInterval(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Tilemaps.TilemapRenderer.DetectChunkCullingBounds> func)
            => bindings.BindInterval(seconds, () => obj.detectChunkCullingBounds = func());
        public static void BindDetectChunkCullingBoundsInterval(this UnityEngine.Tilemaps.TilemapRenderer obj, float seconds, Func<UnityEngine.Tilemaps.TilemapRenderer.DetectChunkCullingBounds> func)
            => BindDetectChunkCullingBoundsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindChunkCullingBounds(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.chunkCullingBounds = v);
        public static void BindChunkCullingBounds(this UnityEngine.Tilemaps.TilemapRenderer obj, IProperty<UnityEngine.Vector3> property)
            => BindChunkCullingBounds(obj, Bindings2._scope, property);
        public static void BindChunkCullingBounds(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.chunkCullingBounds = func());
        public static void BindChunkCullingBounds(this UnityEngine.Tilemaps.TilemapRenderer obj, Func<UnityEngine.Vector3> func)
            => BindChunkCullingBounds(obj, Bindings2._scope, func);
        public static void BindChunkCullingBoundsInterval(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.chunkCullingBounds = func());
        public static void BindChunkCullingBoundsInterval(this UnityEngine.Tilemaps.TilemapRenderer obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindChunkCullingBoundsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindChunkCullingBoundsLerp(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.chunkCullingBounds = Vector3.Lerp(obj.chunkCullingBounds, property.Value, speed * Time.smoothDeltaTime));
        public static void BindChunkCullingBoundsLerp(this UnityEngine.Tilemaps.TilemapRenderer obj, float speed, Property<UnityEngine.Vector3> property)
            => BindChunkCullingBoundsLerp(obj, Bindings2._scope, speed, property);
        public static void BindChunkCullingBoundsLerp(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.chunkCullingBounds = Vector3.Lerp(obj.chunkCullingBounds, func(), speed * Time.smoothDeltaTime));
        public static void BindChunkCullingBoundsLerp(this UnityEngine.Tilemaps.TilemapRenderer obj, float speed, Func<UnityEngine.Vector3> func)
            => BindChunkCullingBoundsLerp(obj, Bindings2._scope, speed, func);
        public static void BindChunkCullingBoundsTowards(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.chunkCullingBounds = Vector3.MoveTowards(obj.chunkCullingBounds, property.Value, speed * Time.smoothDeltaTime));
        public static void BindChunkCullingBoundsTowards(this UnityEngine.Tilemaps.TilemapRenderer obj, float speed, Property<UnityEngine.Vector3> property)
            => BindChunkCullingBoundsTowards(obj, Bindings2._scope, speed, property);
        public static void BindChunkCullingBoundsTowards(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.chunkCullingBounds = Vector3.MoveTowards(obj.chunkCullingBounds, func(), speed * Time.smoothDeltaTime));
        public static void BindChunkCullingBoundsTowards(this UnityEngine.Tilemaps.TilemapRenderer obj, float speed, Func<UnityEngine.Vector3> func)
            => BindChunkCullingBoundsTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateChunkCullingBounds(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.chunkCullingBounds = Vector3.Lerp(start, end, t));
        public static void AnimateChunkCullingBounds(this UnityEngine.Tilemaps.TilemapRenderer obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateChunkCullingBounds(obj, Bindings2._scope, start, end, curve);
        public static void AnimateChunkCullingBounds(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateChunkCullingBounds(obj, Bindings2._scope, obj.chunkCullingBounds, end, curve);
        public static void AnimateChunkCullingBounds(this UnityEngine.Tilemaps.TilemapRenderer obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateChunkCullingBounds(obj, Bindings2._scope, end, curve);
        public static void BindMaskInteraction(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, IProperty<UnityEngine.SpriteMaskInteraction> property)
            => bindings.Bind(property, v => obj.maskInteraction = v);
        public static void BindMaskInteraction(this UnityEngine.Tilemaps.TilemapRenderer obj, IProperty<UnityEngine.SpriteMaskInteraction> property)
            => BindMaskInteraction(obj, Bindings2._scope, property);
        public static void BindMaskInteraction(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, Func<UnityEngine.SpriteMaskInteraction> func)
            => bindings.BindUpdate(() => obj.maskInteraction = func());
        public static void BindMaskInteraction(this UnityEngine.Tilemaps.TilemapRenderer obj, Func<UnityEngine.SpriteMaskInteraction> func)
            => BindMaskInteraction(obj, Bindings2._scope, func);
        public static void BindMaskInteractionInterval(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.SpriteMaskInteraction> func)
            => bindings.BindInterval(seconds, () => obj.maskInteraction = func());
        public static void BindMaskInteractionInterval(this UnityEngine.Tilemaps.TilemapRenderer obj, float seconds, Func<UnityEngine.SpriteMaskInteraction> func)
            => BindMaskInteractionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSharedMaterials(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Material[]> property)
            => bindings.Bind(property, v => obj.sharedMaterials = v);
        public static void BindSharedMaterials(this UnityEngine.Tilemaps.TilemapRenderer obj, IProperty<UnityEngine.Material[]> property)
            => BindSharedMaterials(obj, Bindings2._scope, property);
        public static void BindSharedMaterials(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, Func<UnityEngine.Material[]> func)
            => bindings.BindUpdate(() => obj.sharedMaterials = func());
        public static void BindSharedMaterials(this UnityEngine.Tilemaps.TilemapRenderer obj, Func<UnityEngine.Material[]> func)
            => BindSharedMaterials(obj, Bindings2._scope, func);
        public static void BindSharedMaterialsInterval(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Material[]> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterials = func());
        public static void BindSharedMaterialsInterval(this UnityEngine.Tilemaps.TilemapRenderer obj, float seconds, Func<UnityEngine.Material[]> func)
            => BindSharedMaterialsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSortingLayerID(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.sortingLayerID = v);
        public static void BindSortingLayerID(this UnityEngine.Tilemaps.TilemapRenderer obj, IProperty<System.Int32> property)
            => BindSortingLayerID(obj, Bindings2._scope, property);
        public static void BindSortingLayerID(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.sortingLayerID = func());
        public static void BindSortingLayerID(this UnityEngine.Tilemaps.TilemapRenderer obj, Func<System.Int32> func)
            => BindSortingLayerID(obj, Bindings2._scope, func);
        public static void BindSortingLayerIDInterval(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.sortingLayerID = func());
        public static void BindSortingLayerIDInterval(this UnityEngine.Tilemaps.TilemapRenderer obj, float seconds, Func<System.Int32> func)
            => BindSortingLayerIDInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSortingOrder(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.sortingOrder = v);
        public static void BindSortingOrder(this UnityEngine.Tilemaps.TilemapRenderer obj, IProperty<System.Int32> property)
            => BindSortingOrder(obj, Bindings2._scope, property);
        public static void BindSortingOrder(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.sortingOrder = func());
        public static void BindSortingOrder(this UnityEngine.Tilemaps.TilemapRenderer obj, Func<System.Int32> func)
            => BindSortingOrder(obj, Bindings2._scope, func);
        public static void BindSortingOrderInterval(this UnityEngine.Tilemaps.TilemapRenderer obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.sortingOrder = func());
        public static void BindSortingOrderInterval(this UnityEngine.Tilemaps.TilemapRenderer obj, float seconds, Func<System.Int32> func)
            => BindSortingOrderInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_TMPRO
        public static void BindTemplate(this TMPro.TMP_Dropdown obj, Bindings2 bindings, IProperty<UnityEngine.RectTransform> property)
            => bindings.Bind(property, v => obj.template = v);
        public static void BindTemplate(this TMPro.TMP_Dropdown obj, IProperty<UnityEngine.RectTransform> property)
            => BindTemplate(obj, Bindings2._scope, property);
        public static void BindTemplate(this TMPro.TMP_Dropdown obj, Bindings2 bindings, Func<UnityEngine.RectTransform> func)
            => bindings.BindUpdate(() => obj.template = func());
        public static void BindTemplate(this TMPro.TMP_Dropdown obj, Func<UnityEngine.RectTransform> func)
            => BindTemplate(obj, Bindings2._scope, func);
        public static void BindTemplateInterval(this TMPro.TMP_Dropdown obj, Bindings2 bindings, float seconds, Func<UnityEngine.RectTransform> func)
            => bindings.BindInterval(seconds, () => obj.template = func());
        public static void BindTemplateInterval(this TMPro.TMP_Dropdown obj, float seconds, Func<UnityEngine.RectTransform> func)
            => BindTemplateInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCaptionText(this TMPro.TMP_Dropdown obj, Bindings2 bindings, IProperty<TMPro.TMP_Text> property)
            => bindings.Bind(property, v => obj.captionText = v);
        public static void BindCaptionText(this TMPro.TMP_Dropdown obj, IProperty<TMPro.TMP_Text> property)
            => BindCaptionText(obj, Bindings2._scope, property);
        public static void BindCaptionText(this TMPro.TMP_Dropdown obj, Bindings2 bindings, Func<TMPro.TMP_Text> func)
            => bindings.BindUpdate(() => obj.captionText = func());
        public static void BindCaptionText(this TMPro.TMP_Dropdown obj, Func<TMPro.TMP_Text> func)
            => BindCaptionText(obj, Bindings2._scope, func);
        public static void BindCaptionTextInterval(this TMPro.TMP_Dropdown obj, Bindings2 bindings, float seconds, Func<TMPro.TMP_Text> func)
            => bindings.BindInterval(seconds, () => obj.captionText = func());
        public static void BindCaptionTextInterval(this TMPro.TMP_Dropdown obj, float seconds, Func<TMPro.TMP_Text> func)
            => BindCaptionTextInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCaptionImage(this TMPro.TMP_Dropdown obj, Bindings2 bindings, IProperty<UnityEngine.UI.Image> property)
            => bindings.Bind(property, v => obj.captionImage = v);
        public static void BindCaptionImage(this TMPro.TMP_Dropdown obj, IProperty<UnityEngine.UI.Image> property)
            => BindCaptionImage(obj, Bindings2._scope, property);
        public static void BindCaptionImage(this TMPro.TMP_Dropdown obj, Bindings2 bindings, Func<UnityEngine.UI.Image> func)
            => bindings.BindUpdate(() => obj.captionImage = func());
        public static void BindCaptionImage(this TMPro.TMP_Dropdown obj, Func<UnityEngine.UI.Image> func)
            => BindCaptionImage(obj, Bindings2._scope, func);
        public static void BindCaptionImageInterval(this TMPro.TMP_Dropdown obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Image> func)
            => bindings.BindInterval(seconds, () => obj.captionImage = func());
        public static void BindCaptionImageInterval(this TMPro.TMP_Dropdown obj, float seconds, Func<UnityEngine.UI.Image> func)
            => BindCaptionImageInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPlaceholder(this TMPro.TMP_Dropdown obj, Bindings2 bindings, IProperty<UnityEngine.UI.Graphic> property)
            => bindings.Bind(property, v => obj.placeholder = v);
        public static void BindPlaceholder(this TMPro.TMP_Dropdown obj, IProperty<UnityEngine.UI.Graphic> property)
            => BindPlaceholder(obj, Bindings2._scope, property);
        public static void BindPlaceholder(this TMPro.TMP_Dropdown obj, Bindings2 bindings, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindUpdate(() => obj.placeholder = func());
        public static void BindPlaceholder(this TMPro.TMP_Dropdown obj, Func<UnityEngine.UI.Graphic> func)
            => BindPlaceholder(obj, Bindings2._scope, func);
        public static void BindPlaceholderInterval(this TMPro.TMP_Dropdown obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindInterval(seconds, () => obj.placeholder = func());
        public static void BindPlaceholderInterval(this TMPro.TMP_Dropdown obj, float seconds, Func<UnityEngine.UI.Graphic> func)
            => BindPlaceholderInterval(obj, Bindings2._scope, seconds, func);
        public static void BindItemText(this TMPro.TMP_Dropdown obj, Bindings2 bindings, IProperty<TMPro.TMP_Text> property)
            => bindings.Bind(property, v => obj.itemText = v);
        public static void BindItemText(this TMPro.TMP_Dropdown obj, IProperty<TMPro.TMP_Text> property)
            => BindItemText(obj, Bindings2._scope, property);
        public static void BindItemText(this TMPro.TMP_Dropdown obj, Bindings2 bindings, Func<TMPro.TMP_Text> func)
            => bindings.BindUpdate(() => obj.itemText = func());
        public static void BindItemText(this TMPro.TMP_Dropdown obj, Func<TMPro.TMP_Text> func)
            => BindItemText(obj, Bindings2._scope, func);
        public static void BindItemTextInterval(this TMPro.TMP_Dropdown obj, Bindings2 bindings, float seconds, Func<TMPro.TMP_Text> func)
            => bindings.BindInterval(seconds, () => obj.itemText = func());
        public static void BindItemTextInterval(this TMPro.TMP_Dropdown obj, float seconds, Func<TMPro.TMP_Text> func)
            => BindItemTextInterval(obj, Bindings2._scope, seconds, func);
        public static void BindItemImage(this TMPro.TMP_Dropdown obj, Bindings2 bindings, IProperty<UnityEngine.UI.Image> property)
            => bindings.Bind(property, v => obj.itemImage = v);
        public static void BindItemImage(this TMPro.TMP_Dropdown obj, IProperty<UnityEngine.UI.Image> property)
            => BindItemImage(obj, Bindings2._scope, property);
        public static void BindItemImage(this TMPro.TMP_Dropdown obj, Bindings2 bindings, Func<UnityEngine.UI.Image> func)
            => bindings.BindUpdate(() => obj.itemImage = func());
        public static void BindItemImage(this TMPro.TMP_Dropdown obj, Func<UnityEngine.UI.Image> func)
            => BindItemImage(obj, Bindings2._scope, func);
        public static void BindItemImageInterval(this TMPro.TMP_Dropdown obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Image> func)
            => bindings.BindInterval(seconds, () => obj.itemImage = func());
        public static void BindItemImageInterval(this TMPro.TMP_Dropdown obj, float seconds, Func<UnityEngine.UI.Image> func)
            => BindItemImageInterval(obj, Bindings2._scope, seconds, func);
        public static void BindValue(this TMPro.TMP_Dropdown obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.value = v);
        public static void BindValue(this TMPro.TMP_Dropdown obj, IProperty<System.Int32> property)
            => BindValue(obj, Bindings2._scope, property);
        public static void BindValue(this TMPro.TMP_Dropdown obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.value = func());
        public static void BindValue(this TMPro.TMP_Dropdown obj, Func<System.Int32> func)
            => BindValue(obj, Bindings2._scope, func);
        public static void BindValueInterval(this TMPro.TMP_Dropdown obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.value = func());
        public static void BindValueInterval(this TMPro.TMP_Dropdown obj, float seconds, Func<System.Int32> func)
            => BindValueInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAlphaFadeSpeed(this TMPro.TMP_Dropdown obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.alphaFadeSpeed = v);
        public static void BindAlphaFadeSpeed(this TMPro.TMP_Dropdown obj, IProperty<System.Single> property)
            => BindAlphaFadeSpeed(obj, Bindings2._scope, property);
        public static void BindAlphaFadeSpeed(this TMPro.TMP_Dropdown obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.alphaFadeSpeed = func());
        public static void BindAlphaFadeSpeed(this TMPro.TMP_Dropdown obj, Func<System.Single> func)
            => BindAlphaFadeSpeed(obj, Bindings2._scope, func);
        public static void BindAlphaFadeSpeedInterval(this TMPro.TMP_Dropdown obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.alphaFadeSpeed = func());
        public static void BindAlphaFadeSpeedInterval(this TMPro.TMP_Dropdown obj, float seconds, Func<System.Single> func)
            => BindAlphaFadeSpeedInterval(obj, Bindings2._scope, seconds, func);
        public static void BindOptions(this TMPro.TMP_Dropdown obj, Bindings2 bindings, IProperty<System.Collections.Generic.List<TMPro.TMP_Dropdown.OptionData>> property)
            => bindings.Bind(property, v => obj.options = v);
        public static void BindOptions(this TMPro.TMP_Dropdown obj, IProperty<System.Collections.Generic.List<TMPro.TMP_Dropdown.OptionData>> property)
            => BindOptions(obj, Bindings2._scope, property);
        public static void BindOptions(this TMPro.TMP_Dropdown obj, Bindings2 bindings, Func<System.Collections.Generic.List<TMPro.TMP_Dropdown.OptionData>> func)
            => bindings.BindUpdate(() => obj.options = func());
        public static void BindOptions(this TMPro.TMP_Dropdown obj, Func<System.Collections.Generic.List<TMPro.TMP_Dropdown.OptionData>> func)
            => BindOptions(obj, Bindings2._scope, func);
        public static void BindOptionsInterval(this TMPro.TMP_Dropdown obj, Bindings2 bindings, float seconds, Func<System.Collections.Generic.List<TMPro.TMP_Dropdown.OptionData>> func)
            => bindings.BindInterval(seconds, () => obj.options = func());
        public static void BindOptionsInterval(this TMPro.TMP_Dropdown obj, float seconds, Func<System.Collections.Generic.List<TMPro.TMP_Dropdown.OptionData>> func)
            => BindOptionsInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_TMPRO
        public static void BindInteractable(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.interactable = v);
        public static void BindInteractable(this TMPro.TMP_InputField obj, IProperty<System.Boolean> property)
            => BindInteractable(obj, Bindings2._scope, property);
        public static void BindInteractable(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.interactable = func());
        public static void BindInteractable(this TMPro.TMP_InputField obj, Func<System.Boolean> func)
            => BindInteractable(obj, Bindings2._scope, func);
        public static void BindInteractableInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.interactable = func());
        public static void BindInteractableInterval(this TMPro.TMP_InputField obj, float seconds, Func<System.Boolean> func)
            => BindInteractableInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTransition(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<UnityEngine.UI.Selectable.Transition> property)
            => bindings.Bind(property, v => obj.transition = v);
        public static void BindTransition(this TMPro.TMP_InputField obj, IProperty<UnityEngine.UI.Selectable.Transition> property)
            => BindTransition(obj, Bindings2._scope, property);
        public static void BindTransition(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<UnityEngine.UI.Selectable.Transition> func)
            => bindings.BindUpdate(() => obj.transition = func());
        public static void BindTransition(this TMPro.TMP_InputField obj, Func<UnityEngine.UI.Selectable.Transition> func)
            => BindTransition(obj, Bindings2._scope, func);
        public static void BindTransitionInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Selectable.Transition> func)
            => bindings.BindInterval(seconds, () => obj.transition = func());
        public static void BindTransitionInterval(this TMPro.TMP_InputField obj, float seconds, Func<UnityEngine.UI.Selectable.Transition> func)
            => BindTransitionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetGraphic(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<UnityEngine.UI.Graphic> property)
            => bindings.Bind(property, v => obj.targetGraphic = v);
        public static void BindTargetGraphic(this TMPro.TMP_InputField obj, IProperty<UnityEngine.UI.Graphic> property)
            => BindTargetGraphic(obj, Bindings2._scope, property);
        public static void BindTargetGraphic(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindUpdate(() => obj.targetGraphic = func());
        public static void BindTargetGraphic(this TMPro.TMP_InputField obj, Func<UnityEngine.UI.Graphic> func)
            => BindTargetGraphic(obj, Bindings2._scope, func);
        public static void BindTargetGraphicInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindInterval(seconds, () => obj.targetGraphic = func());
        public static void BindTargetGraphicInterval(this TMPro.TMP_InputField obj, float seconds, Func<UnityEngine.UI.Graphic> func)
            => BindTargetGraphicInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColors(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<UnityEngine.UI.ColorBlock> property)
            => bindings.Bind(property, v => obj.colors = v);
        public static void BindColors(this TMPro.TMP_InputField obj, IProperty<UnityEngine.UI.ColorBlock> property)
            => BindColors(obj, Bindings2._scope, property);
        public static void BindColors(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<UnityEngine.UI.ColorBlock> func)
            => bindings.BindUpdate(() => obj.colors = func());
        public static void BindColors(this TMPro.TMP_InputField obj, Func<UnityEngine.UI.ColorBlock> func)
            => BindColors(obj, Bindings2._scope, func);
        public static void BindColorsInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.ColorBlock> func)
            => bindings.BindInterval(seconds, () => obj.colors = func());
        public static void BindColorsInterval(this TMPro.TMP_InputField obj, float seconds, Func<UnityEngine.UI.ColorBlock> func)
            => BindColorsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindNavigation(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<UnityEngine.UI.Navigation> property)
            => bindings.Bind(property, v => obj.navigation = v);
        public static void BindNavigation(this TMPro.TMP_InputField obj, IProperty<UnityEngine.UI.Navigation> property)
            => BindNavigation(obj, Bindings2._scope, property);
        public static void BindNavigation(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<UnityEngine.UI.Navigation> func)
            => bindings.BindUpdate(() => obj.navigation = func());
        public static void BindNavigation(this TMPro.TMP_InputField obj, Func<UnityEngine.UI.Navigation> func)
            => BindNavigation(obj, Bindings2._scope, func);
        public static void BindNavigationInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Navigation> func)
            => bindings.BindInterval(seconds, () => obj.navigation = func());
        public static void BindNavigationInterval(this TMPro.TMP_InputField obj, float seconds, Func<UnityEngine.UI.Navigation> func)
            => BindNavigationInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTextViewport(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<UnityEngine.RectTransform> property)
            => bindings.Bind(property, v => obj.textViewport = v);
        public static void BindTextViewport(this TMPro.TMP_InputField obj, IProperty<UnityEngine.RectTransform> property)
            => BindTextViewport(obj, Bindings2._scope, property);
        public static void BindTextViewport(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<UnityEngine.RectTransform> func)
            => bindings.BindUpdate(() => obj.textViewport = func());
        public static void BindTextViewport(this TMPro.TMP_InputField obj, Func<UnityEngine.RectTransform> func)
            => BindTextViewport(obj, Bindings2._scope, func);
        public static void BindTextViewportInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<UnityEngine.RectTransform> func)
            => bindings.BindInterval(seconds, () => obj.textViewport = func());
        public static void BindTextViewportInterval(this TMPro.TMP_InputField obj, float seconds, Func<UnityEngine.RectTransform> func)
            => BindTextViewportInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTextComponent(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<TMPro.TMP_Text> property)
            => bindings.Bind(property, v => obj.textComponent = v);
        public static void BindTextComponent(this TMPro.TMP_InputField obj, IProperty<TMPro.TMP_Text> property)
            => BindTextComponent(obj, Bindings2._scope, property);
        public static void BindTextComponent(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<TMPro.TMP_Text> func)
            => bindings.BindUpdate(() => obj.textComponent = func());
        public static void BindTextComponent(this TMPro.TMP_InputField obj, Func<TMPro.TMP_Text> func)
            => BindTextComponent(obj, Bindings2._scope, func);
        public static void BindTextComponentInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<TMPro.TMP_Text> func)
            => bindings.BindInterval(seconds, () => obj.textComponent = func());
        public static void BindTextComponentInterval(this TMPro.TMP_InputField obj, float seconds, Func<TMPro.TMP_Text> func)
            => BindTextComponentInterval(obj, Bindings2._scope, seconds, func);
        public static void BindText<T>(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<T> property)
            => bindings.Bind(property, v => obj.text = v.ToString());
        public static void BindText<T>(this TMPro.TMP_InputField obj, IProperty<T> property)
            => BindText(obj, Bindings2._scope, property);
        public static void BindText<T>(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<T> func)
            => bindings.BindUpdate(() => obj.text = func().ToString());
        public static void BindText<T>(this TMPro.TMP_InputField obj, Func<T> func)
            => BindText(obj, Bindings2._scope, func);
        public static void BindTextInterval<T>(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<T> func)
            => bindings.BindInterval(seconds, () => obj.text = func().ToString());
        public static void BindTextInterval<T>(this TMPro.TMP_InputField obj, float seconds, Func<T> func)
            => BindTextInterval(obj, Bindings2._scope, seconds, func);
        public static void BindFontAsset(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<TMPro.TMP_FontAsset> property)
            => bindings.Bind(property, v => obj.fontAsset = v);
        public static void BindFontAsset(this TMPro.TMP_InputField obj, IProperty<TMPro.TMP_FontAsset> property)
            => BindFontAsset(obj, Bindings2._scope, property);
        public static void BindFontAsset(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<TMPro.TMP_FontAsset> func)
            => bindings.BindUpdate(() => obj.fontAsset = func());
        public static void BindFontAsset(this TMPro.TMP_InputField obj, Func<TMPro.TMP_FontAsset> func)
            => BindFontAsset(obj, Bindings2._scope, func);
        public static void BindFontAssetInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<TMPro.TMP_FontAsset> func)
            => bindings.BindInterval(seconds, () => obj.fontAsset = func());
        public static void BindFontAssetInterval(this TMPro.TMP_InputField obj, float seconds, Func<TMPro.TMP_FontAsset> func)
            => BindFontAssetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPointSize(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.pointSize = v);
        public static void BindPointSize(this TMPro.TMP_InputField obj, IProperty<System.Single> property)
            => BindPointSize(obj, Bindings2._scope, property);
        public static void BindPointSize(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.pointSize = func());
        public static void BindPointSize(this TMPro.TMP_InputField obj, Func<System.Single> func)
            => BindPointSize(obj, Bindings2._scope, func);
        public static void BindPointSizeInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.pointSize = func());
        public static void BindPointSizeInterval(this TMPro.TMP_InputField obj, float seconds, Func<System.Single> func)
            => BindPointSizeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCharacterLimit(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.characterLimit = v);
        public static void BindCharacterLimit(this TMPro.TMP_InputField obj, IProperty<System.Int32> property)
            => BindCharacterLimit(obj, Bindings2._scope, property);
        public static void BindCharacterLimit(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.characterLimit = func());
        public static void BindCharacterLimit(this TMPro.TMP_InputField obj, Func<System.Int32> func)
            => BindCharacterLimit(obj, Bindings2._scope, func);
        public static void BindCharacterLimitInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.characterLimit = func());
        public static void BindCharacterLimitInterval(this TMPro.TMP_InputField obj, float seconds, Func<System.Int32> func)
            => BindCharacterLimitInterval(obj, Bindings2._scope, seconds, func);
        public static void BindContentType(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<TMPro.TMP_InputField.ContentType> property)
            => bindings.Bind(property, v => obj.contentType = v);
        public static void BindContentType(this TMPro.TMP_InputField obj, IProperty<TMPro.TMP_InputField.ContentType> property)
            => BindContentType(obj, Bindings2._scope, property);
        public static void BindContentType(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<TMPro.TMP_InputField.ContentType> func)
            => bindings.BindUpdate(() => obj.contentType = func());
        public static void BindContentType(this TMPro.TMP_InputField obj, Func<TMPro.TMP_InputField.ContentType> func)
            => BindContentType(obj, Bindings2._scope, func);
        public static void BindContentTypeInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<TMPro.TMP_InputField.ContentType> func)
            => bindings.BindInterval(seconds, () => obj.contentType = func());
        public static void BindContentTypeInterval(this TMPro.TMP_InputField obj, float seconds, Func<TMPro.TMP_InputField.ContentType> func)
            => BindContentTypeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLineType(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<TMPro.TMP_InputField.LineType> property)
            => bindings.Bind(property, v => obj.lineType = v);
        public static void BindLineType(this TMPro.TMP_InputField obj, IProperty<TMPro.TMP_InputField.LineType> property)
            => BindLineType(obj, Bindings2._scope, property);
        public static void BindLineType(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<TMPro.TMP_InputField.LineType> func)
            => bindings.BindUpdate(() => obj.lineType = func());
        public static void BindLineType(this TMPro.TMP_InputField obj, Func<TMPro.TMP_InputField.LineType> func)
            => BindLineType(obj, Bindings2._scope, func);
        public static void BindLineTypeInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<TMPro.TMP_InputField.LineType> func)
            => bindings.BindInterval(seconds, () => obj.lineType = func());
        public static void BindLineTypeInterval(this TMPro.TMP_InputField obj, float seconds, Func<TMPro.TMP_InputField.LineType> func)
            => BindLineTypeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPlaceholder(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<UnityEngine.UI.Graphic> property)
            => bindings.Bind(property, v => obj.placeholder = v);
        public static void BindPlaceholder(this TMPro.TMP_InputField obj, IProperty<UnityEngine.UI.Graphic> property)
            => BindPlaceholder(obj, Bindings2._scope, property);
        public static void BindPlaceholder(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindUpdate(() => obj.placeholder = func());
        public static void BindPlaceholder(this TMPro.TMP_InputField obj, Func<UnityEngine.UI.Graphic> func)
            => BindPlaceholder(obj, Bindings2._scope, func);
        public static void BindPlaceholderInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindInterval(seconds, () => obj.placeholder = func());
        public static void BindPlaceholderInterval(this TMPro.TMP_InputField obj, float seconds, Func<UnityEngine.UI.Graphic> func)
            => BindPlaceholderInterval(obj, Bindings2._scope, seconds, func);
        public static void BindVerticalScrollbar(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<UnityEngine.UI.Scrollbar> property)
            => bindings.Bind(property, v => obj.verticalScrollbar = v);
        public static void BindVerticalScrollbar(this TMPro.TMP_InputField obj, IProperty<UnityEngine.UI.Scrollbar> property)
            => BindVerticalScrollbar(obj, Bindings2._scope, property);
        public static void BindVerticalScrollbar(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<UnityEngine.UI.Scrollbar> func)
            => bindings.BindUpdate(() => obj.verticalScrollbar = func());
        public static void BindVerticalScrollbar(this TMPro.TMP_InputField obj, Func<UnityEngine.UI.Scrollbar> func)
            => BindVerticalScrollbar(obj, Bindings2._scope, func);
        public static void BindVerticalScrollbarInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Scrollbar> func)
            => bindings.BindInterval(seconds, () => obj.verticalScrollbar = func());
        public static void BindVerticalScrollbarInterval(this TMPro.TMP_InputField obj, float seconds, Func<UnityEngine.UI.Scrollbar> func)
            => BindVerticalScrollbarInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCaretBlinkRate(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.caretBlinkRate = v);
        public static void BindCaretBlinkRate(this TMPro.TMP_InputField obj, IProperty<System.Single> property)
            => BindCaretBlinkRate(obj, Bindings2._scope, property);
        public static void BindCaretBlinkRate(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.caretBlinkRate = func());
        public static void BindCaretBlinkRate(this TMPro.TMP_InputField obj, Func<System.Single> func)
            => BindCaretBlinkRate(obj, Bindings2._scope, func);
        public static void BindCaretBlinkRateInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.caretBlinkRate = func());
        public static void BindCaretBlinkRateInterval(this TMPro.TMP_InputField obj, float seconds, Func<System.Single> func)
            => BindCaretBlinkRateInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCaretWidth(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.caretWidth = v);
        public static void BindCaretWidth(this TMPro.TMP_InputField obj, IProperty<System.Int32> property)
            => BindCaretWidth(obj, Bindings2._scope, property);
        public static void BindCaretWidth(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.caretWidth = func());
        public static void BindCaretWidth(this TMPro.TMP_InputField obj, Func<System.Int32> func)
            => BindCaretWidth(obj, Bindings2._scope, func);
        public static void BindCaretWidthInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.caretWidth = func());
        public static void BindCaretWidthInterval(this TMPro.TMP_InputField obj, float seconds, Func<System.Int32> func)
            => BindCaretWidthInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCustomCaretColor(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.customCaretColor = v);
        public static void BindCustomCaretColor(this TMPro.TMP_InputField obj, IProperty<System.Boolean> property)
            => BindCustomCaretColor(obj, Bindings2._scope, property);
        public static void BindCustomCaretColor(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.customCaretColor = func());
        public static void BindCustomCaretColor(this TMPro.TMP_InputField obj, Func<System.Boolean> func)
            => BindCustomCaretColor(obj, Bindings2._scope, func);
        public static void BindCustomCaretColorInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.customCaretColor = func());
        public static void BindCustomCaretColorInterval(this TMPro.TMP_InputField obj, float seconds, Func<System.Boolean> func)
            => BindCustomCaretColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSelectionColor(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<UnityEngine.Color> property)
            => bindings.Bind(property, v => obj.selectionColor = v);
        public static void BindSelectionColor(this TMPro.TMP_InputField obj, IProperty<UnityEngine.Color> property)
            => BindSelectionColor(obj, Bindings2._scope, property);
        public static void BindSelectionColor(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<UnityEngine.Color> func)
            => bindings.BindUpdate(() => obj.selectionColor = func());
        public static void BindSelectionColor(this TMPro.TMP_InputField obj, Func<UnityEngine.Color> func)
            => BindSelectionColor(obj, Bindings2._scope, func);
        public static void BindSelectionColorInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<UnityEngine.Color> func)
            => bindings.BindInterval(seconds, () => obj.selectionColor = func());
        public static void BindSelectionColorInterval(this TMPro.TMP_InputField obj, float seconds, Func<UnityEngine.Color> func)
            => BindSelectionColorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindOnFocusSelectAll(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.onFocusSelectAll = v);
        public static void BindOnFocusSelectAll(this TMPro.TMP_InputField obj, IProperty<System.Boolean> property)
            => BindOnFocusSelectAll(obj, Bindings2._scope, property);
        public static void BindOnFocusSelectAll(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.onFocusSelectAll = func());
        public static void BindOnFocusSelectAll(this TMPro.TMP_InputField obj, Func<System.Boolean> func)
            => BindOnFocusSelectAll(obj, Bindings2._scope, func);
        public static void BindOnFocusSelectAllInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.onFocusSelectAll = func());
        public static void BindOnFocusSelectAllInterval(this TMPro.TMP_InputField obj, float seconds, Func<System.Boolean> func)
            => BindOnFocusSelectAllInterval(obj, Bindings2._scope, seconds, func);
        public static void BindResetOnDeActivation(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.resetOnDeActivation = v);
        public static void BindResetOnDeActivation(this TMPro.TMP_InputField obj, IProperty<System.Boolean> property)
            => BindResetOnDeActivation(obj, Bindings2._scope, property);
        public static void BindResetOnDeActivation(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.resetOnDeActivation = func());
        public static void BindResetOnDeActivation(this TMPro.TMP_InputField obj, Func<System.Boolean> func)
            => BindResetOnDeActivation(obj, Bindings2._scope, func);
        public static void BindResetOnDeActivationInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.resetOnDeActivation = func());
        public static void BindResetOnDeActivationInterval(this TMPro.TMP_InputField obj, float seconds, Func<System.Boolean> func)
            => BindResetOnDeActivationInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRestoreOriginalTextOnEscape(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.restoreOriginalTextOnEscape = v);
        public static void BindRestoreOriginalTextOnEscape(this TMPro.TMP_InputField obj, IProperty<System.Boolean> property)
            => BindRestoreOriginalTextOnEscape(obj, Bindings2._scope, property);
        public static void BindRestoreOriginalTextOnEscape(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.restoreOriginalTextOnEscape = func());
        public static void BindRestoreOriginalTextOnEscape(this TMPro.TMP_InputField obj, Func<System.Boolean> func)
            => BindRestoreOriginalTextOnEscape(obj, Bindings2._scope, func);
        public static void BindRestoreOriginalTextOnEscapeInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.restoreOriginalTextOnEscape = func());
        public static void BindRestoreOriginalTextOnEscapeInterval(this TMPro.TMP_InputField obj, float seconds, Func<System.Boolean> func)
            => BindRestoreOriginalTextOnEscapeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindShouldHideSoftKeyboard(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.shouldHideSoftKeyboard = v);
        public static void BindShouldHideSoftKeyboard(this TMPro.TMP_InputField obj, IProperty<System.Boolean> property)
            => BindShouldHideSoftKeyboard(obj, Bindings2._scope, property);
        public static void BindShouldHideSoftKeyboard(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.shouldHideSoftKeyboard = func());
        public static void BindShouldHideSoftKeyboard(this TMPro.TMP_InputField obj, Func<System.Boolean> func)
            => BindShouldHideSoftKeyboard(obj, Bindings2._scope, func);
        public static void BindShouldHideSoftKeyboardInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.shouldHideSoftKeyboard = func());
        public static void BindShouldHideSoftKeyboardInterval(this TMPro.TMP_InputField obj, float seconds, Func<System.Boolean> func)
            => BindShouldHideSoftKeyboardInterval(obj, Bindings2._scope, seconds, func);
        public static void BindShouldHideMobileInput(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.shouldHideMobileInput = v);
        public static void BindShouldHideMobileInput(this TMPro.TMP_InputField obj, IProperty<System.Boolean> property)
            => BindShouldHideMobileInput(obj, Bindings2._scope, property);
        public static void BindShouldHideMobileInput(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.shouldHideMobileInput = func());
        public static void BindShouldHideMobileInput(this TMPro.TMP_InputField obj, Func<System.Boolean> func)
            => BindShouldHideMobileInput(obj, Bindings2._scope, func);
        public static void BindShouldHideMobileInputInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.shouldHideMobileInput = func());
        public static void BindShouldHideMobileInputInterval(this TMPro.TMP_InputField obj, float seconds, Func<System.Boolean> func)
            => BindShouldHideMobileInputInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReadOnly(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.readOnly = v);
        public static void BindReadOnly(this TMPro.TMP_InputField obj, IProperty<System.Boolean> property)
            => BindReadOnly(obj, Bindings2._scope, property);
        public static void BindReadOnly(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.readOnly = func());
        public static void BindReadOnly(this TMPro.TMP_InputField obj, Func<System.Boolean> func)
            => BindReadOnly(obj, Bindings2._scope, func);
        public static void BindReadOnlyInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.readOnly = func());
        public static void BindReadOnlyInterval(this TMPro.TMP_InputField obj, float seconds, Func<System.Boolean> func)
            => BindReadOnlyInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRichText(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.richText = v);
        public static void BindRichText(this TMPro.TMP_InputField obj, IProperty<System.Boolean> property)
            => BindRichText(obj, Bindings2._scope, property);
        public static void BindRichText(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.richText = func());
        public static void BindRichText(this TMPro.TMP_InputField obj, Func<System.Boolean> func)
            => BindRichText(obj, Bindings2._scope, func);
        public static void BindRichTextInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.richText = func());
        public static void BindRichTextInterval(this TMPro.TMP_InputField obj, float seconds, Func<System.Boolean> func)
            => BindRichTextInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIsRichTextEditingAllowed(this TMPro.TMP_InputField obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isRichTextEditingAllowed = v);
        public static void BindIsRichTextEditingAllowed(this TMPro.TMP_InputField obj, IProperty<System.Boolean> property)
            => BindIsRichTextEditingAllowed(obj, Bindings2._scope, property);
        public static void BindIsRichTextEditingAllowed(this TMPro.TMP_InputField obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isRichTextEditingAllowed = func());
        public static void BindIsRichTextEditingAllowed(this TMPro.TMP_InputField obj, Func<System.Boolean> func)
            => BindIsRichTextEditingAllowed(obj, Bindings2._scope, func);
        public static void BindIsRichTextEditingAllowedInterval(this TMPro.TMP_InputField obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isRichTextEditingAllowed = func());
        public static void BindIsRichTextEditingAllowedInterval(this TMPro.TMP_InputField obj, float seconds, Func<System.Boolean> func)
            => BindIsRichTextEditingAllowedInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_TMPRO
        public static void BindIsSelected(this TMPro.TMP_ScrollbarEventHandler obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isSelected = v);
        public static void BindIsSelected(this TMPro.TMP_ScrollbarEventHandler obj, IProperty<System.Boolean> property)
            => BindIsSelected(obj, Bindings2._scope, property);
        public static void BindIsSelected(this TMPro.TMP_ScrollbarEventHandler obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isSelected = func());
        public static void BindIsSelected(this TMPro.TMP_ScrollbarEventHandler obj, Func<System.Boolean> func)
            => BindIsSelected(obj, Bindings2._scope, func);
        public static void BindIsSelectedInterval(this TMPro.TMP_ScrollbarEventHandler obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isSelected = func());
        public static void BindIsSelectedInterval(this TMPro.TMP_ScrollbarEventHandler obj, float seconds, Func<System.Boolean> func)
            => BindIsSelectedInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_TMPRO
        public static void BindFontAsset(this TMPro.TMP_SubMesh obj, Bindings2 bindings, IProperty<TMPro.TMP_FontAsset> property)
            => bindings.Bind(property, v => obj.fontAsset = v);
        public static void BindFontAsset(this TMPro.TMP_SubMesh obj, IProperty<TMPro.TMP_FontAsset> property)
            => BindFontAsset(obj, Bindings2._scope, property);
        public static void BindFontAsset(this TMPro.TMP_SubMesh obj, Bindings2 bindings, Func<TMPro.TMP_FontAsset> func)
            => bindings.BindUpdate(() => obj.fontAsset = func());
        public static void BindFontAsset(this TMPro.TMP_SubMesh obj, Func<TMPro.TMP_FontAsset> func)
            => BindFontAsset(obj, Bindings2._scope, func);
        public static void BindFontAssetInterval(this TMPro.TMP_SubMesh obj, Bindings2 bindings, float seconds, Func<TMPro.TMP_FontAsset> func)
            => bindings.BindInterval(seconds, () => obj.fontAsset = func());
        public static void BindFontAssetInterval(this TMPro.TMP_SubMesh obj, float seconds, Func<TMPro.TMP_FontAsset> func)
            => BindFontAssetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSpriteAsset(this TMPro.TMP_SubMesh obj, Bindings2 bindings, IProperty<TMPro.TMP_SpriteAsset> property)
            => bindings.Bind(property, v => obj.spriteAsset = v);
        public static void BindSpriteAsset(this TMPro.TMP_SubMesh obj, IProperty<TMPro.TMP_SpriteAsset> property)
            => BindSpriteAsset(obj, Bindings2._scope, property);
        public static void BindSpriteAsset(this TMPro.TMP_SubMesh obj, Bindings2 bindings, Func<TMPro.TMP_SpriteAsset> func)
            => bindings.BindUpdate(() => obj.spriteAsset = func());
        public static void BindSpriteAsset(this TMPro.TMP_SubMesh obj, Func<TMPro.TMP_SpriteAsset> func)
            => BindSpriteAsset(obj, Bindings2._scope, func);
        public static void BindSpriteAssetInterval(this TMPro.TMP_SubMesh obj, Bindings2 bindings, float seconds, Func<TMPro.TMP_SpriteAsset> func)
            => bindings.BindInterval(seconds, () => obj.spriteAsset = func());
        public static void BindSpriteAssetInterval(this TMPro.TMP_SubMesh obj, float seconds, Func<TMPro.TMP_SpriteAsset> func)
            => BindSpriteAssetInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_TMPRO
        public static void BindFontAsset(this TMPro.TMP_SubMeshUI obj, Bindings2 bindings, IProperty<TMPro.TMP_FontAsset> property)
            => bindings.Bind(property, v => obj.fontAsset = v);
        public static void BindFontAsset(this TMPro.TMP_SubMeshUI obj, IProperty<TMPro.TMP_FontAsset> property)
            => BindFontAsset(obj, Bindings2._scope, property);
        public static void BindFontAsset(this TMPro.TMP_SubMeshUI obj, Bindings2 bindings, Func<TMPro.TMP_FontAsset> func)
            => bindings.BindUpdate(() => obj.fontAsset = func());
        public static void BindFontAsset(this TMPro.TMP_SubMeshUI obj, Func<TMPro.TMP_FontAsset> func)
            => BindFontAsset(obj, Bindings2._scope, func);
        public static void BindFontAssetInterval(this TMPro.TMP_SubMeshUI obj, Bindings2 bindings, float seconds, Func<TMPro.TMP_FontAsset> func)
            => bindings.BindInterval(seconds, () => obj.fontAsset = func());
        public static void BindFontAssetInterval(this TMPro.TMP_SubMeshUI obj, float seconds, Func<TMPro.TMP_FontAsset> func)
            => BindFontAssetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSpriteAsset(this TMPro.TMP_SubMeshUI obj, Bindings2 bindings, IProperty<TMPro.TMP_SpriteAsset> property)
            => bindings.Bind(property, v => obj.spriteAsset = v);
        public static void BindSpriteAsset(this TMPro.TMP_SubMeshUI obj, IProperty<TMPro.TMP_SpriteAsset> property)
            => BindSpriteAsset(obj, Bindings2._scope, property);
        public static void BindSpriteAsset(this TMPro.TMP_SubMeshUI obj, Bindings2 bindings, Func<TMPro.TMP_SpriteAsset> func)
            => bindings.BindUpdate(() => obj.spriteAsset = func());
        public static void BindSpriteAsset(this TMPro.TMP_SubMeshUI obj, Func<TMPro.TMP_SpriteAsset> func)
            => BindSpriteAsset(obj, Bindings2._scope, func);
        public static void BindSpriteAssetInterval(this TMPro.TMP_SubMeshUI obj, Bindings2 bindings, float seconds, Func<TMPro.TMP_SpriteAsset> func)
            => bindings.BindInterval(seconds, () => obj.spriteAsset = func());
        public static void BindSpriteAssetInterval(this TMPro.TMP_SubMeshUI obj, float seconds, Func<TMPro.TMP_SpriteAsset> func)
            => BindSpriteAssetInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindInteractable(this UnityEngine.UI.Toggle obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.interactable = v);
        public static void BindInteractable(this UnityEngine.UI.Toggle obj, IProperty<System.Boolean> property)
            => BindInteractable(obj, Bindings2._scope, property);
        public static void BindInteractable(this UnityEngine.UI.Toggle obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.interactable = func());
        public static void BindInteractable(this UnityEngine.UI.Toggle obj, Func<System.Boolean> func)
            => BindInteractable(obj, Bindings2._scope, func);
        public static void BindInteractableInterval(this UnityEngine.UI.Toggle obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.interactable = func());
        public static void BindInteractableInterval(this UnityEngine.UI.Toggle obj, float seconds, Func<System.Boolean> func)
            => BindInteractableInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTransition(this UnityEngine.UI.Toggle obj, Bindings2 bindings, IProperty<UnityEngine.UI.Selectable.Transition> property)
            => bindings.Bind(property, v => obj.transition = v);
        public static void BindTransition(this UnityEngine.UI.Toggle obj, IProperty<UnityEngine.UI.Selectable.Transition> property)
            => BindTransition(obj, Bindings2._scope, property);
        public static void BindTransition(this UnityEngine.UI.Toggle obj, Bindings2 bindings, Func<UnityEngine.UI.Selectable.Transition> func)
            => bindings.BindUpdate(() => obj.transition = func());
        public static void BindTransition(this UnityEngine.UI.Toggle obj, Func<UnityEngine.UI.Selectable.Transition> func)
            => BindTransition(obj, Bindings2._scope, func);
        public static void BindTransitionInterval(this UnityEngine.UI.Toggle obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Selectable.Transition> func)
            => bindings.BindInterval(seconds, () => obj.transition = func());
        public static void BindTransitionInterval(this UnityEngine.UI.Toggle obj, float seconds, Func<UnityEngine.UI.Selectable.Transition> func)
            => BindTransitionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetGraphic(this UnityEngine.UI.Toggle obj, Bindings2 bindings, IProperty<UnityEngine.UI.Graphic> property)
            => bindings.Bind(property, v => obj.targetGraphic = v);
        public static void BindTargetGraphic(this UnityEngine.UI.Toggle obj, IProperty<UnityEngine.UI.Graphic> property)
            => BindTargetGraphic(obj, Bindings2._scope, property);
        public static void BindTargetGraphic(this UnityEngine.UI.Toggle obj, Bindings2 bindings, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindUpdate(() => obj.targetGraphic = func());
        public static void BindTargetGraphic(this UnityEngine.UI.Toggle obj, Func<UnityEngine.UI.Graphic> func)
            => BindTargetGraphic(obj, Bindings2._scope, func);
        public static void BindTargetGraphicInterval(this UnityEngine.UI.Toggle obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindInterval(seconds, () => obj.targetGraphic = func());
        public static void BindTargetGraphicInterval(this UnityEngine.UI.Toggle obj, float seconds, Func<UnityEngine.UI.Graphic> func)
            => BindTargetGraphicInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColors(this UnityEngine.UI.Toggle obj, Bindings2 bindings, IProperty<UnityEngine.UI.ColorBlock> property)
            => bindings.Bind(property, v => obj.colors = v);
        public static void BindColors(this UnityEngine.UI.Toggle obj, IProperty<UnityEngine.UI.ColorBlock> property)
            => BindColors(obj, Bindings2._scope, property);
        public static void BindColors(this UnityEngine.UI.Toggle obj, Bindings2 bindings, Func<UnityEngine.UI.ColorBlock> func)
            => bindings.BindUpdate(() => obj.colors = func());
        public static void BindColors(this UnityEngine.UI.Toggle obj, Func<UnityEngine.UI.ColorBlock> func)
            => BindColors(obj, Bindings2._scope, func);
        public static void BindColorsInterval(this UnityEngine.UI.Toggle obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.ColorBlock> func)
            => bindings.BindInterval(seconds, () => obj.colors = func());
        public static void BindColorsInterval(this UnityEngine.UI.Toggle obj, float seconds, Func<UnityEngine.UI.ColorBlock> func)
            => BindColorsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindNavigation(this UnityEngine.UI.Toggle obj, Bindings2 bindings, IProperty<UnityEngine.UI.Navigation> property)
            => bindings.Bind(property, v => obj.navigation = v);
        public static void BindNavigation(this UnityEngine.UI.Toggle obj, IProperty<UnityEngine.UI.Navigation> property)
            => BindNavigation(obj, Bindings2._scope, property);
        public static void BindNavigation(this UnityEngine.UI.Toggle obj, Bindings2 bindings, Func<UnityEngine.UI.Navigation> func)
            => bindings.BindUpdate(() => obj.navigation = func());
        public static void BindNavigation(this UnityEngine.UI.Toggle obj, Func<UnityEngine.UI.Navigation> func)
            => BindNavigation(obj, Bindings2._scope, func);
        public static void BindNavigationInterval(this UnityEngine.UI.Toggle obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Navigation> func)
            => bindings.BindInterval(seconds, () => obj.navigation = func());
        public static void BindNavigationInterval(this UnityEngine.UI.Toggle obj, float seconds, Func<UnityEngine.UI.Navigation> func)
            => BindNavigationInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIsOn(this UnityEngine.UI.Toggle obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isOn = v);
        public static void BindIsOn(this UnityEngine.UI.Toggle obj, IProperty<System.Boolean> property)
            => BindIsOn(obj, Bindings2._scope, property);
        public static void BindIsOn(this UnityEngine.UI.Toggle obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isOn = func());
        public static void BindIsOn(this UnityEngine.UI.Toggle obj, Func<System.Boolean> func)
            => BindIsOn(obj, Bindings2._scope, func);
        public static void BindIsOnInterval(this UnityEngine.UI.Toggle obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isOn = func());
        public static void BindIsOnInterval(this UnityEngine.UI.Toggle obj, float seconds, Func<System.Boolean> func)
            => BindIsOnInterval(obj, Bindings2._scope, seconds, func);
        public static void BindToggleTransition(this UnityEngine.UI.Toggle obj, Bindings2 bindings, IProperty<UnityEngine.UI.Toggle.ToggleTransition> property)
            => bindings.Bind(property, v => obj.toggleTransition = v);
        public static void BindToggleTransition(this UnityEngine.UI.Toggle obj, IProperty<UnityEngine.UI.Toggle.ToggleTransition> property)
            => BindToggleTransition(obj, Bindings2._scope, property);
        public static void BindToggleTransition(this UnityEngine.UI.Toggle obj, Bindings2 bindings, Func<UnityEngine.UI.Toggle.ToggleTransition> func)
            => bindings.BindUpdate(() => obj.toggleTransition = func());
        public static void BindToggleTransition(this UnityEngine.UI.Toggle obj, Func<UnityEngine.UI.Toggle.ToggleTransition> func)
            => BindToggleTransition(obj, Bindings2._scope, func);
        public static void BindToggleTransitionInterval(this UnityEngine.UI.Toggle obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Toggle.ToggleTransition> func)
            => bindings.BindInterval(seconds, () => obj.toggleTransition = func());
        public static void BindToggleTransitionInterval(this UnityEngine.UI.Toggle obj, float seconds, Func<UnityEngine.UI.Toggle.ToggleTransition> func)
            => BindToggleTransitionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindGraphic(this UnityEngine.UI.Toggle obj, Bindings2 bindings, IProperty<UnityEngine.UI.Graphic> property)
            => bindings.Bind(property, v => obj.graphic = v);
        public static void BindGraphic(this UnityEngine.UI.Toggle obj, IProperty<UnityEngine.UI.Graphic> property)
            => BindGraphic(obj, Bindings2._scope, property);
        public static void BindGraphic(this UnityEngine.UI.Toggle obj, Bindings2 bindings, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindUpdate(() => obj.graphic = func());
        public static void BindGraphic(this UnityEngine.UI.Toggle obj, Func<UnityEngine.UI.Graphic> func)
            => BindGraphic(obj, Bindings2._scope, func);
        public static void BindGraphicInterval(this UnityEngine.UI.Toggle obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.Graphic> func)
            => bindings.BindInterval(seconds, () => obj.graphic = func());
        public static void BindGraphicInterval(this UnityEngine.UI.Toggle obj, float seconds, Func<UnityEngine.UI.Graphic> func)
            => BindGraphicInterval(obj, Bindings2._scope, seconds, func);
        public static void BindGroup(this UnityEngine.UI.Toggle obj, Bindings2 bindings, IProperty<UnityEngine.UI.ToggleGroup> property)
            => bindings.Bind(property, v => obj.group = v);
        public static void BindGroup(this UnityEngine.UI.Toggle obj, IProperty<UnityEngine.UI.ToggleGroup> property)
            => BindGroup(obj, Bindings2._scope, property);
        public static void BindGroup(this UnityEngine.UI.Toggle obj, Bindings2 bindings, Func<UnityEngine.UI.ToggleGroup> func)
            => bindings.BindUpdate(() => obj.group = func());
        public static void BindGroup(this UnityEngine.UI.Toggle obj, Func<UnityEngine.UI.ToggleGroup> func)
            => BindGroup(obj, Bindings2._scope, func);
        public static void BindGroupInterval(this UnityEngine.UI.Toggle obj, Bindings2 bindings, float seconds, Func<UnityEngine.UI.ToggleGroup> func)
            => bindings.BindInterval(seconds, () => obj.group = func());
        public static void BindGroupInterval(this UnityEngine.UI.Toggle obj, float seconds, Func<UnityEngine.UI.ToggleGroup> func)
            => BindGroupInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_GUI
        public static void BindAllowSwitchOff(this UnityEngine.UI.ToggleGroup obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.allowSwitchOff = v);
        public static void BindAllowSwitchOff(this UnityEngine.UI.ToggleGroup obj, IProperty<System.Boolean> property)
            => BindAllowSwitchOff(obj, Bindings2._scope, property);
        public static void BindAllowSwitchOff(this UnityEngine.UI.ToggleGroup obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.allowSwitchOff = func());
        public static void BindAllowSwitchOff(this UnityEngine.UI.ToggleGroup obj, Func<System.Boolean> func)
            => BindAllowSwitchOff(obj, Bindings2._scope, func);
        public static void BindAllowSwitchOffInterval(this UnityEngine.UI.ToggleGroup obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.allowSwitchOff = func());
        public static void BindAllowSwitchOffInterval(this UnityEngine.UI.ToggleGroup obj, float seconds, Func<System.Boolean> func)
            => BindAllowSwitchOffInterval(obj, Bindings2._scope, seconds, func);
        #endif


        public static void BindTime(this TrailRenderer obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.time = v);
        public static void BindTime(this TrailRenderer obj, IProperty<System.Single> property)
            => BindTime(obj, Bindings2._scope, property);
        public static void BindTime(this TrailRenderer obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.time = func());
        public static void BindTime(this TrailRenderer obj, Func<System.Single> func)
            => BindTime(obj, Bindings2._scope, func);
        public static void BindTimeInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.time = func());
        public static void BindTimeInterval(this TrailRenderer obj, float seconds, Func<System.Single> func)
            => BindTimeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMinVertexDistance(this TrailRenderer obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.minVertexDistance = v);
        public static void BindMinVertexDistance(this TrailRenderer obj, IProperty<System.Single> property)
            => BindMinVertexDistance(obj, Bindings2._scope, property);
        public static void BindMinVertexDistance(this TrailRenderer obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.minVertexDistance = func());
        public static void BindMinVertexDistance(this TrailRenderer obj, Func<System.Single> func)
            => BindMinVertexDistance(obj, Bindings2._scope, func);
        public static void BindMinVertexDistanceInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.minVertexDistance = func());
        public static void BindMinVertexDistanceInterval(this TrailRenderer obj, float seconds, Func<System.Single> func)
            => BindMinVertexDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutodestruct(this TrailRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autodestruct = v);
        public static void BindAutodestruct(this TrailRenderer obj, IProperty<System.Boolean> property)
            => BindAutodestruct(obj, Bindings2._scope, property);
        public static void BindAutodestruct(this TrailRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autodestruct = func());
        public static void BindAutodestruct(this TrailRenderer obj, Func<System.Boolean> func)
            => BindAutodestruct(obj, Bindings2._scope, func);
        public static void BindAutodestructInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autodestruct = func());
        public static void BindAutodestructInterval(this TrailRenderer obj, float seconds, Func<System.Boolean> func)
            => BindAutodestructInterval(obj, Bindings2._scope, seconds, func);
        public static void BindEmitting(this TrailRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.emitting = v);
        public static void BindEmitting(this TrailRenderer obj, IProperty<System.Boolean> property)
            => BindEmitting(obj, Bindings2._scope, property);
        public static void BindEmitting(this TrailRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.emitting = func());
        public static void BindEmitting(this TrailRenderer obj, Func<System.Boolean> func)
            => BindEmitting(obj, Bindings2._scope, func);
        public static void BindEmittingInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.emitting = func());
        public static void BindEmittingInterval(this TrailRenderer obj, float seconds, Func<System.Boolean> func)
            => BindEmittingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindColorGradient(this TrailRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Gradient> property)
            => bindings.Bind(property, v => obj.colorGradient = v);
        public static void BindColorGradient(this TrailRenderer obj, IProperty<UnityEngine.Gradient> property)
            => BindColorGradient(obj, Bindings2._scope, property);
        public static void BindColorGradient(this TrailRenderer obj, Bindings2 bindings, Func<UnityEngine.Gradient> func)
            => bindings.BindUpdate(() => obj.colorGradient = func());
        public static void BindColorGradient(this TrailRenderer obj, Func<UnityEngine.Gradient> func)
            => BindColorGradient(obj, Bindings2._scope, func);
        public static void BindColorGradientInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Gradient> func)
            => bindings.BindInterval(seconds, () => obj.colorGradient = func());
        public static void BindColorGradientInterval(this TrailRenderer obj, float seconds, Func<UnityEngine.Gradient> func)
            => BindColorGradientInterval(obj, Bindings2._scope, seconds, func);
        public static void BindNumCornerVertices(this TrailRenderer obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.numCornerVertices = v);
        public static void BindNumCornerVertices(this TrailRenderer obj, IProperty<System.Int32> property)
            => BindNumCornerVertices(obj, Bindings2._scope, property);
        public static void BindNumCornerVertices(this TrailRenderer obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.numCornerVertices = func());
        public static void BindNumCornerVertices(this TrailRenderer obj, Func<System.Int32> func)
            => BindNumCornerVertices(obj, Bindings2._scope, func);
        public static void BindNumCornerVerticesInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.numCornerVertices = func());
        public static void BindNumCornerVerticesInterval(this TrailRenderer obj, float seconds, Func<System.Int32> func)
            => BindNumCornerVerticesInterval(obj, Bindings2._scope, seconds, func);
        public static void BindNumCapVertices(this TrailRenderer obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.numCapVertices = v);
        public static void BindNumCapVertices(this TrailRenderer obj, IProperty<System.Int32> property)
            => BindNumCapVertices(obj, Bindings2._scope, property);
        public static void BindNumCapVertices(this TrailRenderer obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.numCapVertices = func());
        public static void BindNumCapVertices(this TrailRenderer obj, Func<System.Int32> func)
            => BindNumCapVertices(obj, Bindings2._scope, func);
        public static void BindNumCapVerticesInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.numCapVertices = func());
        public static void BindNumCapVerticesInterval(this TrailRenderer obj, float seconds, Func<System.Int32> func)
            => BindNumCapVerticesInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAlignment(this TrailRenderer obj, Bindings2 bindings, IProperty<UnityEngine.LineAlignment> property)
            => bindings.Bind(property, v => obj.alignment = v);
        public static void BindAlignment(this TrailRenderer obj, IProperty<UnityEngine.LineAlignment> property)
            => BindAlignment(obj, Bindings2._scope, property);
        public static void BindAlignment(this TrailRenderer obj, Bindings2 bindings, Func<UnityEngine.LineAlignment> func)
            => bindings.BindUpdate(() => obj.alignment = func());
        public static void BindAlignment(this TrailRenderer obj, Func<UnityEngine.LineAlignment> func)
            => BindAlignment(obj, Bindings2._scope, func);
        public static void BindAlignmentInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.LineAlignment> func)
            => bindings.BindInterval(seconds, () => obj.alignment = func());
        public static void BindAlignmentInterval(this TrailRenderer obj, float seconds, Func<UnityEngine.LineAlignment> func)
            => BindAlignmentInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTextureMode(this TrailRenderer obj, Bindings2 bindings, IProperty<UnityEngine.LineTextureMode> property)
            => bindings.Bind(property, v => obj.textureMode = v);
        public static void BindTextureMode(this TrailRenderer obj, IProperty<UnityEngine.LineTextureMode> property)
            => BindTextureMode(obj, Bindings2._scope, property);
        public static void BindTextureMode(this TrailRenderer obj, Bindings2 bindings, Func<UnityEngine.LineTextureMode> func)
            => bindings.BindUpdate(() => obj.textureMode = func());
        public static void BindTextureMode(this TrailRenderer obj, Func<UnityEngine.LineTextureMode> func)
            => BindTextureMode(obj, Bindings2._scope, func);
        public static void BindTextureModeInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.LineTextureMode> func)
            => bindings.BindInterval(seconds, () => obj.textureMode = func());
        public static void BindTextureModeInterval(this TrailRenderer obj, float seconds, Func<UnityEngine.LineTextureMode> func)
            => BindTextureModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindGenerateLightingData(this TrailRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.generateLightingData = v);
        public static void BindGenerateLightingData(this TrailRenderer obj, IProperty<System.Boolean> property)
            => BindGenerateLightingData(obj, Bindings2._scope, property);
        public static void BindGenerateLightingData(this TrailRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.generateLightingData = func());
        public static void BindGenerateLightingData(this TrailRenderer obj, Func<System.Boolean> func)
            => BindGenerateLightingData(obj, Bindings2._scope, func);
        public static void BindGenerateLightingDataInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.generateLightingData = func());
        public static void BindGenerateLightingDataInterval(this TrailRenderer obj, float seconds, Func<System.Boolean> func)
            => BindGenerateLightingDataInterval(obj, Bindings2._scope, seconds, func);
        public static void BindShadowBias(this TrailRenderer obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.shadowBias = v);
        public static void BindShadowBias(this TrailRenderer obj, IProperty<System.Single> property)
            => BindShadowBias(obj, Bindings2._scope, property);
        public static void BindShadowBias(this TrailRenderer obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.shadowBias = func());
        public static void BindShadowBias(this TrailRenderer obj, Func<System.Single> func)
            => BindShadowBias(obj, Bindings2._scope, func);
        public static void BindShadowBiasInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.shadowBias = func());
        public static void BindShadowBiasInterval(this TrailRenderer obj, float seconds, Func<System.Single> func)
            => BindShadowBiasInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSharedMaterials(this TrailRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Material[]> property)
            => bindings.Bind(property, v => obj.sharedMaterials = v);
        public static void BindSharedMaterials(this TrailRenderer obj, IProperty<UnityEngine.Material[]> property)
            => BindSharedMaterials(obj, Bindings2._scope, property);
        public static void BindSharedMaterials(this TrailRenderer obj, Bindings2 bindings, Func<UnityEngine.Material[]> func)
            => bindings.BindUpdate(() => obj.sharedMaterials = func());
        public static void BindSharedMaterials(this TrailRenderer obj, Func<UnityEngine.Material[]> func)
            => BindSharedMaterials(obj, Bindings2._scope, func);
        public static void BindSharedMaterialsInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Material[]> func)
            => bindings.BindInterval(seconds, () => obj.sharedMaterials = func());
        public static void BindSharedMaterialsInterval(this TrailRenderer obj, float seconds, Func<UnityEngine.Material[]> func)
            => BindSharedMaterialsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindShadowCastingMode(this TrailRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Rendering.ShadowCastingMode> property)
            => bindings.Bind(property, v => obj.shadowCastingMode = v);
        public static void BindShadowCastingMode(this TrailRenderer obj, IProperty<UnityEngine.Rendering.ShadowCastingMode> property)
            => BindShadowCastingMode(obj, Bindings2._scope, property);
        public static void BindShadowCastingMode(this TrailRenderer obj, Bindings2 bindings, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => bindings.BindUpdate(() => obj.shadowCastingMode = func());
        public static void BindShadowCastingMode(this TrailRenderer obj, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => BindShadowCastingMode(obj, Bindings2._scope, func);
        public static void BindShadowCastingModeInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => bindings.BindInterval(seconds, () => obj.shadowCastingMode = func());
        public static void BindShadowCastingModeInterval(this TrailRenderer obj, float seconds, Func<UnityEngine.Rendering.ShadowCastingMode> func)
            => BindShadowCastingModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReceiveShadows(this TrailRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.receiveShadows = v);
        public static void BindReceiveShadows(this TrailRenderer obj, IProperty<System.Boolean> property)
            => BindReceiveShadows(obj, Bindings2._scope, property);
        public static void BindReceiveShadows(this TrailRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.receiveShadows = func());
        public static void BindReceiveShadows(this TrailRenderer obj, Func<System.Boolean> func)
            => BindReceiveShadows(obj, Bindings2._scope, func);
        public static void BindReceiveShadowsInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.receiveShadows = func());
        public static void BindReceiveShadowsInterval(this TrailRenderer obj, float seconds, Func<System.Boolean> func)
            => BindReceiveShadowsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLightProbeUsage(this TrailRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Rendering.LightProbeUsage> property)
            => bindings.Bind(property, v => obj.lightProbeUsage = v);
        public static void BindLightProbeUsage(this TrailRenderer obj, IProperty<UnityEngine.Rendering.LightProbeUsage> property)
            => BindLightProbeUsage(obj, Bindings2._scope, property);
        public static void BindLightProbeUsage(this TrailRenderer obj, Bindings2 bindings, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => bindings.BindUpdate(() => obj.lightProbeUsage = func());
        public static void BindLightProbeUsage(this TrailRenderer obj, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => BindLightProbeUsage(obj, Bindings2._scope, func);
        public static void BindLightProbeUsageInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => bindings.BindInterval(seconds, () => obj.lightProbeUsage = func());
        public static void BindLightProbeUsageInterval(this TrailRenderer obj, float seconds, Func<UnityEngine.Rendering.LightProbeUsage> func)
            => BindLightProbeUsageInterval(obj, Bindings2._scope, seconds, func);
        public static void BindReflectionProbeUsage(this TrailRenderer obj, Bindings2 bindings, IProperty<UnityEngine.Rendering.ReflectionProbeUsage> property)
            => bindings.Bind(property, v => obj.reflectionProbeUsage = v);
        public static void BindReflectionProbeUsage(this TrailRenderer obj, IProperty<UnityEngine.Rendering.ReflectionProbeUsage> property)
            => BindReflectionProbeUsage(obj, Bindings2._scope, property);
        public static void BindReflectionProbeUsage(this TrailRenderer obj, Bindings2 bindings, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => bindings.BindUpdate(() => obj.reflectionProbeUsage = func());
        public static void BindReflectionProbeUsage(this TrailRenderer obj, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => BindReflectionProbeUsage(obj, Bindings2._scope, func);
        public static void BindReflectionProbeUsageInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => bindings.BindInterval(seconds, () => obj.reflectionProbeUsage = func());
        public static void BindReflectionProbeUsageInterval(this TrailRenderer obj, float seconds, Func<UnityEngine.Rendering.ReflectionProbeUsage> func)
            => BindReflectionProbeUsageInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMotionVectorGenerationMode(this TrailRenderer obj, Bindings2 bindings, IProperty<UnityEngine.MotionVectorGenerationMode> property)
            => bindings.Bind(property, v => obj.motionVectorGenerationMode = v);
        public static void BindMotionVectorGenerationMode(this TrailRenderer obj, IProperty<UnityEngine.MotionVectorGenerationMode> property)
            => BindMotionVectorGenerationMode(obj, Bindings2._scope, property);
        public static void BindMotionVectorGenerationMode(this TrailRenderer obj, Bindings2 bindings, Func<UnityEngine.MotionVectorGenerationMode> func)
            => bindings.BindUpdate(() => obj.motionVectorGenerationMode = func());
        public static void BindMotionVectorGenerationMode(this TrailRenderer obj, Func<UnityEngine.MotionVectorGenerationMode> func)
            => BindMotionVectorGenerationMode(obj, Bindings2._scope, func);
        public static void BindMotionVectorGenerationModeInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<UnityEngine.MotionVectorGenerationMode> func)
            => bindings.BindInterval(seconds, () => obj.motionVectorGenerationMode = func());
        public static void BindMotionVectorGenerationModeInterval(this TrailRenderer obj, float seconds, Func<UnityEngine.MotionVectorGenerationMode> func)
            => BindMotionVectorGenerationModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAllowOcclusionWhenDynamic(this TrailRenderer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.allowOcclusionWhenDynamic = v);
        public static void BindAllowOcclusionWhenDynamic(this TrailRenderer obj, IProperty<System.Boolean> property)
            => BindAllowOcclusionWhenDynamic(obj, Bindings2._scope, property);
        public static void BindAllowOcclusionWhenDynamic(this TrailRenderer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.allowOcclusionWhenDynamic = func());
        public static void BindAllowOcclusionWhenDynamic(this TrailRenderer obj, Func<System.Boolean> func)
            => BindAllowOcclusionWhenDynamic(obj, Bindings2._scope, func);
        public static void BindAllowOcclusionWhenDynamicInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.allowOcclusionWhenDynamic = func());
        public static void BindAllowOcclusionWhenDynamicInterval(this TrailRenderer obj, float seconds, Func<System.Boolean> func)
            => BindAllowOcclusionWhenDynamicInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSortingLayerID(this TrailRenderer obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.sortingLayerID = v);
        public static void BindSortingLayerID(this TrailRenderer obj, IProperty<System.Int32> property)
            => BindSortingLayerID(obj, Bindings2._scope, property);
        public static void BindSortingLayerID(this TrailRenderer obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.sortingLayerID = func());
        public static void BindSortingLayerID(this TrailRenderer obj, Func<System.Int32> func)
            => BindSortingLayerID(obj, Bindings2._scope, func);
        public static void BindSortingLayerIDInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.sortingLayerID = func());
        public static void BindSortingLayerIDInterval(this TrailRenderer obj, float seconds, Func<System.Int32> func)
            => BindSortingLayerIDInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSortingOrder(this TrailRenderer obj, Bindings2 bindings, IProperty<System.Int32> property)
            => bindings.Bind(property, v => obj.sortingOrder = v);
        public static void BindSortingOrder(this TrailRenderer obj, IProperty<System.Int32> property)
            => BindSortingOrder(obj, Bindings2._scope, property);
        public static void BindSortingOrder(this TrailRenderer obj, Bindings2 bindings, Func<System.Int32> func)
            => bindings.BindUpdate(() => obj.sortingOrder = func());
        public static void BindSortingOrder(this TrailRenderer obj, Func<System.Int32> func)
            => BindSortingOrder(obj, Bindings2._scope, func);
        public static void BindSortingOrderInterval(this TrailRenderer obj, Bindings2 bindings, float seconds, Func<System.Int32> func)
            => bindings.BindInterval(seconds, () => obj.sortingOrder = func());
        public static void BindSortingOrderInterval(this TrailRenderer obj, float seconds, Func<System.Int32> func)
            => BindSortingOrderInterval(obj, Bindings2._scope, seconds, func);


        public static void BindLocalPosition(this Transform obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.localPosition = v);
        public static void BindLocalPosition(this Transform obj, IProperty<UnityEngine.Vector3> property)
            => BindLocalPosition(obj, Bindings2._scope, property);
        public static void BindLocalPosition(this Transform obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.localPosition = func());
        public static void BindLocalPosition(this Transform obj, Func<UnityEngine.Vector3> func)
            => BindLocalPosition(obj, Bindings2._scope, func);
        public static void BindLocalPositionInterval(this Transform obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.localPosition = func());
        public static void BindLocalPositionInterval(this Transform obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindLocalPositionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLocalPositionLerp(this Transform obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.localPosition = Vector3.Lerp(obj.localPosition, property.Value, speed * Time.smoothDeltaTime));
        public static void BindLocalPositionLerp(this Transform obj, float speed, Property<UnityEngine.Vector3> property)
            => BindLocalPositionLerp(obj, Bindings2._scope, speed, property);
        public static void BindLocalPositionLerp(this Transform obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.localPosition = Vector3.Lerp(obj.localPosition, func(), speed * Time.smoothDeltaTime));
        public static void BindLocalPositionLerp(this Transform obj, float speed, Func<UnityEngine.Vector3> func)
            => BindLocalPositionLerp(obj, Bindings2._scope, speed, func);
        public static void BindLocalPositionTowards(this Transform obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.localPosition = Vector3.MoveTowards(obj.localPosition, property.Value, speed * Time.smoothDeltaTime));
        public static void BindLocalPositionTowards(this Transform obj, float speed, Property<UnityEngine.Vector3> property)
            => BindLocalPositionTowards(obj, Bindings2._scope, speed, property);
        public static void BindLocalPositionTowards(this Transform obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.localPosition = Vector3.MoveTowards(obj.localPosition, func(), speed * Time.smoothDeltaTime));
        public static void BindLocalPositionTowards(this Transform obj, float speed, Func<UnityEngine.Vector3> func)
            => BindLocalPositionTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateLocalPosition(this Transform obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.localPosition = Vector3.Lerp(start, end, t));
        public static void AnimateLocalPosition(this Transform obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateLocalPosition(obj, Bindings2._scope, start, end, curve);
        public static void AnimateLocalPosition(this Transform obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateLocalPosition(obj, Bindings2._scope, obj.localPosition, end, curve);
        public static void AnimateLocalPosition(this Transform obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateLocalPosition(obj, Bindings2._scope, end, curve);
        public static void BindLocalRotation(this Transform obj, Bindings2 bindings, IProperty<UnityEngine.Quaternion> property)
            => bindings.Bind(property, v => obj.localRotation = v);
        public static void BindLocalRotation(this Transform obj, IProperty<UnityEngine.Quaternion> property)
            => BindLocalRotation(obj, Bindings2._scope, property);
        public static void BindLocalRotation(this Transform obj, Bindings2 bindings, Func<UnityEngine.Quaternion> func)
            => bindings.BindUpdate(() => obj.localRotation = func());
        public static void BindLocalRotation(this Transform obj, Func<UnityEngine.Quaternion> func)
            => BindLocalRotation(obj, Bindings2._scope, func);
        public static void BindLocalRotationInterval(this Transform obj, Bindings2 bindings, float seconds, Func<UnityEngine.Quaternion> func)
            => bindings.BindInterval(seconds, () => obj.localRotation = func());
        public static void BindLocalRotationInterval(this Transform obj, float seconds, Func<UnityEngine.Quaternion> func)
            => BindLocalRotationInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLocalScale(this Transform obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.localScale = v);
        public static void BindLocalScale(this Transform obj, IProperty<UnityEngine.Vector3> property)
            => BindLocalScale(obj, Bindings2._scope, property);
        public static void BindLocalScale(this Transform obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.localScale = func());
        public static void BindLocalScale(this Transform obj, Func<UnityEngine.Vector3> func)
            => BindLocalScale(obj, Bindings2._scope, func);
        public static void BindLocalScaleInterval(this Transform obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.localScale = func());
        public static void BindLocalScaleInterval(this Transform obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindLocalScaleInterval(obj, Bindings2._scope, seconds, func);
        public static void BindLocalScaleLerp(this Transform obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.localScale = Vector3.Lerp(obj.localScale, property.Value, speed * Time.smoothDeltaTime));
        public static void BindLocalScaleLerp(this Transform obj, float speed, Property<UnityEngine.Vector3> property)
            => BindLocalScaleLerp(obj, Bindings2._scope, speed, property);
        public static void BindLocalScaleLerp(this Transform obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.localScale = Vector3.Lerp(obj.localScale, func(), speed * Time.smoothDeltaTime));
        public static void BindLocalScaleLerp(this Transform obj, float speed, Func<UnityEngine.Vector3> func)
            => BindLocalScaleLerp(obj, Bindings2._scope, speed, func);
        public static void BindLocalScaleTowards(this Transform obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.localScale = Vector3.MoveTowards(obj.localScale, property.Value, speed * Time.smoothDeltaTime));
        public static void BindLocalScaleTowards(this Transform obj, float speed, Property<UnityEngine.Vector3> property)
            => BindLocalScaleTowards(obj, Bindings2._scope, speed, property);
        public static void BindLocalScaleTowards(this Transform obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.localScale = Vector3.MoveTowards(obj.localScale, func(), speed * Time.smoothDeltaTime));
        public static void BindLocalScaleTowards(this Transform obj, float speed, Func<UnityEngine.Vector3> func)
            => BindLocalScaleTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateLocalScale(this Transform obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.localScale = Vector3.Lerp(start, end, t));
        public static void AnimateLocalScale(this Transform obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateLocalScale(obj, Bindings2._scope, start, end, curve);
        public static void AnimateLocalScale(this Transform obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateLocalScale(obj, Bindings2._scope, obj.localScale, end, curve);
        public static void AnimateLocalScale(this Transform obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateLocalScale(obj, Bindings2._scope, end, curve);
        public static void BindPosition(this Transform obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.position = v);
        public static void BindPosition(this Transform obj, IProperty<UnityEngine.Vector3> property)
            => BindPosition(obj, Bindings2._scope, property);
        public static void BindPosition(this Transform obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.position = func());
        public static void BindPosition(this Transform obj, Func<UnityEngine.Vector3> func)
            => BindPosition(obj, Bindings2._scope, func);
        public static void BindPositionInterval(this Transform obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.position = func());
        public static void BindPositionInterval(this Transform obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindPositionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPositionLerp(this Transform obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.position = Vector3.Lerp(obj.position, property.Value, speed * Time.smoothDeltaTime));
        public static void BindPositionLerp(this Transform obj, float speed, Property<UnityEngine.Vector3> property)
            => BindPositionLerp(obj, Bindings2._scope, speed, property);
        public static void BindPositionLerp(this Transform obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.position = Vector3.Lerp(obj.position, func(), speed * Time.smoothDeltaTime));
        public static void BindPositionLerp(this Transform obj, float speed, Func<UnityEngine.Vector3> func)
            => BindPositionLerp(obj, Bindings2._scope, speed, func);
        public static void BindPositionTowards(this Transform obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.position = Vector3.MoveTowards(obj.position, property.Value, speed * Time.smoothDeltaTime));
        public static void BindPositionTowards(this Transform obj, float speed, Property<UnityEngine.Vector3> property)
            => BindPositionTowards(obj, Bindings2._scope, speed, property);
        public static void BindPositionTowards(this Transform obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.position = Vector3.MoveTowards(obj.position, func(), speed * Time.smoothDeltaTime));
        public static void BindPositionTowards(this Transform obj, float speed, Func<UnityEngine.Vector3> func)
            => BindPositionTowards(obj, Bindings2._scope, speed, func);
        public static void AnimatePosition(this Transform obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.position = Vector3.Lerp(start, end, t));
        public static void AnimatePosition(this Transform obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimatePosition(obj, Bindings2._scope, start, end, curve);
        public static void AnimatePosition(this Transform obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimatePosition(obj, Bindings2._scope, obj.position, end, curve);
        public static void AnimatePosition(this Transform obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimatePosition(obj, Bindings2._scope, end, curve);
        public static void BindRotation(this Transform obj, Bindings2 bindings, IProperty<UnityEngine.Quaternion> property)
            => bindings.Bind(property, v => obj.rotation = v);
        public static void BindRotation(this Transform obj, IProperty<UnityEngine.Quaternion> property)
            => BindRotation(obj, Bindings2._scope, property);
        public static void BindRotation(this Transform obj, Bindings2 bindings, Func<UnityEngine.Quaternion> func)
            => bindings.BindUpdate(() => obj.rotation = func());
        public static void BindRotation(this Transform obj, Func<UnityEngine.Quaternion> func)
            => BindRotation(obj, Bindings2._scope, func);
        public static void BindRotationInterval(this Transform obj, Bindings2 bindings, float seconds, Func<UnityEngine.Quaternion> func)
            => bindings.BindInterval(seconds, () => obj.rotation = func());
        public static void BindRotationInterval(this Transform obj, float seconds, Func<UnityEngine.Quaternion> func)
            => BindRotationInterval(obj, Bindings2._scope, seconds, func);


        #if UNITY_2021_2_OR_NEWER&&UNITY_UIELEMENTS
        public static void BindPanelSettings(this UnityEngine.UIElements.UIDocument obj, Bindings2 bindings, IProperty<UnityEngine.UIElements.PanelSettings> property)
            => bindings.Bind(property, v => obj.panelSettings = v);
        public static void BindPanelSettings(this UnityEngine.UIElements.UIDocument obj, IProperty<UnityEngine.UIElements.PanelSettings> property)
            => BindPanelSettings(obj, Bindings2._scope, property);
        public static void BindPanelSettings(this UnityEngine.UIElements.UIDocument obj, Bindings2 bindings, Func<UnityEngine.UIElements.PanelSettings> func)
            => bindings.BindUpdate(() => obj.panelSettings = func());
        public static void BindPanelSettings(this UnityEngine.UIElements.UIDocument obj, Func<UnityEngine.UIElements.PanelSettings> func)
            => BindPanelSettings(obj, Bindings2._scope, func);
        public static void BindPanelSettingsInterval(this UnityEngine.UIElements.UIDocument obj, Bindings2 bindings, float seconds, Func<UnityEngine.UIElements.PanelSettings> func)
            => bindings.BindInterval(seconds, () => obj.panelSettings = func());
        public static void BindPanelSettingsInterval(this UnityEngine.UIElements.UIDocument obj, float seconds, Func<UnityEngine.UIElements.PanelSettings> func)
            => BindPanelSettingsInterval(obj, Bindings2._scope, seconds, func);
        public static void BindVisualTreeAsset(this UnityEngine.UIElements.UIDocument obj, Bindings2 bindings, IProperty<UnityEngine.UIElements.VisualTreeAsset> property)
            => bindings.Bind(property, v => obj.visualTreeAsset = v);
        public static void BindVisualTreeAsset(this UnityEngine.UIElements.UIDocument obj, IProperty<UnityEngine.UIElements.VisualTreeAsset> property)
            => BindVisualTreeAsset(obj, Bindings2._scope, property);
        public static void BindVisualTreeAsset(this UnityEngine.UIElements.UIDocument obj, Bindings2 bindings, Func<UnityEngine.UIElements.VisualTreeAsset> func)
            => bindings.BindUpdate(() => obj.visualTreeAsset = func());
        public static void BindVisualTreeAsset(this UnityEngine.UIElements.UIDocument obj, Func<UnityEngine.UIElements.VisualTreeAsset> func)
            => BindVisualTreeAsset(obj, Bindings2._scope, func);
        public static void BindVisualTreeAssetInterval(this UnityEngine.UIElements.UIDocument obj, Bindings2 bindings, float seconds, Func<UnityEngine.UIElements.VisualTreeAsset> func)
            => bindings.BindInterval(seconds, () => obj.visualTreeAsset = func());
        public static void BindVisualTreeAssetInterval(this UnityEngine.UIElements.UIDocument obj, float seconds, Func<UnityEngine.UIElements.VisualTreeAsset> func)
            => BindVisualTreeAssetInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSortingOrder(this UnityEngine.UIElements.UIDocument obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.sortingOrder = v);
        public static void BindSortingOrder(this UnityEngine.UIElements.UIDocument obj, IProperty<System.Single> property)
            => BindSortingOrder(obj, Bindings2._scope, property);
        public static void BindSortingOrder(this UnityEngine.UIElements.UIDocument obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.sortingOrder = func());
        public static void BindSortingOrder(this UnityEngine.UIElements.UIDocument obj, Func<System.Single> func)
            => BindSortingOrder(obj, Bindings2._scope, func);
        public static void BindSortingOrderInterval(this UnityEngine.UIElements.UIDocument obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.sortingOrder = func());
        public static void BindSortingOrderInterval(this UnityEngine.UIElements.UIDocument obj, float seconds, Func<System.Single> func)
            => BindSortingOrderInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_VIDEO
        public static void BindSource(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, IProperty<UnityEngine.Video.VideoSource> property)
            => bindings.Bind(property, v => obj.source = v);
        public static void BindSource(this UnityEngine.Video.VideoPlayer obj, IProperty<UnityEngine.Video.VideoSource> property)
            => BindSource(obj, Bindings2._scope, property);
        public static void BindSource(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, Func<UnityEngine.Video.VideoSource> func)
            => bindings.BindUpdate(() => obj.source = func());
        public static void BindSource(this UnityEngine.Video.VideoPlayer obj, Func<UnityEngine.Video.VideoSource> func)
            => BindSource(obj, Bindings2._scope, func);
        public static void BindSourceInterval(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Video.VideoSource> func)
            => bindings.BindInterval(seconds, () => obj.source = func());
        public static void BindSourceInterval(this UnityEngine.Video.VideoPlayer obj, float seconds, Func<UnityEngine.Video.VideoSource> func)
            => BindSourceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindClip(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, IProperty<UnityEngine.Video.VideoClip> property)
            => bindings.Bind(property, v => obj.clip = v);
        public static void BindClip(this UnityEngine.Video.VideoPlayer obj, IProperty<UnityEngine.Video.VideoClip> property)
            => BindClip(obj, Bindings2._scope, property);
        public static void BindClip(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, Func<UnityEngine.Video.VideoClip> func)
            => bindings.BindUpdate(() => obj.clip = func());
        public static void BindClip(this UnityEngine.Video.VideoPlayer obj, Func<UnityEngine.Video.VideoClip> func)
            => BindClip(obj, Bindings2._scope, func);
        public static void BindClipInterval(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Video.VideoClip> func)
            => bindings.BindInterval(seconds, () => obj.clip = func());
        public static void BindClipInterval(this UnityEngine.Video.VideoPlayer obj, float seconds, Func<UnityEngine.Video.VideoClip> func)
            => BindClipInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUrl<T>(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, IProperty<T> property)
            => bindings.Bind(property, v => obj.url = v.ToString());
        public static void BindUrl<T>(this UnityEngine.Video.VideoPlayer obj, IProperty<T> property)
            => BindUrl(obj, Bindings2._scope, property);
        public static void BindUrl<T>(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, Func<T> func)
            => bindings.BindUpdate(() => obj.url = func().ToString());
        public static void BindUrl<T>(this UnityEngine.Video.VideoPlayer obj, Func<T> func)
            => BindUrl(obj, Bindings2._scope, func);
        public static void BindUrlInterval<T>(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, float seconds, Func<T> func)
            => bindings.BindInterval(seconds, () => obj.url = func().ToString());
        public static void BindUrlInterval<T>(this UnityEngine.Video.VideoPlayer obj, float seconds, Func<T> func)
            => BindUrlInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPlayOnAwake(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.playOnAwake = v);
        public static void BindPlayOnAwake(this UnityEngine.Video.VideoPlayer obj, IProperty<System.Boolean> property)
            => BindPlayOnAwake(obj, Bindings2._scope, property);
        public static void BindPlayOnAwake(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.playOnAwake = func());
        public static void BindPlayOnAwake(this UnityEngine.Video.VideoPlayer obj, Func<System.Boolean> func)
            => BindPlayOnAwake(obj, Bindings2._scope, func);
        public static void BindPlayOnAwakeInterval(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.playOnAwake = func());
        public static void BindPlayOnAwakeInterval(this UnityEngine.Video.VideoPlayer obj, float seconds, Func<System.Boolean> func)
            => BindPlayOnAwakeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWaitForFirstFrame(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.waitForFirstFrame = v);
        public static void BindWaitForFirstFrame(this UnityEngine.Video.VideoPlayer obj, IProperty<System.Boolean> property)
            => BindWaitForFirstFrame(obj, Bindings2._scope, property);
        public static void BindWaitForFirstFrame(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.waitForFirstFrame = func());
        public static void BindWaitForFirstFrame(this UnityEngine.Video.VideoPlayer obj, Func<System.Boolean> func)
            => BindWaitForFirstFrame(obj, Bindings2._scope, func);
        public static void BindWaitForFirstFrameInterval(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.waitForFirstFrame = func());
        public static void BindWaitForFirstFrameInterval(this UnityEngine.Video.VideoPlayer obj, float seconds, Func<System.Boolean> func)
            => BindWaitForFirstFrameInterval(obj, Bindings2._scope, seconds, func);
        public static void BindIsLooping(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.isLooping = v);
        public static void BindIsLooping(this UnityEngine.Video.VideoPlayer obj, IProperty<System.Boolean> property)
            => BindIsLooping(obj, Bindings2._scope, property);
        public static void BindIsLooping(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.isLooping = func());
        public static void BindIsLooping(this UnityEngine.Video.VideoPlayer obj, Func<System.Boolean> func)
            => BindIsLooping(obj, Bindings2._scope, func);
        public static void BindIsLoopingInterval(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.isLooping = func());
        public static void BindIsLoopingInterval(this UnityEngine.Video.VideoPlayer obj, float seconds, Func<System.Boolean> func)
            => BindIsLoopingInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSkipOnDrop(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.skipOnDrop = v);
        public static void BindSkipOnDrop(this UnityEngine.Video.VideoPlayer obj, IProperty<System.Boolean> property)
            => BindSkipOnDrop(obj, Bindings2._scope, property);
        public static void BindSkipOnDrop(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.skipOnDrop = func());
        public static void BindSkipOnDrop(this UnityEngine.Video.VideoPlayer obj, Func<System.Boolean> func)
            => BindSkipOnDrop(obj, Bindings2._scope, func);
        public static void BindSkipOnDropInterval(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.skipOnDrop = func());
        public static void BindSkipOnDropInterval(this UnityEngine.Video.VideoPlayer obj, float seconds, Func<System.Boolean> func)
            => BindSkipOnDropInterval(obj, Bindings2._scope, seconds, func);
        public static void BindPlaybackSpeed(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.playbackSpeed = v);
        public static void BindPlaybackSpeed(this UnityEngine.Video.VideoPlayer obj, IProperty<System.Single> property)
            => BindPlaybackSpeed(obj, Bindings2._scope, property);
        public static void BindPlaybackSpeed(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.playbackSpeed = func());
        public static void BindPlaybackSpeed(this UnityEngine.Video.VideoPlayer obj, Func<System.Single> func)
            => BindPlaybackSpeed(obj, Bindings2._scope, func);
        public static void BindPlaybackSpeedInterval(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.playbackSpeed = func());
        public static void BindPlaybackSpeedInterval(this UnityEngine.Video.VideoPlayer obj, float seconds, Func<System.Single> func)
            => BindPlaybackSpeedInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRenderMode(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, IProperty<UnityEngine.Video.VideoRenderMode> property)
            => bindings.Bind(property, v => obj.renderMode = v);
        public static void BindRenderMode(this UnityEngine.Video.VideoPlayer obj, IProperty<UnityEngine.Video.VideoRenderMode> property)
            => BindRenderMode(obj, Bindings2._scope, property);
        public static void BindRenderMode(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, Func<UnityEngine.Video.VideoRenderMode> func)
            => bindings.BindUpdate(() => obj.renderMode = func());
        public static void BindRenderMode(this UnityEngine.Video.VideoPlayer obj, Func<UnityEngine.Video.VideoRenderMode> func)
            => BindRenderMode(obj, Bindings2._scope, func);
        public static void BindRenderModeInterval(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Video.VideoRenderMode> func)
            => bindings.BindInterval(seconds, () => obj.renderMode = func());
        public static void BindRenderModeInterval(this UnityEngine.Video.VideoPlayer obj, float seconds, Func<UnityEngine.Video.VideoRenderMode> func)
            => BindRenderModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetCamera(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, IProperty<UnityEngine.Camera> property)
            => bindings.Bind(property, v => obj.targetCamera = v);
        public static void BindTargetCamera(this UnityEngine.Video.VideoPlayer obj, IProperty<UnityEngine.Camera> property)
            => BindTargetCamera(obj, Bindings2._scope, property);
        public static void BindTargetCamera(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, Func<UnityEngine.Camera> func)
            => bindings.BindUpdate(() => obj.targetCamera = func());
        public static void BindTargetCamera(this UnityEngine.Video.VideoPlayer obj, Func<UnityEngine.Camera> func)
            => BindTargetCamera(obj, Bindings2._scope, func);
        public static void BindTargetCameraInterval(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Camera> func)
            => bindings.BindInterval(seconds, () => obj.targetCamera = func());
        public static void BindTargetCameraInterval(this UnityEngine.Video.VideoPlayer obj, float seconds, Func<UnityEngine.Camera> func)
            => BindTargetCameraInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetCameraAlpha(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.targetCameraAlpha = v);
        public static void BindTargetCameraAlpha(this UnityEngine.Video.VideoPlayer obj, IProperty<System.Single> property)
            => BindTargetCameraAlpha(obj, Bindings2._scope, property);
        public static void BindTargetCameraAlpha(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.targetCameraAlpha = func());
        public static void BindTargetCameraAlpha(this UnityEngine.Video.VideoPlayer obj, Func<System.Single> func)
            => BindTargetCameraAlpha(obj, Bindings2._scope, func);
        public static void BindTargetCameraAlphaInterval(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.targetCameraAlpha = func());
        public static void BindTargetCameraAlphaInterval(this UnityEngine.Video.VideoPlayer obj, float seconds, Func<System.Single> func)
            => BindTargetCameraAlphaInterval(obj, Bindings2._scope, seconds, func);
        public static void BindTargetCamera3DLayout(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, IProperty<UnityEngine.Video.Video3DLayout> property)
            => bindings.Bind(property, v => obj.targetCamera3DLayout = v);
        public static void BindTargetCamera3DLayout(this UnityEngine.Video.VideoPlayer obj, IProperty<UnityEngine.Video.Video3DLayout> property)
            => BindTargetCamera3DLayout(obj, Bindings2._scope, property);
        public static void BindTargetCamera3DLayout(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, Func<UnityEngine.Video.Video3DLayout> func)
            => bindings.BindUpdate(() => obj.targetCamera3DLayout = func());
        public static void BindTargetCamera3DLayout(this UnityEngine.Video.VideoPlayer obj, Func<UnityEngine.Video.Video3DLayout> func)
            => BindTargetCamera3DLayout(obj, Bindings2._scope, func);
        public static void BindTargetCamera3DLayoutInterval(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Video.Video3DLayout> func)
            => bindings.BindInterval(seconds, () => obj.targetCamera3DLayout = func());
        public static void BindTargetCamera3DLayoutInterval(this UnityEngine.Video.VideoPlayer obj, float seconds, Func<UnityEngine.Video.Video3DLayout> func)
            => BindTargetCamera3DLayoutInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAspectRatio(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, IProperty<UnityEngine.Video.VideoAspectRatio> property)
            => bindings.Bind(property, v => obj.aspectRatio = v);
        public static void BindAspectRatio(this UnityEngine.Video.VideoPlayer obj, IProperty<UnityEngine.Video.VideoAspectRatio> property)
            => BindAspectRatio(obj, Bindings2._scope, property);
        public static void BindAspectRatio(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, Func<UnityEngine.Video.VideoAspectRatio> func)
            => bindings.BindUpdate(() => obj.aspectRatio = func());
        public static void BindAspectRatio(this UnityEngine.Video.VideoPlayer obj, Func<UnityEngine.Video.VideoAspectRatio> func)
            => BindAspectRatio(obj, Bindings2._scope, func);
        public static void BindAspectRatioInterval(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Video.VideoAspectRatio> func)
            => bindings.BindInterval(seconds, () => obj.aspectRatio = func());
        public static void BindAspectRatioInterval(this UnityEngine.Video.VideoPlayer obj, float seconds, Func<UnityEngine.Video.VideoAspectRatio> func)
            => BindAspectRatioInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAudioOutputMode(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, IProperty<UnityEngine.Video.VideoAudioOutputMode> property)
            => bindings.Bind(property, v => obj.audioOutputMode = v);
        public static void BindAudioOutputMode(this UnityEngine.Video.VideoPlayer obj, IProperty<UnityEngine.Video.VideoAudioOutputMode> property)
            => BindAudioOutputMode(obj, Bindings2._scope, property);
        public static void BindAudioOutputMode(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, Func<UnityEngine.Video.VideoAudioOutputMode> func)
            => bindings.BindUpdate(() => obj.audioOutputMode = func());
        public static void BindAudioOutputMode(this UnityEngine.Video.VideoPlayer obj, Func<UnityEngine.Video.VideoAudioOutputMode> func)
            => BindAudioOutputMode(obj, Bindings2._scope, func);
        public static void BindAudioOutputModeInterval(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, float seconds, Func<UnityEngine.Video.VideoAudioOutputMode> func)
            => bindings.BindInterval(seconds, () => obj.audioOutputMode = func());
        public static void BindAudioOutputModeInterval(this UnityEngine.Video.VideoPlayer obj, float seconds, Func<UnityEngine.Video.VideoAudioOutputMode> func)
            => BindAudioOutputModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindControlledAudioTrackCount(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, IProperty<System.UInt16> property)
            => bindings.Bind(property, v => obj.controlledAudioTrackCount = v);
        public static void BindControlledAudioTrackCount(this UnityEngine.Video.VideoPlayer obj, IProperty<System.UInt16> property)
            => BindControlledAudioTrackCount(obj, Bindings2._scope, property);
        public static void BindControlledAudioTrackCount(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, Func<System.UInt16> func)
            => bindings.BindUpdate(() => obj.controlledAudioTrackCount = func());
        public static void BindControlledAudioTrackCount(this UnityEngine.Video.VideoPlayer obj, Func<System.UInt16> func)
            => BindControlledAudioTrackCount(obj, Bindings2._scope, func);
        public static void BindControlledAudioTrackCountInterval(this UnityEngine.Video.VideoPlayer obj, Bindings2 bindings, float seconds, Func<System.UInt16> func)
            => bindings.BindInterval(seconds, () => obj.controlledAudioTrackCount = func());
        public static void BindControlledAudioTrackCountInterval(this UnityEngine.Video.VideoPlayer obj, float seconds, Func<System.UInt16> func)
            => BindControlledAudioTrackCountInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_VEHICLES
        public static void BindMass(this WheelCollider obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.mass = v);
        public static void BindMass(this WheelCollider obj, IProperty<System.Single> property)
            => BindMass(obj, Bindings2._scope, property);
        public static void BindMass(this WheelCollider obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.mass = func());
        public static void BindMass(this WheelCollider obj, Func<System.Single> func)
            => BindMass(obj, Bindings2._scope, func);
        public static void BindMassInterval(this WheelCollider obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.mass = func());
        public static void BindMassInterval(this WheelCollider obj, float seconds, Func<System.Single> func)
            => BindMassInterval(obj, Bindings2._scope, seconds, func);
        public static void BindRadius(this WheelCollider obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.radius = v);
        public static void BindRadius(this WheelCollider obj, IProperty<System.Single> property)
            => BindRadius(obj, Bindings2._scope, property);
        public static void BindRadius(this WheelCollider obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.radius = func());
        public static void BindRadius(this WheelCollider obj, Func<System.Single> func)
            => BindRadius(obj, Bindings2._scope, func);
        public static void BindRadiusInterval(this WheelCollider obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.radius = func());
        public static void BindRadiusInterval(this WheelCollider obj, float seconds, Func<System.Single> func)
            => BindRadiusInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWheelDampingRate(this WheelCollider obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.wheelDampingRate = v);
        public static void BindWheelDampingRate(this WheelCollider obj, IProperty<System.Single> property)
            => BindWheelDampingRate(obj, Bindings2._scope, property);
        public static void BindWheelDampingRate(this WheelCollider obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.wheelDampingRate = func());
        public static void BindWheelDampingRate(this WheelCollider obj, Func<System.Single> func)
            => BindWheelDampingRate(obj, Bindings2._scope, func);
        public static void BindWheelDampingRateInterval(this WheelCollider obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.wheelDampingRate = func());
        public static void BindWheelDampingRateInterval(this WheelCollider obj, float seconds, Func<System.Single> func)
            => BindWheelDampingRateInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSuspensionDistance(this WheelCollider obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.suspensionDistance = v);
        public static void BindSuspensionDistance(this WheelCollider obj, IProperty<System.Single> property)
            => BindSuspensionDistance(obj, Bindings2._scope, property);
        public static void BindSuspensionDistance(this WheelCollider obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.suspensionDistance = func());
        public static void BindSuspensionDistance(this WheelCollider obj, Func<System.Single> func)
            => BindSuspensionDistance(obj, Bindings2._scope, func);
        public static void BindSuspensionDistanceInterval(this WheelCollider obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.suspensionDistance = func());
        public static void BindSuspensionDistanceInterval(this WheelCollider obj, float seconds, Func<System.Single> func)
            => BindSuspensionDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindForceAppPointDistance(this WheelCollider obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.forceAppPointDistance = v);
        public static void BindForceAppPointDistance(this WheelCollider obj, IProperty<System.Single> property)
            => BindForceAppPointDistance(obj, Bindings2._scope, property);
        public static void BindForceAppPointDistance(this WheelCollider obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.forceAppPointDistance = func());
        public static void BindForceAppPointDistance(this WheelCollider obj, Func<System.Single> func)
            => BindForceAppPointDistance(obj, Bindings2._scope, func);
        public static void BindForceAppPointDistanceInterval(this WheelCollider obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.forceAppPointDistance = func());
        public static void BindForceAppPointDistanceInterval(this WheelCollider obj, float seconds, Func<System.Single> func)
            => BindForceAppPointDistanceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCenter(this WheelCollider obj, Bindings2 bindings, IProperty<UnityEngine.Vector3> property)
            => bindings.Bind(property, v => obj.center = v);
        public static void BindCenter(this WheelCollider obj, IProperty<UnityEngine.Vector3> property)
            => BindCenter(obj, Bindings2._scope, property);
        public static void BindCenter(this WheelCollider obj, Bindings2 bindings, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = func());
        public static void BindCenter(this WheelCollider obj, Func<UnityEngine.Vector3> func)
            => BindCenter(obj, Bindings2._scope, func);
        public static void BindCenterInterval(this WheelCollider obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector3> func)
            => bindings.BindInterval(seconds, () => obj.center = func());
        public static void BindCenterInterval(this WheelCollider obj, float seconds, Func<UnityEngine.Vector3> func)
            => BindCenterInterval(obj, Bindings2._scope, seconds, func);
        public static void BindCenterLerp(this WheelCollider obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.center = Vector3.Lerp(obj.center, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCenterLerp(this WheelCollider obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCenterLerp(obj, Bindings2._scope, speed, property);
        public static void BindCenterLerp(this WheelCollider obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = Vector3.Lerp(obj.center, func(), speed * Time.smoothDeltaTime));
        public static void BindCenterLerp(this WheelCollider obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCenterLerp(obj, Bindings2._scope, speed, func);
        public static void BindCenterTowards(this WheelCollider obj, Bindings2 bindings, float speed, Property<UnityEngine.Vector3> property)
            => bindings.BindUpdate(() => obj.center = Vector3.MoveTowards(obj.center, property.Value, speed * Time.smoothDeltaTime));
        public static void BindCenterTowards(this WheelCollider obj, float speed, Property<UnityEngine.Vector3> property)
            => BindCenterTowards(obj, Bindings2._scope, speed, property);
        public static void BindCenterTowards(this WheelCollider obj, Bindings2 bindings, float speed, Func<UnityEngine.Vector3> func)
            => bindings.BindUpdate(() => obj.center = Vector3.MoveTowards(obj.center, func(), speed * Time.smoothDeltaTime));
        public static void BindCenterTowards(this WheelCollider obj, float speed, Func<UnityEngine.Vector3> func)
            => BindCenterTowards(obj, Bindings2._scope, speed, func);
        public static void AnimateCenter(this WheelCollider obj, Bindings2 bindings, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => bindings.Animate(curve, t => obj.center = Vector3.Lerp(start, end, t));
        public static void AnimateCenter(this WheelCollider obj, UnityEngine.Vector3 start, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, start, end, curve);
        public static void AnimateCenter(this WheelCollider obj, Bindings2 bindings, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, obj.center, end, curve);
        public static void AnimateCenter(this WheelCollider obj, UnityEngine.Vector3 end, AnimationCurve curve)
            => AnimateCenter(obj, Bindings2._scope, end, curve);
        public static void BindSuspensionSpring(this WheelCollider obj, Bindings2 bindings, IProperty<UnityEngine.JointSpring> property)
            => bindings.Bind(property, v => obj.suspensionSpring = v);
        public static void BindSuspensionSpring(this WheelCollider obj, IProperty<UnityEngine.JointSpring> property)
            => BindSuspensionSpring(obj, Bindings2._scope, property);
        public static void BindSuspensionSpring(this WheelCollider obj, Bindings2 bindings, Func<UnityEngine.JointSpring> func)
            => bindings.BindUpdate(() => obj.suspensionSpring = func());
        public static void BindSuspensionSpring(this WheelCollider obj, Func<UnityEngine.JointSpring> func)
            => BindSuspensionSpring(obj, Bindings2._scope, func);
        public static void BindSuspensionSpringInterval(this WheelCollider obj, Bindings2 bindings, float seconds, Func<UnityEngine.JointSpring> func)
            => bindings.BindInterval(seconds, () => obj.suspensionSpring = func());
        public static void BindSuspensionSpringInterval(this WheelCollider obj, float seconds, Func<UnityEngine.JointSpring> func)
            => BindSuspensionSpringInterval(obj, Bindings2._scope, seconds, func);
        public static void BindForwardFriction(this WheelCollider obj, Bindings2 bindings, IProperty<UnityEngine.WheelFrictionCurve> property)
            => bindings.Bind(property, v => obj.forwardFriction = v);
        public static void BindForwardFriction(this WheelCollider obj, IProperty<UnityEngine.WheelFrictionCurve> property)
            => BindForwardFriction(obj, Bindings2._scope, property);
        public static void BindForwardFriction(this WheelCollider obj, Bindings2 bindings, Func<UnityEngine.WheelFrictionCurve> func)
            => bindings.BindUpdate(() => obj.forwardFriction = func());
        public static void BindForwardFriction(this WheelCollider obj, Func<UnityEngine.WheelFrictionCurve> func)
            => BindForwardFriction(obj, Bindings2._scope, func);
        public static void BindForwardFrictionInterval(this WheelCollider obj, Bindings2 bindings, float seconds, Func<UnityEngine.WheelFrictionCurve> func)
            => bindings.BindInterval(seconds, () => obj.forwardFriction = func());
        public static void BindForwardFrictionInterval(this WheelCollider obj, float seconds, Func<UnityEngine.WheelFrictionCurve> func)
            => BindForwardFrictionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSidewaysFriction(this WheelCollider obj, Bindings2 bindings, IProperty<UnityEngine.WheelFrictionCurve> property)
            => bindings.Bind(property, v => obj.sidewaysFriction = v);
        public static void BindSidewaysFriction(this WheelCollider obj, IProperty<UnityEngine.WheelFrictionCurve> property)
            => BindSidewaysFriction(obj, Bindings2._scope, property);
        public static void BindSidewaysFriction(this WheelCollider obj, Bindings2 bindings, Func<UnityEngine.WheelFrictionCurve> func)
            => bindings.BindUpdate(() => obj.sidewaysFriction = func());
        public static void BindSidewaysFriction(this WheelCollider obj, Func<UnityEngine.WheelFrictionCurve> func)
            => BindSidewaysFriction(obj, Bindings2._scope, func);
        public static void BindSidewaysFrictionInterval(this WheelCollider obj, Bindings2 bindings, float seconds, Func<UnityEngine.WheelFrictionCurve> func)
            => bindings.BindInterval(seconds, () => obj.sidewaysFriction = func());
        public static void BindSidewaysFrictionInterval(this WheelCollider obj, float seconds, Func<UnityEngine.WheelFrictionCurve> func)
            => BindSidewaysFrictionInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_PHYSICS_2D
        public static void BindEnableCollision(this WheelJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.enableCollision = v);
        public static void BindEnableCollision(this WheelJoint2D obj, IProperty<System.Boolean> property)
            => BindEnableCollision(obj, Bindings2._scope, property);
        public static void BindEnableCollision(this WheelJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.enableCollision = func());
        public static void BindEnableCollision(this WheelJoint2D obj, Func<System.Boolean> func)
            => BindEnableCollision(obj, Bindings2._scope, func);
        public static void BindEnableCollisionInterval(this WheelJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.enableCollision = func());
        public static void BindEnableCollisionInterval(this WheelJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindEnableCollisionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedBody(this WheelJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Rigidbody2D> property)
            => bindings.Bind(property, v => obj.connectedBody = v);
        public static void BindConnectedBody(this WheelJoint2D obj, IProperty<UnityEngine.Rigidbody2D> property)
            => BindConnectedBody(obj, Bindings2._scope, property);
        public static void BindConnectedBody(this WheelJoint2D obj, Bindings2 bindings, Func<UnityEngine.Rigidbody2D> func)
            => bindings.BindUpdate(() => obj.connectedBody = func());
        public static void BindConnectedBody(this WheelJoint2D obj, Func<UnityEngine.Rigidbody2D> func)
            => BindConnectedBody(obj, Bindings2._scope, func);
        public static void BindConnectedBodyInterval(this WheelJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Rigidbody2D> func)
            => bindings.BindInterval(seconds, () => obj.connectedBody = func());
        public static void BindConnectedBodyInterval(this WheelJoint2D obj, float seconds, Func<UnityEngine.Rigidbody2D> func)
            => BindConnectedBodyInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAutoConfigureConnectedAnchor(this WheelJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.autoConfigureConnectedAnchor = v);
        public static void BindAutoConfigureConnectedAnchor(this WheelJoint2D obj, IProperty<System.Boolean> property)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindAutoConfigureConnectedAnchor(this WheelJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchor(this WheelJoint2D obj, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindAutoConfigureConnectedAnchorInterval(this WheelJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.autoConfigureConnectedAnchor = func());
        public static void BindAutoConfigureConnectedAnchorInterval(this WheelJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindAutoConfigureConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindAnchor(this WheelJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.anchor = v);
        public static void BindAnchor(this WheelJoint2D obj, IProperty<UnityEngine.Vector2> property)
            => BindAnchor(obj, Bindings2._scope, property);
        public static void BindAnchor(this WheelJoint2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.anchor = func());
        public static void BindAnchor(this WheelJoint2D obj, Func<UnityEngine.Vector2> func)
            => BindAnchor(obj, Bindings2._scope, func);
        public static void BindAnchorInterval(this WheelJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.anchor = func());
        public static void BindAnchorInterval(this WheelJoint2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindConnectedAnchor(this WheelJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.Vector2> property)
            => bindings.Bind(property, v => obj.connectedAnchor = v);
        public static void BindConnectedAnchor(this WheelJoint2D obj, IProperty<UnityEngine.Vector2> property)
            => BindConnectedAnchor(obj, Bindings2._scope, property);
        public static void BindConnectedAnchor(this WheelJoint2D obj, Bindings2 bindings, Func<UnityEngine.Vector2> func)
            => bindings.BindUpdate(() => obj.connectedAnchor = func());
        public static void BindConnectedAnchor(this WheelJoint2D obj, Func<UnityEngine.Vector2> func)
            => BindConnectedAnchor(obj, Bindings2._scope, func);
        public static void BindConnectedAnchorInterval(this WheelJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.Vector2> func)
            => bindings.BindInterval(seconds, () => obj.connectedAnchor = func());
        public static void BindConnectedAnchorInterval(this WheelJoint2D obj, float seconds, Func<UnityEngine.Vector2> func)
            => BindConnectedAnchorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindSuspension(this WheelJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.JointSuspension2D> property)
            => bindings.Bind(property, v => obj.suspension = v);
        public static void BindSuspension(this WheelJoint2D obj, IProperty<UnityEngine.JointSuspension2D> property)
            => BindSuspension(obj, Bindings2._scope, property);
        public static void BindSuspension(this WheelJoint2D obj, Bindings2 bindings, Func<UnityEngine.JointSuspension2D> func)
            => bindings.BindUpdate(() => obj.suspension = func());
        public static void BindSuspension(this WheelJoint2D obj, Func<UnityEngine.JointSuspension2D> func)
            => BindSuspension(obj, Bindings2._scope, func);
        public static void BindSuspensionInterval(this WheelJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.JointSuspension2D> func)
            => bindings.BindInterval(seconds, () => obj.suspension = func());
        public static void BindSuspensionInterval(this WheelJoint2D obj, float seconds, Func<UnityEngine.JointSuspension2D> func)
            => BindSuspensionInterval(obj, Bindings2._scope, seconds, func);
        public static void BindUseMotor(this WheelJoint2D obj, Bindings2 bindings, IProperty<System.Boolean> property)
            => bindings.Bind(property, v => obj.useMotor = v);
        public static void BindUseMotor(this WheelJoint2D obj, IProperty<System.Boolean> property)
            => BindUseMotor(obj, Bindings2._scope, property);
        public static void BindUseMotor(this WheelJoint2D obj, Bindings2 bindings, Func<System.Boolean> func)
            => bindings.BindUpdate(() => obj.useMotor = func());
        public static void BindUseMotor(this WheelJoint2D obj, Func<System.Boolean> func)
            => BindUseMotor(obj, Bindings2._scope, func);
        public static void BindUseMotorInterval(this WheelJoint2D obj, Bindings2 bindings, float seconds, Func<System.Boolean> func)
            => bindings.BindInterval(seconds, () => obj.useMotor = func());
        public static void BindUseMotorInterval(this WheelJoint2D obj, float seconds, Func<System.Boolean> func)
            => BindUseMotorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindMotor(this WheelJoint2D obj, Bindings2 bindings, IProperty<UnityEngine.JointMotor2D> property)
            => bindings.Bind(property, v => obj.motor = v);
        public static void BindMotor(this WheelJoint2D obj, IProperty<UnityEngine.JointMotor2D> property)
            => BindMotor(obj, Bindings2._scope, property);
        public static void BindMotor(this WheelJoint2D obj, Bindings2 bindings, Func<UnityEngine.JointMotor2D> func)
            => bindings.BindUpdate(() => obj.motor = func());
        public static void BindMotor(this WheelJoint2D obj, Func<UnityEngine.JointMotor2D> func)
            => BindMotor(obj, Bindings2._scope, func);
        public static void BindMotorInterval(this WheelJoint2D obj, Bindings2 bindings, float seconds, Func<UnityEngine.JointMotor2D> func)
            => bindings.BindInterval(seconds, () => obj.motor = func());
        public static void BindMotorInterval(this WheelJoint2D obj, float seconds, Func<UnityEngine.JointMotor2D> func)
            => BindMotorInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakForce(this WheelJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakForce = v);
        public static void BindBreakForce(this WheelJoint2D obj, IProperty<System.Single> property)
            => BindBreakForce(obj, Bindings2._scope, property);
        public static void BindBreakForce(this WheelJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakForce = func());
        public static void BindBreakForce(this WheelJoint2D obj, Func<System.Single> func)
            => BindBreakForce(obj, Bindings2._scope, func);
        public static void BindBreakForceInterval(this WheelJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakForce = func());
        public static void BindBreakForceInterval(this WheelJoint2D obj, float seconds, Func<System.Single> func)
            => BindBreakForceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindBreakTorque(this WheelJoint2D obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.breakTorque = v);
        public static void BindBreakTorque(this WheelJoint2D obj, IProperty<System.Single> property)
            => BindBreakTorque(obj, Bindings2._scope, property);
        public static void BindBreakTorque(this WheelJoint2D obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.breakTorque = func());
        public static void BindBreakTorque(this WheelJoint2D obj, Func<System.Single> func)
            => BindBreakTorque(obj, Bindings2._scope, func);
        public static void BindBreakTorqueInterval(this WheelJoint2D obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.breakTorque = func());
        public static void BindBreakTorqueInterval(this WheelJoint2D obj, float seconds, Func<System.Single> func)
            => BindBreakTorqueInterval(obj, Bindings2._scope, seconds, func);
        #endif


        #if UNITY_WIND
        public static void BindMode(this WindZone obj, Bindings2 bindings, IProperty<UnityEngine.WindZoneMode> property)
            => bindings.Bind(property, v => obj.mode = v);
        public static void BindMode(this WindZone obj, IProperty<UnityEngine.WindZoneMode> property)
            => BindMode(obj, Bindings2._scope, property);
        public static void BindMode(this WindZone obj, Bindings2 bindings, Func<UnityEngine.WindZoneMode> func)
            => bindings.BindUpdate(() => obj.mode = func());
        public static void BindMode(this WindZone obj, Func<UnityEngine.WindZoneMode> func)
            => BindMode(obj, Bindings2._scope, func);
        public static void BindModeInterval(this WindZone obj, Bindings2 bindings, float seconds, Func<UnityEngine.WindZoneMode> func)
            => bindings.BindInterval(seconds, () => obj.mode = func());
        public static void BindModeInterval(this WindZone obj, float seconds, Func<UnityEngine.WindZoneMode> func)
            => BindModeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWindMain(this WindZone obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.windMain = v);
        public static void BindWindMain(this WindZone obj, IProperty<System.Single> property)
            => BindWindMain(obj, Bindings2._scope, property);
        public static void BindWindMain(this WindZone obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.windMain = func());
        public static void BindWindMain(this WindZone obj, Func<System.Single> func)
            => BindWindMain(obj, Bindings2._scope, func);
        public static void BindWindMainInterval(this WindZone obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.windMain = func());
        public static void BindWindMainInterval(this WindZone obj, float seconds, Func<System.Single> func)
            => BindWindMainInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWindTurbulence(this WindZone obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.windTurbulence = v);
        public static void BindWindTurbulence(this WindZone obj, IProperty<System.Single> property)
            => BindWindTurbulence(obj, Bindings2._scope, property);
        public static void BindWindTurbulence(this WindZone obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.windTurbulence = func());
        public static void BindWindTurbulence(this WindZone obj, Func<System.Single> func)
            => BindWindTurbulence(obj, Bindings2._scope, func);
        public static void BindWindTurbulenceInterval(this WindZone obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.windTurbulence = func());
        public static void BindWindTurbulenceInterval(this WindZone obj, float seconds, Func<System.Single> func)
            => BindWindTurbulenceInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWindPulseMagnitude(this WindZone obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.windPulseMagnitude = v);
        public static void BindWindPulseMagnitude(this WindZone obj, IProperty<System.Single> property)
            => BindWindPulseMagnitude(obj, Bindings2._scope, property);
        public static void BindWindPulseMagnitude(this WindZone obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.windPulseMagnitude = func());
        public static void BindWindPulseMagnitude(this WindZone obj, Func<System.Single> func)
            => BindWindPulseMagnitude(obj, Bindings2._scope, func);
        public static void BindWindPulseMagnitudeInterval(this WindZone obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.windPulseMagnitude = func());
        public static void BindWindPulseMagnitudeInterval(this WindZone obj, float seconds, Func<System.Single> func)
            => BindWindPulseMagnitudeInterval(obj, Bindings2._scope, seconds, func);
        public static void BindWindPulseFrequency(this WindZone obj, Bindings2 bindings, IProperty<System.Single> property)
            => bindings.Bind(property, v => obj.windPulseFrequency = v);
        public static void BindWindPulseFrequency(this WindZone obj, IProperty<System.Single> property)
            => BindWindPulseFrequency(obj, Bindings2._scope, property);
        public static void BindWindPulseFrequency(this WindZone obj, Bindings2 bindings, Func<System.Single> func)
            => bindings.BindUpdate(() => obj.windPulseFrequency = func());
        public static void BindWindPulseFrequency(this WindZone obj, Func<System.Single> func)
            => BindWindPulseFrequency(obj, Bindings2._scope, func);
        public static void BindWindPulseFrequencyInterval(this WindZone obj, Bindings2 bindings, float seconds, Func<System.Single> func)
            => bindings.BindInterval(seconds, () => obj.windPulseFrequency = func());
        public static void BindWindPulseFrequencyInterval(this WindZone obj, float seconds, Func<System.Single> func)
            => BindWindPulseFrequencyInterval(obj, Bindings2._scope, seconds, func);
        #endif
    }
}